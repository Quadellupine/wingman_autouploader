"use strict";function compileHealingExtTemplates(){{Vue.component("healing-extension-view-component",{props:['light'],template:`    <div>        <div class="d-flex flex-row justify-content-center mt-1" id="healing-phase-nav">            <phase-component :phases="logdata.phases"></phase-component>        </div>        <div class="d-flex flex-row justify-content-center mb-2 mt-2" id="healing-actors">            <div class="flex-row justify-content-center align-items-center flex-wrap mr-5">                <player-target-component :players="logdata.players"></player-target-component>            </div>            <div class="ml-5">                <player-component :players="logdata.players"></player-component>            </div>        </div>             <h2 class="text-center">{{ name }}</h2>        <h6 class="text-center" v-if="!everybodyRunning">Data may be incomplete due to not everybody running the <a href="https://github.com/Krappa322/arcdps_healing_stats/releases">healing stats addon</a>. Make sure to enable its logging features.</h6>        <ul class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: tab === 0}" @click="tab = 0">Healing Stats</a>            </li>                <li>                <a class="nav-link" :class="{active: tab === 1}" @click="tab = 1">Buffs</a>            </li>                     <li v-if="hasMechanics">                <a class="nav-link" :class="{active: tab === 2}" @click="tab = 2">Mechanics</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 3}" @click="tab = 3">Healing Graph</a>            </li>                <li v-if="players.length > 1">                <a class="nav-link" :class="{active: tab === 4}" @click="tab = 4">Rotations</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 5}" @click="tab = 5">Player Healing Summary</a>            </li>        </ul>        <keep-alive>            <healing-stat-tables-component v-if="tab === 0" :key="'healing-stat-tables'"                :phaseindex="activePhase" :playerindex="activePlayer" :activetargets="activePlayerTargets"></healing-stat-tables-component>                                <buff-tables-component v-if="tab === 1" :key="'healingbuff-tables'"            :phaseindex="activePhase" :playerindex="activePlayer"></buff-tables-component>                      <mechanics-stats-component v-if="tab === 2" :key="'healingmechanics'"                :phaseindex="activePhase" :playerindex="activePlayer"></mechanics-stats-component>             <healing-graph-stats-component v-if="tab === 3" :key="'healing-graph'"            :activetargets="activePlayerTargets" :phaseindex="activePhase" :playerindex="activePlayer"            :light="light"></healing-graph-stats-component>               <player-rotations-tab-component v-if="tab === 4" :key="'healingrotations'" :phaseindex="activePhase"             :light="light" :playerindex="activePlayer"></player-rotations-tab-component>            <player-healing-stats-component v-if="tab === 5" :key="'healing-players'"                :activeplayer="activePlayer" :phaseindex="activePhase" :activetargets="activePlayerTargets"                :light="light"></player-healing-stats-component>        </keep-alive>    </div>`,data:function(){return{tab:0,logdata:simpleLogData};},computed:{activePhase:function(){var phases=this.logdata.phases;for(var i=0;i<phases.length;i++){if(phases[i].active){return i;}}},phase:function(){return logData.phases[this.activePhase];},activePlayer:function(){var players=this.logdata.players;for(var i=0;i<players.length;i++){if(players[i].active){return i;}}
return-1;},name:function(){return this.phase.name+" Healing Summary";},activePlayerTargets:function(){var res=[];for(var i=0;i<logData.players.length;i++){var player=this.logdata.players[i];if(player.targetActive){res.push(i);}}
return res;},players:function(){return logData.players;},hasMechanics:function(){return logData.mechanicMap.length>0&&!logData.noMechanics;},everybodyRunning:function(){for(var i=0;i<logData.usedExtensions.length;i++){var usedExtension=logData.usedExtensions[i];if(usedExtension.includes("Healing Stats")){return logData.playersRunningExtensions[i].length===logData.players.filter(x=>!x.notInSquad).length;}}
return false;},}});}
{Vue.component("player-target-component",{props:["players"],template:`    <div>        <div class="d-flex flex-column">            <div v-for="group in groups" class="d-flex flex-row mb-1 align-items-center">                <div>                    <ul class="scale85 nav nav-pills">                        <li class="nav-item">                            <a class="nav-link" @click="selectGroup(group)">                                Select                            </a>                        </li>                    </ul>                </div>                <div class="d-flex flex-wrap " style="max-width: 900px;">                    <div v-for="player in group" class="player-cell d-flex flex-column align-items-center justify-content-center" :class="{active: player.targetActive}"                        @click="select(player.id)">                        <div>                            <img :src="player.icon" :alt="player.profession" class="icon"                                :data-original-title="player.profession">                            <img v-if="player.health > 0" src="https://wiki.guildwars2.com/images/b/be/Vitality.png" alt="Health"                                class="icon" :data-original-title="'Health: ' + player.health">                        </div>                        <div v-if="player.l1Set.length > 0 || player.l2Set.length > 0">                            <img v-for="wep in player.l1Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                            <span v-if="player.l1Set.length > 0 && player.l2Set.length > 0">/</span>                            <img v-for="wep in player.l2Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                        </div>                        <div v-if="player.a1Set.length > 0 || player.a2Set.length > 0">                            <img v-for="wep in player.a1Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                            <span v-if="player.a1Set.length > 0 && player.a2Set.length > 0">/</span>                            <img v-for="wep in player.a2Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                        </div>                        <div class="d-flex align-items-center justify-content-center">                            <img v-if="player.isCommander"                                src="https://wiki.guildwars2.com/images/5/54/Commander_tag_%28blue%29.png" alt="Commander"                                class="icon" data-original-title="Commander">                            <span class="player-cell-shorten" :data-original-title="player.acc">                                {{ player.name }}                            </span>                        </div>                    </div>                </div>            </div>                    </div>    </div>`,methods:{getIcon:function(path){return urls[path];},select:function(id){this.players[id].targetActive=!this.players[id].targetActive;},selectGroup:function(group){var enable=true;if(group.filter(x=>x.targetActive).length===group.length){enable=false;}
for(var i=0;i<group.length;i++){this.players[group[i].id].targetActive=enable;}}},computed:{groups:function(){var aux=[];var i=0;for(i=0;i<logData.players.length;i++){var playerData=logData.players[i];if(playerData.isFake){continue;}
if(!aux[playerData.group]){aux[playerData.group]=[];}
var toPush={};Object.assign(toPush,playerData);toPush.targetActive=this.players[i].targetActive;aux[playerData.group].push(toPush);}
var noUndefinedGroups=[];for(i=0;i<aux.length;i++){if(aux[i]){noUndefinedGroups.push(aux[i]);}}
return noUndefinedGroups;}}});}
{Vue.component("incoming-healing-stats-component",{props:["phaseindex","playerindex"],template:`    <div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :index="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">                        Sub                    </th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')">                    </th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">                        Name                    </th>                    <th class="text-left" :class="getHeaderClass('Account')" @click="sortBy('Account')">                        Account                    </th>                    <th class="damage-cell" :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0)" data-original-title="Healed">                        <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png"                            alt="Healed" class="icon icon-hover">                    </th>                    <th class="damage-cell" :class="getHeaderClass('Data', 1)" @click="sortBy('Data', 1)" data-original-title="Healing Power Healed">                        <img src="https://wiki.guildwars2.com/images/8/81/Healing_Power.png" alt="Healing Power Healed"                            class="icon icon-hover">                    </th>                    <th class="damage-cell" :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2)" data-original-title="Conversion Healed">                        <img src="https://wiki.guildwars2.com/images/4/4a/Litany_of_Wrath.png" alt="Conversion Healed"                            class="icon icon-hover">                    </th>                    <th class="damage-cell" :class="getHeaderClass('Data', 3)" @click="sortBy('Data', 3)" data-original-title="Downed Healed">                        <img src="https://wiki.guildwars2.com/images/3/3d/Downed_ally.png" alt="Downed Healing"                            class="icon icon-hover">                    </th>                    <th v-if="hasBarrier" :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4)" data-original-title="Barrier Received" class="damage-cell">                        <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png"                            alt="Barrier Received" class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(tableData.rows)" :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">                        {{row.player.group}}                    </td>                    <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">                            {{row.player.profession}}                        </span>                    </td>                    <td :class="getBodyClass('Name')" class="text-left">                        {{row.player.name}}                    </td>                    <td :class="getBodyClass('Account')" class="text-left">                        {{row.player.acc}}                    </td>                    <td v-for="(value, index) in row.incomingHeal" :class="getBodyClass('Data', index)">                        {{value}}                    </td>                </tr>            </tbody>            <tfoot>                <tr v-for="sum in tableData.sums">                    <td></td>                    <td></td>                    <td class="text-left">                        {{sum.name}}                    </td>                    <td></td>                    <td v-for="(value, index) in sum.incomingHeal">                        {{value}}                    </td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent],data:function(){return{cache:new Map(),sortdata:{order:"desc",index:0,key:"Data"}};},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Account":rows.sort((x,y)=>order*x.player.acc.localeCompare(y.player.acc));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Data":var index=this.sortdata.index;rows.sort((x,y)=>order*(x.incomingHeal[index]-y.incomingHeal[index]));break;default:return null;break;}
return rows;},},computed:{tableid:function(){return "incoming-heal-table";},phase:function(){return logData.phases[this.phaseindex];},hPhase:function(){return healingStatsExtension.healingPhases[this.phaseindex];},hasBarrier:function(){return!!barrierStatsExtension;},bPhase:function(){return barrierStatsExtension.barrierPhases[this.phaseindex];},tableData:function(){if(this.cache.has(this.phaseindex)){return this.cache.get(this.phaseindex);}
var rows=[];var sums=[];var total=[0,0,0,0];if(this.hasBarrier){total.push(0);}
var groups=[];var i;for(i=0;i<this.hPhase.incomingHealingStats.length;i++){var incomingHeal=this.hPhase.incomingHealingStats[i].slice();if(this.hasBarrier){incomingHeal=incomingHeal.concat(this.bPhase.incomingBarrierStats[i])}
var player=logData.players[i];if(player.isFake){continue;}
rows.push({player:player,incomingHeal:incomingHeal});if(!groups[player.group]){groups[player.group]=[0,0,0,0];if(this.hasBarrier){groups[player.group].push(0);}}
for(var j=0;j<total.length;j++){total[j]+=incomingHeal[j];groups[player.group][j]+=incomingHeal[j];}}
for(i=0;i<groups.length;i++){if(groups[i]){sums.push({name:"Group "+i,incomingHeal:groups[i]});}}
sums.push({name:"Total",incomingHeal:total});var res={rows:rows,sums:sums};this.cache.set(this.phaseindex,res);return res;}}});}
{Vue.component("healing-stat-tables-component",{props:["phaseindex","playerindex","activetargets"],template:`    <div>        <ul class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: tab === 0}" @click="tab = 0">Outgoing Healing Stats</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 1}" @click="tab = 1">Incoming Healing Stats</a>            </li>        </ul>        <keep-alive>            <outgoing-healing-stats-component v-if="tab === 0" :key="'healing'" :phaseindex="phaseindex"                :playerindex="playerindex" :activetargets="activetargets"></outgoing-healing-stats-component>            <incoming-healing-stats-component v-if="tab === 1" :key="'incoming-healing'" :phaseindex="phaseindex"                :playerindex="playerindex"></incoming-healing-stats-component>        </keep-alive>    </div>`,data:function(){return{tab:0,};},});}
{Vue.component("outgoing-healing-stats-component",{props:["activetargets","playerindex","phaseindex"],template:`    <div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :index="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">                        Sub                    </th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')">                    </th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">                        Name                    </th>                    <th class="text-left" :class="getHeaderClass('Account')" @click="sortBy('Account')">                        Account                    </th>                    <th data-original-title="All" class="damage-cell"                        :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0)">                        Target <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="All"                                    class="icon">                    </th>                    <th data-original-title="Healing Power" class="damage-cell"                        :class="getHeaderClass('Data', 1)" @click="sortBy('Data', 1)">                        Target <img src="https://wiki.guildwars2.com/images/8/81/Healing_Power.png" alt="Healing Power"                                    class="icon">                    </th>                    <th data-original-title="Conversion" class="damage-cell"                        :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2)">                        Target <img src="https://wiki.guildwars2.com/images/4/4a/Litany_of_Wrath.png" alt="Conversion"                                    class="icon">                    </th>                    <th data-original-title="Downed Healing" class="damage-cell"                        :class="getHeaderClass('Data', 3)" @click="sortBy('Data', 3)">                        Target <img src="https://wiki.guildwars2.com/images/3/3d/Downed_ally.png" alt="Downed Healing"                            class="icon">                    </th>                    <th v-if="hasBarrier" data-original-title="Barrier" class="damage-cell"                        :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4)">                        Target <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                                 class="icon">                    </th>                    <th data-original-title="All" class="damage-cell"                        :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5)">                        All <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="All"                                 class="icon">                    </th>                    <th data-original-title="Healing Power" class="damage-cell"                        :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6)">                        All <img src="https://wiki.guildwars2.com/images/8/81/Healing_Power.png" alt="Healing Power"                                 class="icon">                    </th>                    <th data-original-title="Conversion" class="damage-cell"                        :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7)">                        All <img src="https://wiki.guildwars2.com/images/4/4a/Litany_of_Wrath.png" alt="Conversion"                                 class="icon">                    </th>                    <th data-original-title="Downed Healing" class="damage-cell"                        :class="getHeaderClass('Data', 8)" @click="sortBy('Data', 8)">                        All <img src="https://wiki.guildwars2.com/images/3/3d/Downed_ally.png" alt="Downed Healing"                            class="icon ">                    </th>                    <th v-if="hasBarrier" data-original-title="Barrier" class="damage-cell"                        :class="getHeaderClass('Data', 9)" @click="sortBy('Data', 9)">                        All <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                                 class="icon">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(tableData.rows)" :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">                        {{row.player.group}}                    </td>                    <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">                            {{row.player.profession}}                        </span>                    </td>                    <td :class="getBodyClass('Name')" class="text-left">                        {{row.player.name}}                    </td>                    <td :class="getBodyClass('Account')" class="text-left">                        {{row.player.acc}}                    </td>                    <td v-if="!showHealing" v-for="(value, index) in row.hps" :class="getBodyClass('Data', index)"                        :data-original-title="value + ' total' + '<br>' + computeTotalContribution(index, row.hps,tableData.sums)+ '<br>'+ computeGroupContribution(row.player.group, index, row.hps,tableData.sums)">                        {{round(value/phase.durationS)}}                                    </td>                    <td v-if="showHealing" v-for="(value, index) in row.hps" :class="getBodyClass('Data', index)"                        :data-original-title="round(value/phase.durationS) + ' per second' + '<br>' + computeTotalContribution(index, row.hps,tableData.sums)+ '<br>'+ computeGroupContribution(row.player.group, index, row.hps,tableData.sums)">                        {{value}}                                   </td>                </tr>            </tbody>            <tfoot>                <tr v-for="sum in tableData.sums">                    <td></td>                    <td></td>                    <td class="text-left">                        {{sum.name}}                    </td>                    <td></td>                    <td v-if="!showHealing" v-for="(value, index) in sum.hps" :data-original-title="value + ' healing'">                        {{round(value/phase.durationS)}}                                    </td>                    <td v-if="showHealing" v-for="(value, index) in sum.hps" :data-original-title="round(value/phase.durationS) + ' hps'">                        {{value}}                                   </td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent],data:function(){return{showHealing:logData.wvw,cacheTarget:new Map(),sortdata:{order:"desc",index:0,key:"Data"}};},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Account":rows.sort((x,y)=>order*x.player.acc.localeCompare(y.player.acc));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Data":var index=this.sortdata.index;rows.sort((x,y)=>order*(x.hps[index]-y.hps[index]));break;default:return null;break;}
return rows;},computeTotalContribution:function(index,row,sums){return this.round2(row[index]*100/sums[sums.length-1].hps[index])+'% of total';},computeGroupContribution:function(groupIndex,index,row,sums){var sumId=0;for(var sumId=0;sumId<sums.length;sumId++){if(sums[sumId].name.includes(groupIndex)){break;}}
return this.round2(row[index]*100/sums[sumId].hps[index])+'% of group';}},computed:{tableid:function(){return "hps-table";},phase:function(){return logData.phases[this.phaseindex];},hPhase:function(){return healingStatsExtension.healingPhases[this.phaseindex];},hasBarrier:function(){return!!barrierStatsExtension;},bPhase:function(){return barrierStatsExtension.barrierPhases[this.phaseindex];},tableData:function(){var cacheID=this.phaseindex+'-';cacheID+=getTargetCacheID(this.activetargets);if(this.cacheTarget.has(cacheID)){return this.cacheTarget.get(cacheID);}
var rows=[];var sums=[];var total=[0,0,0,0,0,0,0,0];if(this.hasBarrier){total=total.concat([0,0]);}
var groups=[];for(var i=0;i<this.hPhase.outgoingHealingStats.length;i++){var hpsStat=this.hPhase.outgoingHealingStats[i].slice();var hpsTargetStat=[0,0,0,0];for(var j=0;j<this.activetargets.length;j++){var tar=this.hPhase.outgoingHealingStatsTargets[i][this.activetargets[j]];for(var k=0;k<hpsTargetStat.length;k++){hpsTargetStat[k]+=tar[k];}}
if(this.hasBarrier){hpsStat=hpsStat.concat(this.bPhase.outgoingBarrierStats[i]);var bpsTargetStat=[0];for(var j=0;j<this.activetargets.length;j++){var tar=this.bPhase.outgoingBarrierStatsTargets[i][this.activetargets[j]];for(var k=0;k<bpsTargetStat.length;k++){bpsTargetStat[k]+=tar[k];}}
hpsTargetStat=hpsTargetStat.concat(bpsTargetStat);}
var hps=hpsTargetStat.concat(hpsStat);var player=logData.players[i];if(!groups[player.group]){groups[player.group]=[0,0,0,0,0,0,0,0];if(this.hasBarrier){groups[player.group]=groups[player.group].concat([0,0]);}}
for(var j=0;j<hps.length;j++){total[j]+=hps[j];groups[player.group][j]+=hps[j];}
rows.push({player:player,hps:hps});}
for(var i=0;i<groups.length;i++){if(groups[i]){sums.push({name:"Group "+i,hps:groups[i]});}}
sums.push({name:"Total",hps:total});var res={rows:rows,sums:sums};this.cacheTarget.set(cacheID,res);return res;}}});}
{Vue.component("hps-graph-mode-selector-component",{props:['data','phaseduration','phasehassubphases',"column"],template:`    <div class="d-flex flex-row justify-content-center mt-1 mb-1">             <ul class="nav nav-pills d-flex flex-wrap justify-content-center mr-3 scale85" :class="{'flex-row': !column, 'flex-column': column}">            <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.hpsmode = 0" :class="{active: data.hpsmode === 0}">Full</a>            </li>            <li v-if="phaseduration > 4" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.hpsmode = 4" :class="{active: data.hpsmode === 4}">4s</a>            </li>            <li v-if="phaseduration > 10" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.hpsmode = 10" :class="{active: data.hpsmode === 10}">10s</a>            </li>            <li v-if="phaseduration > 20" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.hpsmode = 20" :class="{active: data.hpsmode === 20}">20s</a>            </li>            <li v-if="phaseduration > 30" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.hpsmode = 30" :class="{active: data.hpsmode === 30}">30s</a>            </li>            <li v-if="phasehassubphases" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.hpsmode = -1" :class="{active: data.hpsmode === -1}">Phase</a>            </li>            <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <custom-numberform-component :minValue="0" :maxValue="Math.floor(phaseduration / 2) * 2" :id="'customHPS'"                                                   :placeholderValue="0"></custom-numberform-component>            </li>        </ul>            <ul class="nav nav-pills d-flex flex-wrap justify-content-center ml-3 scale85" :class="{'flex-row': !column, 'flex-column': column}">            <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="All">                <a class="nav-link" @click="data.healingmode = healingModeEnum.All" :class="{active: data.healingmode === healingModeEnum.All}"><img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="All"                    class="icon"></a>            </li>                <li class="nav-item d-flex flex-row justify-content-center align-items-centerm" data-original-title="Healing Power">                <a class="nav-link" @click="data.healingmode = healingModeEnum.HealingPower" :class="{active: data.healingmode === healingModeEnum.HealingPower}"><img src="https://wiki.guildwars2.com/images/8/81/Healing_Power.png" alt="Healing Power"                    class="icon"></a>            </li>                                 <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Conversion">                <a class="nav-link" @click="data.healingmode = healingModeEnum.Conversion" :class="{active: data.healingmode === healingModeEnum.Conversion}"><img src="https://wiki.guildwars2.com/images/4/4a/Litany_of_Wrath.png" alt="Conversion"                    class="icon"></a>            </li>               <!--                             <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Hybrid">                <a class="nav-link" @click="data.healingmode = healingModeEnum.Hybrid" :class="{active: data.healingmode === healingModeEnum.Hybrid}"><img src="https://wiki.guildwars2.com/images/8/81/Healing_Power.png" alt="Hybrid"                    class="icon"> / <img src="https://wiki.guildwars2.com/images/4/4a/Litany_of_Wrath.png" alt="Hybrid"                    class="icon"></a>            </li>            //-->                                             <li v-if="hasBarrier" class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Barrier">                <a class="nav-link" @click="data.healingmode = healingModeEnum.Barrier" :class="{active: data.healingmode === healingModeEnum.Barrier}"><img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                    class="icon"></a>            </li>          </ul>        <ul class="nav nav-pills d-flex flex-wrap justify-content-center ml-3 scale85" :class="{'flex-row': !column, 'flex-column': column}">            <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.graphmode = graphModeEnum.DPS" :class="{active: data.graphmode === graphModeEnum.DPS}">PS</a>            </li>                <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Centered">                <a class="nav-link" @click="data.graphmode = graphModeEnum.CenteredDPS" :class="{active: data.graphmode === graphModeEnum.CenteredDPS}">Ctrd.PS</a>            </li>                                 <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.graphmode = graphModeEnum.Damage" :class="{active: data.graphmode === graphModeEnum.Damage}">Cumulative</a>            </li>        </ul>    </div>`,mounted(){var _this=this;$('#customHPS').on("input ",function(){_this.data.hpsmode=Math.ceil($(this).val()/2)*2;});$('#customHPS').on("click ",function(){_this.data.hpsmode=Math.ceil($(this).val()/2)*2;});},computed:{graphModeEnum:function(){return GraphType;},healingModeEnum:function(){return HealingType;},hasBarrier:function(){return!!barrierStatsExtension;},}});}
{Vue.component("hps-graph-component",{props:["activetargets",'mode','phaseindex','playerindex','light'],template:`    <div>              <hps-graph-mode-selector-component :data="graphhealingdata"            :phaseduration="this.phase.end - this.phase.start" :phasehassubphases="!!this.phase.subPhases" :column="false">        </hps-graph-mode-selector-component>        <h3 class="text-center mt-1 mb-1">{{graphname}}</h3>        <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>    </div>`,mixins:[graphComponent,healingGraphComponent],created:function(){var textColor=this.light?'#495057':'#cccccc';this.layout={yaxis:{title:'HPS',fixedrange:false,rangemode:'tozero',gridcolor:textColor,tickformat:",d",color:textColor},xaxis:{title:'Time(sec)',color:textColor,gridcolor:textColor,rangemode:'nonnegative',tickmode:'auto',nticks:8,xrangeslider:{}},hovermode:'x',hoverdistance:150,legend:{orientation:'h',font:{size:15},y:-0.1},font:{color:textColor},paper_bgcolor:'rgba(0,0,0,0)',plot_bgcolor:'rgba(0,0,0,0)',displayModeBar:false,shapes:[],annotations:[],autosize:true,width:1300,height:850,datarevision:new Date().getTime(),};computePhaseMarkups(this.layout.shapes,this.layout.annotations,this.phase,textColor);this.data=[];var data=this.data;var player;for(var i=0;i<logData.players.length;i++){var pText=[];player=logData.players[i];for(var j=0;j<this.phase.times.length;j++){pText.push(player.name);}
data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:player.colTarget,width:i===this.playerindex?5:2},text:pText,hoverinfo:'y+text+x',name:player.name,});}
data.push({x:this.phase.times,mode:'lines',line:{shape:'spline'},hoverinfo:'name+y+x',visible:'legendonly',name:'All Player'});computePlayersHealingGraphData(this.graph,this.data,null);addMechanicsToGraph(data,this.phase,this.phaseindex);},watch:{playerindex:{handler:function(){for(var i=0;i<logData.players.length;i++){this.data[i].line.width=i===this.playerindex?5:2;}
this.layout.datarevision=new Date().getTime();},deep:true},light:{handler:function(){var textColor=this.light?'#495057':'#cccccc';this.layout.yaxis.gridcolor=textColor;this.layout.yaxis.color=textColor;this.layout.xaxis.gridcolor=textColor;this.layout.xaxis.color=textColor;this.layout.font.color=textColor;for(var i=0;i<this.layout.shapes.length;i++){this.layout.shapes[i].line.color=textColor;}
this.layout.datarevision=new Date().getTime();}}},computed:{graphid:function(){return 'hpsgraph-'+this.phaseindex;},hGraph:function(){return healingStatsExtension.playerHealingCharts[this.phaseindex];},bGraph:function(){return barrierStatsExtension.playerBarrierCharts[this.phaseindex];},graphname:function(){var name=getHealingGraphName(this.graphhealingdata.healingmode,this.graphhealingdata.graphmode);switch(this.graphhealingdata.hpsmode){case 0:name="Full "+name;break;case-1:name="Phase "+name;break;default:name=this.graphhealingdata.hpsmode+"s "+name;break;}
name=(this.mode===0?"Total ":(this.mode===1?"Target ":"Cleave "))+name;return name;},computeData:function(){this.layout.datarevision=new Date().getTime();this.layout.yaxis.title=healingGraphTypeEnumToString(this.graphhealingdata.graphmode,this.graphhealingdata.healingmode);var points=this.computeHPSRelatedData();var res=this.data;for(var i=0;i<points.length;i++){res[i].y=points[i];}
return res;}},methods:{graphToUse:function(i){switch(this.graphhealingdata.healingmode){case HealingType.All:return this.hGraph[i].healing;case HealingType.HealingPower:return this.hGraph[i].healingPowerHealing;case HealingType.Conversion:return this.hGraph[i].conversionBasedHealing;case HealingType.Hybrid:return this.hGraph[i].hybridHealing;case HealingType.Downed:return this.hGraph[i].downedHealing;case HealingType.Barrier:return this.bGraph[i].barrier;default:throw new Error("unknown enum in healing graph name");}},computeHPS:function(lim,phasebreaks,cacheID){var maxHPS={total:0,cleave:0,target:0};var allHPS={total:[],cleave:[],target:[]};var playerHPS=[];for(var i=0;i<logData.players.length;i++){var data=computePlayerDPS(logData.players[i],this.graphToUse(i),lim,phasebreaks,this.activetargets,cacheID,this.phase.times,this.graphhealingdata.graphmode,this.graphhealingdata.healingmode);playerHPS.push(data.dps);maxHPS.total=Math.max(maxHPS.total,data.maxDPS.total);maxHPS.cleave=Math.max(maxHPS.cleave,data.maxDPS.cleave);maxHPS.target=Math.max(maxHPS.target,data.maxDPS.target);for(var j=0;j<data.dps.total.length;j++){allHPS.total[j]=(allHPS.total[j]||0)+data.dps.total[j];allHPS.cleave[j]=(allHPS.cleave[j]||0)+data.dps.cleave[j];allHPS.target[j]=(allHPS.target[j]||0)+data.dps.target[j];}}
return{allHPS:allHPS,playerHPS:playerHPS,maxHPS:maxHPS,};},computeHPSData:function(){var cacheID=getHPSGraphCacheID(this.graphhealingdata.hpsmode,this.graphhealingdata.healingmode,this.graphhealingdata.graphmode,this.activetargets,this.phaseindex,null);if(this.dpsCache.has(cacheID)){return this.dpsCache.get(cacheID);}
var res;if(this.graphhealingdata.hpsmode>=0){res=this.computeHPS(this.graphhealingdata.hpsmode,null,cacheID);}else{res=this.computeHPS(0,this.computePhaseBreaks,cacheID);}
this.dpsCache.set(cacheID,res);return res;},computeHPSRelatedData:function(){var cacheID=getHPSGraphCacheID(this.graphhealingdata.hpsmode,this.graphhealingdata.healingmode,this.graphhealingdata.graphmode,this.activetargets,this.phaseindex,this.mode);if(this.dataCache.has(cacheID)){return this.dataCache.get(cacheID);}
var res=[];var hpsData=this.computeHPSData();var offset=0;for(var i=0;i<logData.players.length;i++){var pHPS=hpsData.playerHPS[i];res.push((this.mode===0?pHPS.total:(this.mode===1?pHPS.target:pHPS.cleave)));}
res.push((this.mode===0?hpsData.allHPS.total:(this.mode===1?hpsData.allHPS.target:hpsData.allHPS.cleave)));var maxHPS=(this.mode===0?hpsData.maxHPS.total:(this.mode===1?hpsData.maxHPS.target:hpsData.maxHPS.cleave));var hps=[];for(var i=0;i<this.graph.players.length;i++){if(logData.players[i].isFake){continue;}
var health=this.graph.players[i].healthStates;var barrier=this.graph.players[i].barrierStates;addPointsToGraph(res,health,maxHPS);addPointsToGraph(res,barrier,maxHPS);}
updateMechanicsYValues(res,this.phase,this.phaseindex,this.graph,maxHPS);this.dataCache.set(cacheID,res);return res;},}});}
{Vue.component("healing-graph-stats-component",{props:["activetargets","phaseindex",'playerindex','light'],template:`    <div>        <div>            <ul class="nav nav-tabs">                <li>                    <a class="nav-link" :class="{active: mode === 0}" @click="mode = 0">Total</a>                </li>                <li>                    <a class="nav-link" :class="{active: mode === 1}" @click="mode = 1">Target</a>                </li>                <li>                    <a class="nav-link" :class="{active: mode === 2}" @click="mode = 2">Cleave</a>                </li>            </ul>        </div>        <keep-alive>            <hps-graph-component v-for="(phase, id) in phases" :key="id" v-if="id === phaseindex"                :activetargets="activetargets" :mode="mode" :phaseindex="id" :playerindex="playerindex" :light="light">            </hps-graph-component>        </keep-alive>    </div>`,data:function(){return{mode:1,};},computed:{phases:function(){return logData.phases;}}});}
{Vue.component('healingdist-player-component',{props:['playerindex','phaseindex','activetargets'],template:`    <div>        <div v-if="player.minions.length > 0">            <ul class="nav nav-tabs">                <li>                    <a class="nav-link" :class="{active: distmode === -1}" @click="distmode = -1">{{player.name}}</a>                </li>                <li v-for="(minion, mindex) in player.minions">                    <a class="nav-link" :class="{active: distmode === mindex}"                        @click="distmode = mindex">{{minion.name}}</a>                </li>            </ul>        </div>        <div class="d-flex flex-row justify-content-center mt-1 mb-1">            <ul class="nav nav-pills scale85">                <li class="nav-item">                    <a class="nav-link" @click="targetmode = 1" :class="{active: targetmode}">Target</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="targetmode = 0" :class="{active: !targetmode }">All</a>                </li>            </ul>        </div>        <healingdist-table-component :healingdist="targetmode === 0 ? healingdist : healingdisttarget"            :tableid="'healingdist-' + playerindex" :actorindex="playerindex" :minionindex="distmode"             :player="true" :istarget="targetmode === 1"            :phaseindex="phaseindex"></healingdist-table-component>    </div>`,data:function(){return{distmode:-1,targetmode:1,cacheTarget:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},player:function(){return logData.players[this.playerindex];},healingdist:function(){if(this.distmode===-1){return healingStatsExtension.playerHealingDetails[this.playerindex].healingDistributions[this.phaseindex];}
return healingStatsExtension.playerHealingDetails[this.playerindex].minions[this.distmode].healingDistributions[this.phaseindex];},_healingdisttarget:function(){if(this.distmode===-1){return healingStatsExtension.playerHealingDetails[this.playerindex].healingDistributionsTargets[this.phaseindex];}
return healingStatsExtension.playerHealingDetails[this.playerindex].minions[this.distmode].healingDistributionsTargets[this.phaseindex];},healingdisttarget:function(){var cacheID=this.phaseindex+'-'+this.distmode+'-';cacheID+=getTargetCacheID(this.activetargets);if(this.cacheTarget.has(cacheID)){return this.cacheTarget.get(cacheID);}
var dist={contributedHealing:0,contributedDownedHealing:0,totalHealing:0,totalCasting:0,distribution:[],};var rows=new Map();for(var i=0;i<this.activetargets.length;i++){var targetid=this.activetargets[i];var targetDist=this._healingdisttarget[targetid];dist.contributedHealing+=targetDist.contributedHealing;dist.contributedDownedHealing+=targetDist.contributedDownedHealing;dist.totalHealing+=targetDist.totalHealing;dist.totalCasting=targetDist.totalCasting;var distribution=targetDist.distribution;for(var k=0;k<distribution.length;k++){var targetDistribution=distribution[k];if(rows.has(targetDistribution[1])){var row=rows.get(targetDistribution[1]);row[2]+=targetDistribution[2];row[3]=Math.min(targetDistribution[3],row[3]);row[4]=Math.max(targetDistribution[4],row[4]);row[8]+=targetDistribution[8];row[10]+=targetDistribution[10];}else{rows.set(targetDistribution[1],targetDistribution.slice(0));}}}
rows.forEach(function(value,key,map){dist.distribution.push(value);});dist.contributedHealing=Math.max(dist.contributedHealing,0);dist.contributedDownedHealing=Math.max(dist.contributedDownedHealing,0);dist.totalHealing=Math.max(dist.totalHealing,0);dist.totalCasting=Math.max(dist.totalCasting,0);this.cacheTarget.set(cacheID,dist);return dist;}},});}
{Vue.component("healingdist-table-component",{props:["healingdist","tableid","actorindex","minionindex","istarget","phaseindex","player"],template:`    <div>        <div v-if="actor !== null" class="mb-1 mt-1">            <div v-if="isminion">                <p style="display: table-row;">                    {{actor.name}} did {{round3(100*healingdist.contributedHealing/healingdist.totalHealing)}}% of its master's total                    {{istarget ? 'Target' :''}} healing ({{healingdist.contributedHealing}})                </p>            </div>            <div v-else>                <p style="display: table-row;">                    {{actor.name}} did {{round3(100*healingdist.contributedHealing/healingdist.totalHealing)}}% of their total {{istarget ?                        'Target' :''}} healing ({{healingdist.contributedHealing}})                </p>             </div>        </div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="text-left" :class="getHeaderClass('Skill')" @click="sortBy('Skill')">                        Skill                    </th>                    <th class="damage-dist-cell"                          :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0, x => getHealingOutput(x))"                        data-original-title="% Healing">                        % <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="Healing"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 1)" @click="sortBy('Data', 1, x => getHealingOutput(x))"                        data-original-title="Healing">                        <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="Healing"                            class="icon icon-hover">                    </th>                    <th class="damage-cell"                         :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2, x => getDownedHealingOutput(x))"                         data-original-title="Downed Healing" >                        <img src="https://wiki.guildwars2.com/images/3/3d/Downed_ally.png" alt="Downed Healing"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 3)" @click="sortBy('Data', 3, x => getMinHealing(x))"                         data-original-title="Minimum Healing">                        Min <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="Healing"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4, x => round(getHealingOutput(x)/getConnectedHits(x)))"                         data-original-title="Average Healing">                        Avg <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="Healing"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5, x => getMaxHealing(x))"                         data-original-title="Maximum Healing">                        Max <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="Healing"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                        :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6, x => getCast(x))" >                        Cast                    </th>                    <th class="damage-dist-cell"                        :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7, x => getConnectedHits(x))">                        Hits                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 8)" @click="sortBy('Data', 8, x => round2(getConnectedHits(x)/getCast(x)))"                        data-original-title="Hits per Cast">                        <img src="https://wiki.guildwars2.com/images/thumb/5/53/Number_of_targets.png/20px-Number_of_targets.png"                            alt="Hits per Cast" class="icon icon-hover">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 9)" @click="sortBy('Data', 9, x => round2(getHealingOutput(row)/(0.001 * getCastDuration(row))))"                        data-original-title="Healing divided by time spent in animation">                        <img src="https://wiki.guildwars2.com/images/thumb/f/f3/Healing.png/20px-Healing.png" alt="Healing"                            class="icon">                        /                        <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                            class="icon">                    </th>                               <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 12)" @click="sortBy('Data', 12, x => getMinCastingTimeNoInterrupt(x))"                            data-original-title="Minimum Casting Time (No interrupted skills)">                        Min <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 13)" @click="sortBy('Data', 13, x => round3(0.001 * getCastDurationNoInterrupt(x) / getCastNoInterrupt(x) ))"                         data-original-title="Average Casting Time (No interrupted skills)">                        Avg <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 14)" @click="sortBy('Data', 14, x => getMaxCastingTimeNoInterrupt(x))"                            data-original-title="Maximum Casting Time (No interrupted skills)">                        Max <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 10)" @click="sortBy('Data', 10, x => getCastTimeWasted(x))"                        data-original-title="Time wasted interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/b/b3/Out_Of_Health_Potions.png" alt="Wasted"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 11)" @click="sortBy('Data', 11, x => getCastTimeSaved(x))"                        data-original-title="Time saved(in seconds) interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/e/eb/Ready.png" alt="Saved"                            class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(healingdist.distribution)" :class="{hybridH: getSkill(row).healingMode === 2, conversionH: getSkill(row).healingMode === 1}">                    <td class="text-left" :class="getBodyClass('Skill')":data-original-title="getSkillID(row)">                        <img :src="getSkill(row).icon" class="icon">                        {{getSkill(row).name}}                    </td>                    <td :class="getBodyClass('Data', 0)">                        {{ round3(100*getHealingOutput(row)/healingdist.contributedHealing) }}%                    </td>                    <td :class="getBodyClass('Data', 1)" :data-original-title="round2(getHealingOutput(row)/phase.durationS) +' hps'">                        {{ getHealingOutput(row) }}                    </td>                    <td :class="getBodyClass('Data', 2)" :data-original-title="round2(getDownedHealingOutput(row)/phase.durationS) +' hps'">                        {{ getDownedHealingOutput(row) }}                    </td>                    <td :class="getBodyClass('Data', 3)">                        {{ getMinHealing(row) }}                    </td>                    <td :class="getBodyClass('Data', 4)">                        {{ round(getHealingOutput(row)/getConnectedHits(row)) }}                    </td>                    <td :class="getBodyClass('Data', 5)">                        {{ getMaxHealing(row) }}                    </td>                    <td :class="getCastBodyClass('Data', 6, row)" v-if="actor !== null">                        {{ (!getSkill(row).condi && getCast(row)) ? getCast(row) : ''}}                    </td>                    <td :class="getBodyClass('Data', 7)">                        {{ getConnectedHits(row) }}                    </td>                    <td :class="getHitsPerCastBodyClass('Data', 8, row)" v-if="actor !== null">                        {{(!getSkill(row).condi && getConnectedHits(row) && getCast(row)) ? round2(getConnectedHits(row)/getCast(row)) : ''}}                    </td>                    <td :class="getBodyClass('Data', 9)" v-if="actor !== null">                        {{(!getSkill(row).condi && getConnectedHits(row) && getCastDuration(row)) ? round2(getHealingOutput(row)/(0.001 * getCastDuration(row))) : ''}}                    </td>                    <td :class="getBodyClass('Data', 12)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getMinCastingTimeNoInterrupt(row)) + 's': ' '}}                    </td>                    <td :class="getBodyClass('Data', 13)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getCastDurationNoInterrupt(row) / getCastNoInterrupt(row) ) + 's'  : ' '}}                    </td>                    <td :class="getBodyClass('Data', 14)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getMaxCastingTimeNoInterrupt(row)) + 's'  : ' '}}                    </td>                    <td :class="getBodyClass('Data', 10)" v-if="actor !== null"                        :data-original-title="getCastTimeWasted(row) ? round2(100.0 * getCastTimeWasted(row)/phase.durationS) + '% of the phase' : false">                        {{ getCastTimeWasted(row) ? getCastTimeWasted(row) + 's' : ''}}                    </td>                    <td :class="getBodyClass('Data', 11)" v-if="actor !== null"                        :data-original-title="getCastTimeSaved(row) ? round2(100.0 * getCastTimeSaved(row)/phase.durationS) + '% of the phase' : false">                        {{ getCastTimeSaved(row) ? getCastTimeSaved(row) + 's' : ''}}                    </td>                </tr>            </tbody>            <tfoot class="text-dark">                <tr>                    <td class="text-left">Total</td>                    <td></td>                    <td :data-original-title="Math.round(healingdist.contributedHealing/phase.durationS) +' hps'">                        {{healingdist.contributedHealing}}                    </td>                    <td :data-original-title="Math.round(healingdist.contributedDownedHealing/phase.durationS) +' hps'">                        {{healingdist.contributedDownedHealing}}                    </td>                    <td></td>                    <td></td>                    <td></td>                    <td v-if="actor !== null"></td>                    <td></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null">                        {{round2(healingdist.contributedHealing/(0.001 * healingdist.totalCasting))}}                    </td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                </tr>            </tfoot>        </table>              <div class="card">            <div class="card-body container">                <p><u>Background</u></p>                <span style="padding: 2px; background-color:rgba(0, 0, 255, 0.25); border-style:solid; border-width: 1px; border-color:#000000; color:#FFFFFF">                    Conversion based healing                </span>                <span style="padding: 2px; background-color:rgba(0, 255, 0, 0.25); border-style:solid; border-width: 1px; border-color:#000000; color:#000000">                    Hybrid (could be healing power or conversion) healing, included in healing power based stats                </span>            </div>        </div>    </div>`,data:function(){return{sortdata:{order:"desc",index:1,key:'Data',sortFunc:row=>this.getHealingOutput(row),},};},mixins:[numberComponent,sortedTableComponent,sortedDistributionComponent],methods:{getSkillID:function(data){return data[1];},getSkillIsBuff:function(data){return data[0]},getSkill:function(data){return findSkill(this.getSkillIsBuff(data),this.getSkillID(data));},getHealingOutput:function(data){return data[2];},getDownedHealingOutput:function(data){return data[10];},getMinHealing:function(data){return data[3];},getMaxHealing:function(data){return data[4];},getCast:function(data){return data[5];},getCastTimeWasted:function(data){return data[6];},getCastTimeSaved:function(data){return data[7];},getConnectedHits:function(data){return data[8];},getCastDuration:function(data){return data[9];},getCastDurationNoInterrupt:function(data){return data[13];},getCastNoInterrupt:function(data){return data[14];},getMinCastingTimeNoInterrupt:function(data){return data[11];},getMaxCastingTimeNoInterrupt:function(data){return data[12];},showInequality:function(data){return this.getCastDuration(data)===0&&this.getSkill(data).notAccurate;},},computed:{phase:function(){return logData.phases[this.phaseindex];},isminion:function(){return this.minionindex>-1;},actor:function(){if(this.actorindex<0){return null;}
var master=!this.player?logData.targets[this.actorindex]:logData.players[this.actorindex];if(this.isminion){return master.minions[this.minionindex];}
return master;},}});}
{Vue.component("player-healing-stats-component",{props:["phaseindex",'activetargets','activeplayer','light'],template:`    <div>        <h3 v-for="player in players" :key="player.id" v-show="player.id === activeplayer"            class="text-center mt-2"><img :alt="player.profession" class="icon" :src="player.icon">{{player.name}}</h3>        <ul class="nav nav-tabs" v-show="activeplayer > -1">            <li>                <a class="nav-link" :class="{active: tabmode === 0}" @click="tabmode = 0">                    Outgoing Healing                </a>            </li>            <li v-if="hasBarrier">                <a class="nav-link" :class="{active: tabmode === 6}" @click="tabmode = 6">                    Outgoing Barrier                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 1}" @click="tabmode = 1">                    Incoming Healing                </a>            </li>            <li v-if="hasBarrier">                <a class="nav-link" :class="{active: tabmode === 7}" @click="tabmode = 7">                    Incoming Barrier                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 2}" @click="tabmode = 2">Healing Graph</a>            </li>                 <li>                <a class="nav-link" :class="{active: tabmode === 3}" @click="tabmode = 3">                    Simple                    Rotation                </a>            </li>                    <li>                <a class="nav-link" :class="{active: tabmode === 4}" @click="tabmode = 4">                    Advanced                    Rotation                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 5}" @click="tabmode = 5">                    Consumables                </a>            </li>        </ul>        <keep-alive>            <player-healing-tab-component v-for="player in players" :key="'healing' + player.id"                v-if="player.id === activeplayer" :playerindex="player.id" :tabmode="tabmode"                :phaseindex="phaseindex" :activetargets="activetargets" :light="light"></player-healing-tab-component>        </keep-alive>        <div v-if="activeplayer === -1">            <h3 class="text-center">No player selected</h3>        </div>    </div>`,data:function(){return{tabmode:0};},computed:{players:function(){return logData.players;},hasBarrier:function(){return!!barrierStatsExtension;},}});}
{Vue.component('player-healing-tab-component',{props:['playerindex','tabmode','phaseindex','activetargets','light'],template:`    <div>        <keep-alive>            <healingdist-player-component v-if="tabmode === 0" :key="'healingdist' + playerindex" :playerindex="playerindex"                :phaseindex="phaseindex" :activetargets="activetargets"></healingdist-player-component>            <healingtaken-component v-if="tabmode ===1" :key="'healingtaken' + playerindex" :actorindex="playerindex"                :tableid="'healingtaken-player-'+playerindex" :phaseindex="phaseindex"></healingtaken-component>            <player-healing-graph-tab-component v-for="(ph, id) in phases" v-if="tabmode === 2 && id === phaseindex" :key="id + 'healing-graph' + playerindex"                :playerindex="playerindex" :phaseindex="id" :activetargets="activetargets" :light="light">            </player-healing-graph-tab-component>            <simplerotation-component v-if="tabmode === 3" :key="'healingrot' + playerindex" :actorindex="playerindex"                :phaseindex="phaseindex" :target="false"></simplerotation-component>                        <advancedrotation-component v-for="(ph, id) in phases" v-if="tabmode === 4 && id === phaseindex" :key="id + 'healingadvrot' + playerindex" :actorindex="playerindex"            :phaseindex="id" :target="false" :light="light"></advancedrotation-component>            <food-component v-if="tabmode === 5" :key="'healingcons' + playerindex" :playerindex="playerindex"                :phaseindex="phaseindex"></food-component>            <barrierdist-player-component v-if="tabmode === 6" :key="'barrierdist' + playerindex" :playerindex="playerindex"                :phaseindex="phaseindex" :activetargets="activetargets"></barrierdist-player-component>            <barriertaken-component v-if="tabmode ===7" :key="'barriertaken' + playerindex" :actorindex="playerindex"                :tableid="'barriertaken-player-'+playerindex" :phaseindex="phaseindex"></barriertaken-component>        </keep-alive>    </div>`,computed:{phases:function(){return logData.phases;},}});}
{Vue.component('healingtaken-component',{props:['actorindex','tableid','phaseindex'],template:`    <healingdist-table-component :healingdist="healingtaken" :tableid="tableid" :actorindex="-1" :minionindex="-1" :istarget="false" :player="true"        :phaseindex="phaseindex">    </healingdist-table-component>`,computed:{healingtaken:function(){return healingStatsExtension.playerHealingDetails[this.actorindex].incomingHealingDistributions[this.phaseindex];}},});}
{Vue.component("player-healing-graph-tab-component",{props:["playerindex","phaseindex","activetargets","light"],template:`    <div>        <hps-graph-mode-selector-component :data="graphhealingdata"            :phaseduration="this.phase.end - this.phase.start" :phasehassubphases="!!this.phase.subPhases" :column="false">        </hps-graph-mode-selector-component>        <h3 class="text-center mt-1 mb-1">{{graphname}}</h3>        <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>        <rotation-legend-component></rotation-legend-component>    </div>`,mixins:[graphComponent,healingGraphComponent],data:function(){return{playerOffset:0,graphOffset:0};},watch:{light:{handler:function(){var textColor=this.light?'#495057':'#cccccc';this.layout.yaxis.gridcolor=textColor;this.layout.yaxis.color=textColor;this.layout.yaxis2.gridcolor=textColor;this.layout.yaxis2.color=textColor;this.layout.yaxis3.gridcolor=textColor;this.layout.yaxis3.color=textColor;this.layout.xaxis.gridcolor=textColor;this.layout.xaxis.color=textColor;this.layout.font.color=textColor;for(var i=0;i<this.layout.shapes.length;i++){this.layout.shapes[i].line.color=textColor;}
this.layout.datarevision=new Date().getTime();}}},created:function(){var images=[];this.data=[];this.playerOffset+=computeRotationData(this.player.details.rotation[this.phaseindex],images,this.data,this.phase,this.player,1);var oldOffset=this.playerOffset;this.playerOffset+=computeBuffData(this.player.details.boonGraph[this.phaseindex],this.data);var hasBuffs=oldOffset!==this.playerOffset;this.graphOffset=this.playerOffset;this.playerOffset+=computePlayersHealingGraphData(this.graph,this.data,'y3');this.data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:this.player.colTotal,},yaxis:'y3',hoverinfo:'name+y+x',name:'Total'});this.data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:this.player.colTarget,},yaxis:'y3',hoverinfo:'name+y+x',name:'Target'});this.data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:this.player.colCleave,},yaxis:'y3',hoverinfo:'name+y+x',name:'Cleave'});this.layout=getActorGraphLayout(images,this.light?'#495057':'#cccccc',hasBuffs);computePhaseMarkups(this.layout.shapes,this.layout.annotations,this.phase,this.light?'#495057':'#cccccc');this.updateVisibily(this.layout.images,this.phase.start,this.phase.end);},activated:function(){var div=document.getElementById(this.graphid);var layout=this.layout;var images=layout.images;var _this=this;div.on('plotly_relayout',function(evt){var x0=layout.xaxis.range[0];var x1=layout.xaxis.range[1];if(_this.updateVisibily(images,x0,x1)){layout.datarevision=new Date().getTime();}});},computed:{hGraph:function(){return healingStatsExtension.playerHealingCharts[this.phaseindex][this.playerindex];},bGraph:function(){return barrierStatsExtension.playerBarrierCharts[this.phaseindex][this.playerindex];},graphid:function(){return "playerhealinggraph-"+this.playerindex+'-'+this.phaseindex;},player:function(){return logData.players[this.playerindex];},graphname:function(){var name=getHealingGraphName(this.graphhealingdata.healingmode,this.graphhealingdata.graphmode);switch(this.graphhealingdata.hpsmode){case 0:name="Full "+name;break;case-1:name="Phase "+name;break;default:name=this.graphhealingdata.hpsmode+"s "+name;break;}
return name;},computeData:function(){this.layout.datarevision=new Date().getTime();this.layout.yaxis3.title=healingGraphTypeEnumToString(this.graphhealingdata.graphmode,this.graphhealingdata.healingmode);var res=this.data;var data=this.computeHPSRelatedData();this.data[this.playerOffset].y=data[0];this.data[this.playerOffset+1].y=data[1];this.data[this.playerOffset+2].y=data[2];var offset=3;for(var i=this.graphOffset;i<this.playerOffset;i++){this.data[i].y=data[offset++];}
return res;}},methods:{graphToUse:function(){switch(this.graphhealingdata.healingmode){case HealingType.All:return this.hGraph.healing;case HealingType.HealingPower:return this.hGraph.healingPowerHealing;case HealingType.Conversion:return this.hGraph.conversionBasedHealing;case HealingType.Hybrid:return this.hGraph.hybridHealing;case HealingType.Downed:return this.hGraph.downedHealing;case HealingType.Barrier:return this.bGraph.barrier;default:throw new Error("unknown enum in healing graph name");}},computeDPSData:function(){var cacheID=getHPSGraphCacheID(this.graphhealingdata.hpsmode,this.graphhealingdata.healingmode,this.graphhealingdata.graphmode,this.activetargets,this.phaseindex,null);if(this.dpsCache.has(cacheID)){return this.dpsCache.get(cacheID);}
var data;if(this.graphhealingdata.hpsmode>=0){data=computePlayerDPS(this.player,this.graphToUse(),this.graphhealingdata.hpsmode,null,this.activetargets,cacheID,this.phase.times,this.graphhealingdata.graphmode,this.graphhealingdata.healingmode);}else{data=computePlayerDPS(this.player,this.graphToUse(),0,this.computePhaseBreaks,this.activetargets,cacheID,this.phase.times,this.graphhealingdata.graphmode,this.graphhealingdata.healingmode);}
var res={maxHPS:data.maxDPS.total,playerHPS:data.dps};this.dpsCache.set(cacheID,res);return res;},computeHPSRelatedData:function(){var cacheID=getHPSGraphCacheID(this.graphhealingdata.hpsmode,this.graphhealingdata.healingmode,this.graphhealingdata.graphmode,this.activetargets,this.phaseindex,null);if(this.dataCache.has(cacheID)){return this.dataCache.get(cacheID);}
var hpsData=this.computeDPSData();var res=[];res.push(hpsData.playerHPS.total);res.push(hpsData.playerHPS.target);res.push(hpsData.playerHPS.cleave);for(var i=0;i<this.graph.players.length;i++){if(logData.players[i].isFake){continue;}
addPointsToGraph(res,this.graph.players[i].healthStates,hpsData.maxHPS);addPointsToGraph(res,this.graph.players[i].barrierStates,hpsData.maxHPS);}
this.dataCache.set(cacheID,res);return res;},}});}
{Vue.component('barrierdist-player-component',{props:['playerindex','phaseindex','activetargets'],template:`    <div>        <div v-if="player.minions.length > 0">            <ul class="nav nav-tabs">                <li>                    <a class="nav-link" :class="{active: distmode === -1}" @click="distmode = -1">{{player.name}}</a>                </li>                <li v-for="(minion, mindex) in player.minions">                    <a class="nav-link" :class="{active: distmode === mindex}"                        @click="distmode = mindex">{{minion.name}}</a>                </li>            </ul>        </div>        <div class="d-flex flex-row justify-content-center mt-1 mb-1">            <ul class="nav nav-pills scale85">                <li class="nav-item">                    <a class="nav-link" @click="targetmode = 1" :class="{active: targetmode}">Target</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="targetmode = 0" :class="{active: !targetmode }">All</a>                </li>            </ul>        </div>        <barrierdist-table-component :barrierdist="targetmode === 0 ? barrierdist : barrierdisttarget"            :tableid="'barrierdist-' + playerindex" :actorindex="playerindex" :minionindex="distmode"             :player="true" :istarget="targetmode === 1"            :phaseindex="phaseindex"></barrierdist-table-component>    </div>`,data:function(){return{distmode:-1,targetmode:1,cacheTarget:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},player:function(){return logData.players[this.playerindex];},barrierdist:function(){if(this.distmode===-1){return barrierStatsExtension.playerBarrierDetails[this.playerindex].barrierDistributions[this.phaseindex];}
return barrierStatsExtension.playerBarrierDetails[this.playerindex].minions[this.distmode].barrierDistributions[this.phaseindex];},_barrierdisttarget:function(){if(this.distmode===-1){return barrierStatsExtension.playerBarrierDetails[this.playerindex].barrierDistributionsTargets[this.phaseindex];}
return barrierStatsExtension.playerBarrierDetails[this.playerindex].minions[this.distmode].barrierDistributionsTargets[this.phaseindex];},barrierdisttarget:function(){var cacheID=this.phaseindex+'-'+this.distmode+'-';cacheID+=getTargetCacheID(this.activetargets);if(this.cacheTarget.has(cacheID)){return this.cacheTarget.get(cacheID);}
var dist={contributedBarrier:0,totalBarrier:0,totalCasting:0,distribution:[],};var rows=new Map();for(var i=0;i<this.activetargets.length;i++){var targetid=this.activetargets[i];var targetDist=this._barrierdisttarget[targetid];dist.contributedBarrier+=targetDist.contributedBarrier;dist.totalBarrier+=targetDist.totalBarrier;dist.totalCasting=targetDist.totalCasting;var distribution=targetDist.distribution;for(var k=0;k<distribution.length;k++){var targetDistribution=distribution[k];if(rows.has(targetDistribution[1])){var row=rows.get(targetDistribution[1]);row[2]+=targetDistribution[2];row[3]=Math.min(targetDistribution[3],row[3]);row[4]=Math.max(targetDistribution[4],row[4]);row[8]+=targetDistribution[8];}else{rows.set(targetDistribution[1],targetDistribution.slice(0));}}}
rows.forEach(function(value,key,map){dist.distribution.push(value);});dist.contributedBarrier=Math.max(dist.contributedBarrier,0);dist.totalBarrier=Math.max(dist.totalBarrier,0);dist.totalCasting=Math.max(dist.totalCasting,0);this.cacheTarget.set(cacheID,dist);return dist;}},});}
{Vue.component("barrierdist-table-component",{props:["barrierdist","tableid","actorindex","minionindex","istarget","phaseindex","player"],template:`    <div>        <div v-if="actor !== null" class="mb-1 mt-1">            <div v-if="isminion">                <p style="display: table-row;">                    {{actor.name}} did {{round3(100*barrierdist.contributedBarrier/barrierdist.totalBarrier)}}% of its master's total                    {{istarget ? 'Target' :''}} barrier ({{barrierdist.contributedBarrier}})                </p>            </div>            <div v-else>                <p style="display: table-row;">                    {{actor.name}} did {{round3(100*barrierdist.contributedBarrier/barrierdist.totalBarrier)}}% of their total {{istarget ?                        'Target' :''}} barrier ({{barrierdist.contributedBarrier}})                </p>             </div>        </div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="text-left" :class="getHeaderClass('Skill')" @click="sortBy('Skill')">                        Skill                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0, x => getBarrierOutput(x))"                        data-original-title="% Barrier">                        % <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 1)" @click="sortBy('Data', 1, x => getBarrierOutput(x))"                        data-original-title="Barrier">                        <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2, x => getMinBarrier(x))"                         data-original-title="Minimum Barrier">                        Min <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 3)" @click="sortBy('Data', 3, x => round(getBarrierOutput(x)/getConnectedHits(x)))"                         data-original-title="Average Barrier">                        Avg <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                        class="icon">                    </th>                    <th class="damage-dist-cell"                        :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4, x => getMaxBarrier(x))"                         data-original-title="Maximum Barrier">                        Max <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                        :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5, x => getCast(x))">                        Cast                    </th>                    <th class="damage-dist-cell"                        :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6, x => getConnectedHits(x))" >                        Hits                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7, x => round2(getConnectedHits(x)/getCast(x)))"                        data-original-title="Hits per Cast">                        <img src="https://wiki.guildwars2.com/images/thumb/5/53/Number_of_targets.png/20px-Number_of_targets.png"                            alt="Hits per Cast" class="icon icon-hover">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 8)" @click="sortBy('Data', 8, x => round2(getBarrierOutput(row)/(0.001 * getCastDuration(row))))"                        data-original-title="Barrier divided by time spent in animation">                        <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png" alt="Barrier"                            class="icon">                        /                        <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                            class="icon">                    </th>                      <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 11)" @click="sortBy('Data', 11, x => getMinCastingTimeNoInterrupt(x))"                            data-original-title="Minimum Casting Time (No interrupted skills)">                        Min <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 12)" @click="sortBy('Data', 12, x => round3(0.001 * getCastDurationNoInterrupt(x) / getCastNoInterrupt(x) ))"                         data-original-title="Average Casting Time (No interrupted skills)">                        Avg <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 13)" @click="sortBy('Data', 13, x => getMaxCastingTimeNoInterrupt(x))"                            data-original-title="Maximum Casting Time (No interrupted skills)">                        Max <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 9)" @click="sortBy('Data', 9, x => getCastTimeWasted(x))"                        data-original-title="Time wasted interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/b/b3/Out_Of_Health_Potions.png" alt="Wasted"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 10)" @click="sortBy('Data', 10, x => getCastTimeSaved(x))"                        data-original-title="Time saved(in seconds) interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/e/eb/Ready.png" alt="Saved"                            class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(barrierdist.distribution)">                    <td class="text-left" :class="getBodyClass('Skill')" :data-original-title="getSkillID(row)">                        <img :src="getSkill(row).icon" class="icon">                        {{getSkill(row).name}}                    </td>                    <td :class="getBodyClass('Data', 0)">                        {{ round3(100*getBarrierOutput(row)/barrierdist.contributedBarrier) }}%                    </td>                    <td :class="getBodyClass('Data', 1)" :data-original-title="round2(getBarrierOutput(row)/phase.durationS) +' hps'">                        {{ getBarrierOutput(row) }}                    </td>                    <td :class="getBodyClass('Data', 2)">                        {{ getMinBarrier(row) }}                    </td>                    <td :class="getBodyClass('Data', 3)">                        {{ round(getBarrierOutput(row)/getConnectedHits(row)) }}                    </td>                    <td :class="getBodyClass('Data', 4)">                        {{ getMaxBarrier(row) }}                    </td>                    <td :class="getCastBodyClass('Data', 5, row)" v-if="actor !== null">                        {{ (!getSkill(row).condi && getCast(row)) ? getCast(row) : ''}}                    </td>                    <td :class="getBodyClass('Data', 6)">                        {{ getConnectedHits(row) }}                    </td>                    <td :class="getHitsPerCastBodyClass('Data', 7, row)" v-if="actor !== null">                        {{(!getSkill(row).condi && getConnectedHits(row) && getCast(row)) ? round2(getConnectedHits(row)/getCast(row)) : ''}}                    </td>                    <td :class="getBodyClass('Data', 8)" v-if="actor !== null">                        {{(!getSkill(row).condi && getConnectedHits(row) && getCastDuration(row)) ? round2(getBarrierOutput(row)/(0.001 * getCastDuration(row))) : ''}}                    </td>                    <td :class="getBodyClass('Data', 11)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getMinCastingTimeNoInterrupt(row)) + 's': ' '}}                    </td>                    <td :class="getBodyClass('Data', 12)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getCastDurationNoInterrupt(row) / getCastNoInterrupt(row) ) + 's'  : ' '}}                    </td>                    <td :class="getBodyClass('Data', 13)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getMaxCastingTimeNoInterrupt(row)) + 's'  : ' '}}                    </td>                    <td :class="getBodyClass('Data', 9)" v-if="actor !== null"                        :data-original-title="getCastTimeWasted(row) ? round2(100.0 * getCastTimeWasted(row)/phase.durationS) + '% of the phase' : false">                        {{ getCastTimeWasted(row) ? getCastTimeWasted(row) + 's' : ''}}                    </td>                    <td :class="getBodyClass('Data', 10)" v-if="actor !== null"                        :data-original-title="getCastTimeSaved(row) ? round2(100.0 * getCastTimeSaved(row)/phase.durationS) + '% of the phase' : false">                        {{ getCastTimeSaved(row) ? getCastTimeSaved(row) + 's' : ''}}                    </td>                </tr>            </tbody>            <tfoot class="text-dark">                <tr>                    <td class="text-left">Total</td>                    <td></td>                    <td :data-original-title="Math.round(barrierdist.contributedBarrier/phase.durationS) +' hps'">                        {{barrierdist.contributedBarrier}}                    </td>                    <td></td>                    <td></td>                    <td></td>                    <td v-if="actor !== null"></td>                    <td></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null">                        {{round2(barrierdist.contributedBarrier/(0.001 * barrierdist.totalCasting))}}                    </td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                </tr>            </tfoot>        </table>    </div>`,data:function(){return{sortdata:{order:"desc",index:1,key:'Data',sortFunc:row=>this.getBarrierOutput(row),}};},mixins:[numberComponent,sortedTableComponent,sortedDistributionComponent],methods:{getSkillID:function(data){return data[1];},getSkillIsBuff:function(data){return data[0]},getSkill:function(data){return findSkill(this.getSkillIsBuff(data),this.getSkillID(data));},getBarrierOutput:function(data){return data[2];},getMinBarrier:function(data){return data[3];},getMaxBarrier:function(data){return data[4];},getCast:function(data){return data[5];},getCastNoInterrupt:function(data){return data[13];},getCastTimeWasted:function(data){return data[6];},getCastTimeSaved:function(data){return data[7];},getConnectedHits:function(data){return data[8];},getCastDuration:function(data){return data[9];},getCastDurationNoInterrupt:function(data){return data[12];},getMinCastingTimeNoInterrupt:function(data){return data[10];},getMaxCastingTimeNoInterrupt:function(data){return data[11];},showInequality:function(data){return this.getCastDuration(data)===0&&this.getSkill(data).notAccurate;},},computed:{phase:function(){return logData.phases[this.phaseindex];},isminion:function(){return this.minionindex>-1;},actor:function(){if(this.actorindex<0){return null;}
var master=!this.player?logData.targets[this.actorindex]:logData.players[this.actorindex];if(this.isminion){return master.minions[this.minionindex];}
return master;},}});}
{Vue.component('barriertaken-component',{props:['actorindex','tableid','phaseindex'],template:`    <barrierdist-table-component :barrierdist="barriertaken" :tableid="tableid" :actorindex="-1" :minionindex="-1" :istarget="false" :player="true"        :phaseindex="phaseindex">    </barrierdist-table-component>`,computed:{barriertaken:function(){return barrierStatsExtension.playerBarrierDetails[this.actorindex].incomingBarrierDistributions[this.phaseindex];}},});}};var healingGraphComponent={data:function(){return{graphhealingdata:{hpsmode:0,graphmode:logData.wvw?GraphType.Damage:GraphType.DPS,healingmode:HealingType.All,},};},};const HealingType={All:0,HealingPower:1,Conversion:2,Hybrid:3,Downed:4,Barrier:5};"use strict";function healingGraphTypeEnumToString(mode,healingMode){var name="";switch(mode){case GraphType.DPS:name=healingMode===HealingType.Barrier?"BPS":"HPS";break;case GraphType.CenteredDPS:name=healingMode===HealingType.Barrier?"Centered BPS":"Centered HPS";break;case GraphType.Damage:name=healingMode===HealingType.Barrier?"Barrier":"Healing";break;default:break;}
return name;}
function healingTypeEnumToString(mode){var name="";switch(mode){case HealingType.All:name="All";break;case HealingType.HealingPower:name="Healing Power";break;case HealingType.Conversion:name="Conversion";break;case HealingType.Hybrid:name="Healing Power or Conversion";break;case HealingType.Downed:name="Against Downed";break;case HealingType.Barrier:name="Healing Power";break;default:break;}
return name;}
function getHPSGraphCacheID(hpsmode,healingmode,graphmode,activetargets,phaseIndex,extra){return "hps"+hpsmode+'-'+healingmode+'-'+graphmode+'-'+getTargetCacheID(activetargets)+'-'+phaseIndex+(extra!==null?'-'+extra:'');}
function getHealingGraphName(healingMode,graphMode){return healingTypeEnumToString(healingMode)+" "+healingGraphTypeEnumToString(graphMode,healingMode)+" Graph";}
function computePlayersHealingGraphData(graph,data,yaxis){var offset=0;for(var i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
offset+=computePlayerHealthData(graph.players[i].healthStates,player,data,yaxis)
offset+=computePlayerBarrierData(graph.players[i].barrierStates,player,data,yaxis)}
return offset;}