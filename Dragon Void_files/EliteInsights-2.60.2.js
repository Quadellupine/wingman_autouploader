"use strict";let apiRenderServiceOkay=true;const quickColor={r:220,g:20,b:220};const slowColor={r:220,g:125,b:30};const normalColor={r:125,g:125,b:125};const DamageType={All:0,Power:1,Condition:2,Breakbar:3};const GraphType={DPS:0,Damage:1,CenteredDPS:2};const simpleLogData={phases:[],players:[],targets:[]};if(!String.prototype.includes){Object.defineProperty(String.prototype,"includes",{value:function(search,start){if(typeof start!=='number'){start=0;}
if(start+search.length>this.length){return false;}else{return this.indexOf(search,start)!==-1;}}});}
const themes={"yeti":"https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.1.1/yeti/bootstrap.min.css","slate":"https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.1.1/slate/bootstrap.min.css"};const urls={Unknown:"https://wiki.guildwars2.com/images/thumb/d/de/Sword_slot.png/40px-Sword_slot.png",Sword:"https://wiki.guildwars2.com/images/0/07/Crimson_Antique_Blade.png",Axe:"https://wiki.guildwars2.com/images/d/d4/Crimson_Antique_Reaver.png",Dagger:"https://wiki.guildwars2.com/images/6/65/Crimson_Antique_Razor.png",Mace:"https://wiki.guildwars2.com/images/6/6d/Crimson_Antique_Flanged_Mace.png",Pistol:"https://wiki.guildwars2.com/images/4/46/Crimson_Antique_Revolver.png",Scepter:"https://wiki.guildwars2.com/images/e/e2/Crimson_Antique_Wand.png",Focus:"https://wiki.guildwars2.com/images/8/87/Crimson_Antique_Artifact.png",Shield:"https://wiki.guildwars2.com/images/b/b0/Crimson_Antique_Bastion.png",Torch:"https://wiki.guildwars2.com/images/7/76/Crimson_Antique_Brazier.png",Warhorn:"https://wiki.guildwars2.com/images/1/1c/Crimson_Antique_Herald.png",Greatsword:"https://wiki.guildwars2.com/images/5/50/Crimson_Antique_Claymore.png",Hammer:"https://wiki.guildwars2.com/images/3/38/Crimson_Antique_Warhammer.png",Longbow:"https://wiki.guildwars2.com/images/f/f0/Crimson_Antique_Greatbow.png",Shortbow:"https://wiki.guildwars2.com/images/1/17/Crimson_Antique_Short_Bow.png",Rifle:"https://wiki.guildwars2.com/images/1/19/Crimson_Antique_Musket.png",Staff:"https://wiki.guildwars2.com/images/5/5f/Crimson_Antique_Spire.png",Trident:"https://wiki.guildwars2.com/images/9/98/Crimson_Antique_Trident.png",Speargun:"https://wiki.guildwars2.com/images/3/3b/Crimson_Antique_Harpoon_Gun.png",Spear:"https://wiki.guildwars2.com/images/c/cb/Crimson_Antique_Impaler.png"};const specs=["Warrior","Berserker","Spellbreaker","Bladesworn","Revenant","Herald","Renegade","Vindicator","Guardian","Dragonhunter","Firebrand","Willbender","Ranger","Druid","Soulbeast","Untamed","Engineer","Scrapper","Holosmith","Mechanist","Thief","Daredevil","Deadeye","Specter","Mesmer","Chronomancer","Mirage","Virtuoso","Necromancer","Reaper","Scourge","Harbinger","Elementalist","Tempest","Weaver","Catalyst"];const specToBase={Warrior:'Warrior',Berserker:'Warrior',Spellbreaker:'Warrior',Bladesworn:'Warrior',Revenant:"Revenant",Herald:"Revenant",Renegade:"Revenant",Vindicator:"Revenant",Guardian:"Guardian",Dragonhunter:"Guardian",Firebrand:"Guardian",Willbender:"Guardian",Ranger:"Ranger",Druid:"Ranger",Soulbeast:"Ranger",Untamed:"Ranger",Engineer:"Engineer",Scrapper:"Engineer",Holosmith:"Engineer",Mechanist:"Engineer",Thief:"Thief",Daredevil:"Thief",Deadeye:"Thief",Specter:"Thief",Mesmer:"Mesmer",Chronomancer:"Mesmer",Mirage:"Mesmer",Virtuoso:"Mesmer",Necromancer:"Necromancer",Reaper:"Necromancer",Scourge:"Necromancer",Harbinger:"Necromancer",Elementalist:"Elementalist",Tempest:"Elementalist",Weaver:"Elementalist",Catalyst:"Elementalist"};const SkillDecorationCategory={"Show On Select":1<<0,"Important Buffs":1<<1,"Projectile Management":1<<2,"Heal":1<<3,"Cleanse":1<<4,"Strip":1<<5,"Portal":1<<6,};let AllSkillDecorations=0;for(let key in SkillDecorationCategory){AllSkillDecorations|=SkillDecorationCategory[key];}
let DefaultSkillDecorations=AllSkillDecorations;const RotationStatus={UNKNOWN:0,REDUCED:1,CANCEL:2,FULL:3,INSTANT:4};"use strict";var numberComponent={methods:{integerWithSpaces:function(x){return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g," ");},round:function(value){if(isNaN(value)||!isFinite(value)){return 0;}
return Math.round(value);},round1:function(value){if(isNaN(value)||!isFinite(value)){return 0;}
var mul=10;return Math.round(mul*value)/mul;},round2:function(value){if(isNaN(value)||!isFinite(value)){return 0;}
var mul=100;return Math.round(mul*value)/mul;},round3:function(value){if(isNaN(value)||!isFinite(value)){return 0;}
var mul=1000;return Math.round(mul*value)/mul;}}};var damageGraphComponent={data:function(){return{graphdata:{dpsmode:0,graphmode:logData.wvw?GraphType.Damage:GraphType.DPS,damagemode:DamageType.All,}};},};var graphComponent={data:function(){return{layout:{},dpsCache:new Map(),dataCache:new Map(),};},computed:{computePhaseBreaks:function(){var res=[];if(this.phase.subPhases){for(var i=0;i<this.phase.subPhases.length;i++){var subPhase=logData.phases[this.phase.subPhases[i]];res[Math.floor(subPhase.start-this.phase.start)]=true;res[Math.floor(subPhase.end-this.phase.start)]=true;}}
return res;},phase:function(){return logData.phases[this.phaseindex];},graph:function(){return graphData.phases[this.phaseindex];},},methods:{updateVisibily:function(images,x0,x1){var redraw=false;for(var i=0;i<images.length;i++){var image=images[i];var old=image.visible;image.visible=typeof x0==="undefined"||((image.x<=x1+10&&image.x>=x0-10)&&(x1-x0)<75);redraw=redraw||image.visible!==old;}
return redraw;},updateVisibilyInQuad:function(images,x0,x1,y0,y1){var redraw=false;for(var i=0;i<images.length;i++){var image=images[i];var old=image.visible;image.visible=typeof x0==="undefined"||(((image.x<=x1+10&&image.x>=x0-10)&&(x1-x0)<75)&&((image.y<=y1+10&&image.y>=y0-10)&&(y1-y0)<75));redraw=redraw||image.visible!==old;}
return redraw;},}};var timeRefreshComponent={props:["time"],data:function(){return{refreshTime:0};},computed:{timeToUse:function(){if(animator){var animated=animator.animation!==null;if(animated){var speed=animator.speed;if(Math.abs(this.time-this.refreshTime)>speed*64){this.refreshTime=this.time;return this.time;}
return this.refreshTime;}else{this.refreshTime=this.time;return this.time;}}
return this.time;},},};var sortedTableComponent={methods:{sortByBase:function(sortdata,key,index){index=index>=0?index:-1;if(sortdata.key!==key||index!==sortdata.index){sortdata.order="asc";}else{sortdata.order=sortdata.order==="asc"?"desc":"asc";}
sortdata.key=key;sortdata.index=index;},getHeaderClassBase:function(sortdata,key,index){index=index>=0?index:-1;if(sortdata.key===key&&sortdata.index===index){if(sortdata.order==="asc"){return{"sorted_asc":true};}else{return{"sorted_desc":true};}};return{'sorted':true};},getBodyClassBase:function(sortdata,key,index){index=index>=0?index:-1;return{'sorted':sortdata.key===key&&sortdata.index===index};},}};var sortedDistributionComponent={methods:{sortBy:function(key,index,func){this.sortByBase(this.sortdata,key,index);this.sortdata.sortFunc=func?func:null;},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},getCastBodyClass:function(key,index,data){var res=this.getBodyClass(key,index);var innacurate={higherOrEqual:(!this.getSkill(data).condi&&this.getCast(data))&&this.showInequality(data)};Object.assign(res,innacurate);return res;},getHitsPerCastBodyClass:function(key,index,data){var res=this.getBodyClass(key,index);var innacurate={lowerOrEqual:(!this.getSkill(data).condi&&this.getConnectedHits(data)&&this.getCast(data))&&this.showInequality(data)};Object.assign(res,innacurate);return res;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Skill":rows.sort((x,y)=>order*(this.getSkill(x).name.localeCompare(this.getSkill(y).name)));break;case "Data":var sortFunc=x=>{var value=this.sortdata.sortFunc(x);if(value===0){if(order>0){value=1e15;}else{value=-1e15;}}
return value;};rows.sort((x,y)=>order*(sortFunc(x)-sortFunc(y)));break;default:return null;break;}
return rows;},}};var colSliderComponent=function(perpage,names=null){let data;let methods;if(names!==null){data=function(){let res={};for(let i=0;i<names.length;i++){res[names[i]+"ColStructure"]={offset:0,perpage:perpage,};}
return res;};methods={};for(let i=0;i<names.length;i++){methods["isIn"+names[i][0].toUpperCase()+names[i].slice(1)+"ColPage"]=function(index){return(index>=this[names[i]+"ColStructure"].offset&&index<this[names[i]+"ColStructure"].offset+this[names[i]+"ColStructure"].perpage);}}}else{data=function(){return{colStructure:{offset:0,perpage:perpage,},};};methods={isInColPage:function(index){return(index>=this.colStructure.offset&&index<this.colStructure.offset+this.colStructure.perpage);},}}
return{data:data,methods:methods};};var rowSliderComponent=function(perpage){return{data:function(){return{rowStructure:{offset:0,perpage:perpage},};},methods:{isInRowPage:function(index){return(index>=this.rowStructure.offset&&index<this.rowStructure.offset+this.rowStructure.perpage);},},};};var targetTabGraphComponent={data:function(){return{targetOffset:0};},watch:{light:{handler:function(){var textColor=this.light?'#495057':'#cccccc';this.layout.yaxis.gridcolor=textColor;this.layout.yaxis.color=textColor;this.layout.yaxis2.gridcolor=textColor;this.layout.yaxis2.color=textColor;this.layout.yaxis3.gridcolor=textColor;this.layout.yaxis3.color=textColor;this.layout.xaxis.gridcolor=textColor;this.layout.xaxis.color=textColor;this.layout.font.color=textColor;for(var i=0;i<this.layout.shapes.length;i++){this.layout.shapes[i].line.color=textColor;}
this.layout.datarevision=new Date().getTime();}}},created:function(){var images=[];this.data=[];this.targetOffset+=computeRotationData(this.rotationData,images,this.data,this.phase,this.target,1);var oldOffset=this.targetOffset;this.targetOffset+=computeBuffData(this.boonGraph,this.data);var hasBuffs=oldOffset!==this.targetOffset;this.targetOffset+=addTargetLayout(this.data,this.target,this.breakbarStates,"breakbar","breakbar",this.phase.breakbarPhase);this.targetOffset+=addTargetLayout(this.data,this.target,this.barrierStates,"barrier","barrier",false);this.targetOffset+=addTargetLayout(this.data,this.target,this.healthStates,"hp","health",true);this.data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline'},yaxis:'y3',hoverinfo:'name+y+x',name:'Total'});this.layout=getActorGraphLayout(images,this.light?'#495057':'#cccccc',hasBuffs);computePhaseMarkups(this.layout.shapes,this.layout.annotations,this.phase,this.light?'#495057':'#cccccc');this.updateVisibily(this.layout.images,this.phase.start,this.phase.end);},activated:function(){var div=document.getElementById(this.graphid);var layout=this.layout;var images=layout.images;var _this=this;div.on('plotly_relayout',function(evt){var x0=layout.xaxis.range[0];var x1=layout.xaxis.range[1];if(_this.updateVisibily(images,x0,x1)){layout.datarevision=new Date().getTime();}});},computed:{healthStates:function(){return this.graph.targets[this.phaseTargetIndex].healthStates;},breakbarStates:function(){return this.graph.targets[this.phaseTargetIndex].breakbarPercentStates;},barrierStates:function(){return this.graph.targets[this.phaseTargetIndex].barrierStates;},target:function(){return logData.targets[this.targetindex];},phaseTargetIndex:function(){return this.phase.targets.indexOf(this.targetindex);},damageGraphName:function(){switch(this.graphdata.damagemode){case DamageType.All:return "total";case DamageType.Power:return "totalPower";case DamageType.Condition:return "totalCondition";default:throw new Error("unknown enum in damage graph name");}},graphname:function(){var name=getDamageGraphName(this.graphdata.damagemode,this.graphdata.graphmode);switch(this.graphdata.dpsmode){case 0:name="Full "+name;break;case-1:name="Phase "+name;break;default:name=this.graphdata.dpsmode+"s "+name;break;}
return name;},computeData:function(){this.layout.datarevision=new Date().getTime();this.layout.yaxis3.title=graphTypeEnumToString(this.graphdata.graphmode);var res=this.data;var data=this.computeDPSRelatedData();for(var i=0;i<data.length;i++){this.data[this.targetOffset-i].y=data[i];}
return res;},rotationData:function(){return this.target.details.rotation[this.phaseindex];}},methods:{computeDPSData:function(){var cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,[],this.phaseindex,null);if(this.dpsCache.has(cacheID)){return this.dpsCache.get(cacheID);}
var res;var damageData=this.graph.targets[this.phaseTargetIndex][this.damageGraphName];if(this.graphdata.dpsmode>=0){res=computeTargetDPS(this.target,damageData,this.graphdata.dpsmode,null,cacheID,this.phase.times,this.graphdata.graphmode);}else{res=computeTargetDPS(this.target,damageData,0,this.computePhaseBreaks,cacheID,this.phase.times,this.graphdata.graphmode);}
this.dpsCache.set(cacheID,res);return res;},computeDPSRelatedData:function(){var cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,[],this.phaseindex,null);if(this.dataCache.has(cacheID)){return this.dataCache.get(cacheID);}
var dpsData=this.computeDPSData();var res=[dpsData.dps];addPointsToGraph(res,this.healthStates,dpsData.maxDPS);addPointsToGraph(res,this.barrierStates,dpsData.maxDPS);addPointsToGraph(res,this.breakbarStates,dpsData.maxDPS);this.dataCache.set(cacheID,res);return res;},}}
"use strict";function computeGradient(left,percent,right){var template="linear-gradient(to right, $fill$, $middle$, $black$)";var res=percent;var fillPercent=left+" "+res+"%";var blackPercent=right+" "+(100-res)+"%";var middle=res+"%";template=template.replace("$fill$",fillPercent);template=template.replace("$black$",blackPercent);template=template.replace("$middle$",middle);return template;};function computeSliderGradient(color,fillColor,startPercent,endPercent){var template="linear-gradient(to right, $left$, $left2$, $middle$, $middle2$, $right$, $right2$)";var left=color+" "+0+"%";var left2=color+" "+startPercent+"%";var right=color+" "+endPercent+"%";var right2=color+" "+100+"%";var middle=fillColor+" "+startPercent+"%";var middle2=fillColor+" "+endPercent+"%";template=template.replace("$left$",left);template=template.replace("$left2$",left2);template=template.replace("$right$",right);template=template.replace("$right2$",right2);template=template.replace("$middle$",middle);template=template.replace("$middle2$",middle2);return template;};function buildFallBackURL(skill){if(!skill.icon||skill.fallBack){return;}
var apiIcon=skill.icon;if(!apiIcon.includes("render")){return;}
var splitIcon=apiIcon.split('/');var signature=splitIcon[splitIcon.length-2];var id=splitIcon[splitIcon.length-1].split('.')[0]+"-64px.png";skill.icon="https://darthmaim-cdn.de/gw2treasures/icons/"+signature+"/"+id;skill.fallBack=true;}
function findSkill(isBuff,id){var skill;if(isBuff){skill=logData.buffMap['b'+id]||{};skill.condi=true;}else{skill=logData.skillMap["s"+id]||{};}
skill.id=id;if(!apiRenderServiceOkay){buildFallBackURL(skill);}
return skill;}
function getTargetCacheID(activetargets){var id=0;for(var i=0;i<activetargets.length;i++){id+=Math.pow(2,activetargets[i]);}
return id;}
function getDPSGraphCacheID(dpsmode,damagemode,graphmode,activetargets,phaseIndex,extra){return "dps"+dpsmode+'-'+damagemode+'-'+graphmode+'-'+getTargetCacheID(activetargets)+'-'+phaseIndex+(extra!==null?'-'+extra:'');}
function graphTypeEnumToString(mode){var name="";switch(mode){case GraphType.DPS:name="DPS";break;case GraphType.CenteredDPS:name="Centered DPS";break;case GraphType.Damage:name="Damage";break;default:break;}
return name;}
function addPointsToGraph(res,graph,max){if(!graph){return;}
var points=[];for(var j=0;j<graph.length;j++){points[j]=graph[j][1]*max/100.0;}
res.push(points);}
function addMechanicsToGraph(data,phase,phaseIndex){for(var i=0;i<graphData.mechanics.length;i++){var mech=graphData.mechanics[i];var mechData=logData.mechanicMap[i];var chart={x:[],mode:'markers',visible:mech.visible?null:'legendonly',type:'scatter',marker:{symbol:mech.symbol,color:mech.color,size:mech.size?mech.size:15},text:[],name:mechData.name,hoverinfo:'text'};if(mechData.enemyMech){for(var j=0;j<mech.points[phaseIndex].length;j++){var pts=mech.points[phaseIndex][j];var tarId=phase.targets[j];if(tarId>=0){var target=logData.targets[tarId];for(var k=0;k<pts.length;k++){var time=pts[k];chart.x.push(time);chart.text.push(time+'s: '+target.name);}}else{for(var k=0;k<pts.length;k++){var time=pts[k][0];chart.x.push(time);chart.text.push(time+'s: '+pts[k][1]);}}}}else{for(var j=0;j<mech.points[phaseIndex].length;j++){var pts=mech.points[phaseIndex][j];var player=logData.players[j];for(var k=0;k<pts.length;k++){var time=pts[k];chart.x.push(time);chart.text.push(time+'s: '+player.name);}}}
data.push(chart);}}
function updateMechanicsYValues(res,phase,phaseIndex,phaseGraphData,max){for(var i=0;i<graphData.mechanics.length;i++){var mech=graphData.mechanics[i];var mechData=logData.mechanicMap[i];var chart=[];res.push(chart);if(mechData.enemyMech){for(var j=0;j<mech.points[phaseIndex].length;j++){var pts=mech.points[phaseIndex][j];var tarId=phase.targets[j];if(tarId>=0){var health=phaseGraphData.targets[j].healthStates;for(var k=0;k<pts.length;k++){chart.push(findState(health,pts[k],0,health.length-1)*max/100.0);}}else{for(var k=0;k<pts.length;k++){chart.push(max*0.5);}}}}else{for(var j=0;j<mech.points[phaseIndex].length;j++){var pts=mech.points[phaseIndex][j];for(var k=0;k<pts.length;k++){var time=pts[k];var ftime=Math.floor(time);var y=res[j][ftime];var yp1=res[j][ftime+1];chart.push(interpolatePoint(ftime,ftime+1,y,yp1,time));}}}}}
function interpolatePoint(x1,x2,y1,y2,x){if(typeof y2!=="undefined"){return y1+(y2-y1)/(x2-x1)*(x-x1);}else{return y1;}}
function damageTypeEnumToString(mode){var name="";switch(mode){case DamageType.All:name="All";break;case DamageType.Power:name="Power";break;case DamageType.Condition:name="Condition";break;case DamageType.Breakbar:name="Breakbar";break;default:break;}
return name;}
function getDamageGraphName(damageMode,graphMode){return damageTypeEnumToString(damageMode)+" "+graphTypeEnumToString(graphMode)+" Graph";}
function computeRotationData(rotationData,images,data,phase,actor,yAxis){if(rotationData){var rotaTrace={x:[],base:[],y:[],name:actor.name,text:[],orientation:'h',mode:'markers',type:'bar',textposition:"none",width:[],hoverinfo:'text',hoverlabel:{namelength:'-1'},yaxis:yAxis===0?'y':'y'+(yAxis+1),marker:{color:[],width:'5',line:{color:[],width:'2.0'}},showlegend:false};for(var i=0;i<rotationData.length;i++){var item=rotationData[i];var x=item[0];var skillId=item[1];var duration=item[2];var endType=item[3];var quick=item[4];var skill=findSkill(false,skillId);var aa=false;var icon;var name='???';if(skill){aa=skill.aa;icon=skill.icon;name=skill.name;}
if(!icon.includes("render")&&!icon.includes("darthmaim")){icon=null;}
var fillColor;var originalDuration=duration;if(endType===RotationStatus.REDUCED){fillColor='rgb(0,0,255)';}else if(endType===RotationStatus.CANCEL){fillColor='rgb(255,0,0)';}else if(endType===RotationStatus.FULL){fillColor='rgb(0,255,0)';}else if(endType===RotationStatus.INSTANT){fillColor='rgb(0,255,255)';duration=50;}else{fillColor='rgb(255,255,0)';}
var clampedX=Math.max(x,0);var diffX=clampedX-x;var clampedWidth=Math.min(x+duration/1000.0,phase.duration/1000.0)-x-diffX;if(!aa&&icon){images.push({source:icon,xref:'x',yref:yAxis===0?'y':'y'+(yAxis+1),x:clampedX,y:0.0,sizex:1.0,sizey:1.0,xanchor:'middle',yanchor:'bottom'});}
rotaTrace.x.push(clampedWidth-0.001);rotaTrace.base.push(clampedX);rotaTrace.y.push(1.2);var text=`${name} at ${x}s`;rotaTrace.text.push(endType===RotationStatus.INSTANT?text:text+` for ${originalDuration}ms`);rotaTrace.width.push(aa?0.5:1.0);rotaTrace.marker.color.push(fillColor);var outlineR=quick>0.0?quick*quickColor.r+(1.0-quick)*normalColor.r:-quick*slowColor.r+(1.0+quick)*normalColor.r;var outlineG=quick>0.0?quick*quickColor.g+(1.0-quick)*normalColor.g:-quick*slowColor.g+(1.0+quick)*normalColor.g;var outlineB=quick>0.0?quick*quickColor.b+(1.0-quick)*normalColor.b:-quick*slowColor.b+(1.0+quick)*normalColor.b;rotaTrace.marker.line.color.push('rgb('+outlineR+','+outlineG+','+outlineB+')');}
data.push(rotaTrace);return 1;}
return 0;}
function computePhaseMarkupSettings(currentArea,areas,annotations){var y=1;var textbg='#0000FF';var x=(currentArea.end+currentArea.start)/2;for(var i=annotations.length-1;i>=0;i--){var annotation=annotations[i];var area=areas[i];if((area.start<=currentArea.start&&area.end>=currentArea.end)||area.end>=currentArea.start-2){if(annotation.bgcolor===textbg){textbg='#FF0000';}
y=annotation.y===y&&area.end>currentArea.start?1.09:y;break;}}
return{y:y,x:x,textbg:textbg};}
function computePhaseMarkups(shapes,annotations,phase,linecolor){if(phase.markupAreas){for(var i=0;i<phase.markupAreas.length;i++){var area=phase.markupAreas[i];var setting=computePhaseMarkupSettings(area,phase.markupAreas,annotations);if(area.label){annotations.push({x:setting.x,y:setting.y,xref:'x',yref:'paper',xanchor:'center',yanchor:'bottom',text:area.label+'<br>'+'('+Math.round(1000*(area.end-area.start))/1000+' s)',font:{color:'#ffffff'},showarrow:false,bordercolor:'#A0A0A0',borderwidth:2,bgcolor:setting.textbg,opacity:0.8});}
if(area.highlight){shapes.push({type:'rect',xref:'x',yref:'paper',x0:area.start,y0:0,x1:area.end,y1:1,fillcolor:setting.textbg,opacity:0.2,line:{width:0},layer:'below'});}}}
if(phase.markupLines){for(var i=0;i<phase.markupLines.length;i++){var x=phase.markupLines[i];shapes.push({type:'line',xref:'x',yref:'paper',x0:x,y0:0,x1:x,y1:1,line:{color:linecolor,width:2,dash:'dash'},opacity:0.6,});}}}
function computePlayerDPS(player,damageData,lim,phasebreaks,activetargets,cacheID,times,graphMode,damageMode){if(player.dpsGraphCache.has(cacheID)){return player.dpsGraphCache.get(cacheID);}
var totalDamage=0;var targetDamage=0;var totalDPS=[0];var cleaveDPS=[0];var targetDPS=[0];var maxDPS={total:0,cleave:0,target:0};if(graphMode===GraphType.CenteredDPS){lim/=2;}
var end=times.length;var left=0,right=0,targetid,k;var roundingToUse=damageMode===DamageType.Breakbar?numberComponent.methods.round1:numberComponent.methods.round;for(var j=0;j<end;j++){var time=times[j];if(lim>0){left=Math.max(Math.round(time-lim),0);}else if(phasebreaks&&phasebreaks[j]){left=j;}
right=j;if(graphMode===GraphType.CenteredDPS){if(lim>0){right=Math.min(Math.round(time+lim),end-1);}else if(phasebreaks){for(var i=left+1;i<phasebreaks.length;i++){if(phasebreaks[i]){right=i;break;}}}else{right=end-1;}}
var div=graphMode!==GraphType.Damage?Math.max(times[right]-times[left],1):1;totalDamage=damageData.total[right]-damageData.total[left];targetDamage=0;for(k=0;k<activetargets.length;k++){targetid=activetargets[k];targetDamage+=damageData.targets[targetid][right]-damageData.targets[targetid][left];}
totalDPS[j]=roundingToUse(totalDamage/div);targetDPS[j]=roundingToUse(targetDamage/div);cleaveDPS[j]=roundingToUse((totalDamage-targetDamage)/div);maxDPS.total=Math.max(maxDPS.total,totalDPS[j]);maxDPS.target=Math.max(maxDPS.target,targetDPS[j]);maxDPS.cleave=Math.max(maxDPS.cleave,cleaveDPS[j]);}
if(maxDPS.total<1e-6){maxDPS.total=10;}
if(maxDPS.target<1e-6){maxDPS.target=10;}
if(maxDPS.cleave<1e-6){maxDPS.cleave=10;}
var res={dps:{total:totalDPS,target:targetDPS,cleave:cleaveDPS},maxDPS:maxDPS};player.dpsGraphCache.set(cacheID,res);return res;}
function findState(states,timeS,start,end){var id=Math.floor((end+start)/2);if(id===start||id===end){return states[id][1];}
var item=states[id];var itemN=states[id+1];var x=item[0];var xN=itemN[0];if(timeS<x){return findState(states,timeS,start,id);}else if(timeS>xN){return findState(states,timeS,id,end);}else{return item[1];}}
function getActorGraphLayout(images,color,hasBuffs){return{barmode:'stack',yaxis2:{title:'Rotation',domain:hasBuffs?[0.45,0.54]:[0.0,0.09],fixedrange:true,showgrid:false,showticklabels:false,color:color,range:[0,2]},legend:{traceorder:'reversed'},hovermode:'x',hoverdistance:150,yaxis:{title:'Duration Buffs',domain:hasBuffs?[0.0,0.44]:[0.0,0.0],color:color,gridcolor:color,tickformat:",d",fixedrange:true,side:'right',range:[0,1.5],nticks:1},yaxis4:{title:'Intensity Buffs',domain:hasBuffs?[0.0,0.44]:[0.0,0.0],color:color,gridcolor:color,tickformat:",d",fixedrange:true,overlaying:'y',nticks:10,},yaxis3:{title:'DPS',color:color,tickformat:",d",gridcolor:color,domain:hasBuffs?[0.55,1.0]:[0.1,1.0]},images:images,font:{color:color},xaxis:{title:'Time(sec)',color:color,rangemode:'nonnegative',gridcolor:color,tickmode:'auto',nticks:8,xrangeslider:{},domain:[0.0,0.95],},paper_bgcolor:'rgba(0,0,0,0)',plot_bgcolor:'rgba(0,0,0,0)',shapes:[],annotations:[],autosize:true,width:1300,height:850,datarevision:new Date().getTime(),};}
function _computeTargetGraphData(graph,targets,phase,data,yaxis,jsonGraphName,percentName,graphName,visible){var count=0;for(var i=0;i<graph.targets.length;i++){var graphData=graph.targets[i][jsonGraphName];if(!graphData){continue;}
count++;var texts=[];var times=[];var target=targets[phase.targets[i]];for(var j=0;j<graphData.length;j++){texts[j]=graphData[j][1]+"% "+percentName+" - "+target.name;times[j]=graphData[j][0];}
var res={x:times,text:texts,mode:"lines",line:{dash:"dashdot",shape:"hv",},hoverinfo:"text",visible:visible?true:"legendonly",name:target.name+" "+graphName,};if(yaxis){res.yaxis=yaxis;}
data.push(res);}
return count;}
function computeTargetHealthData(graph,targets,phase,data,yaxis){return _computeTargetGraphData(graph,targets,phase,data,yaxis,"healthStates","hp","health",!logData.wvw);}
function computeTargetBarrierData(graph,targets,phase,data,yaxis){return _computeTargetGraphData(graph,targets,phase,data,yaxis,"barrierStates","barrier","barrier",false);}
function computeTargetBreakbarData(graph,targets,phase,data,yaxis){return _computeTargetGraphData(graph,targets,phase,data,yaxis,"breakbarPercentStates","breakbar","breakbar",phase.breakbarPhase);}
function _computePlayerGraphData(graph,player,data,yaxis,graphName,percentName){if(!graph){return 0;}
var texts=[];var times=[];for(var j=0;j<graph.length;j++){texts[j]=graph[j][1]+"%"+percentName+" - "+player.name;times[j]=graph[j][0];}
var res={x:times,text:texts,mode:'lines',line:{dash:'dashdot',shape:'hv'},hoverinfo:'text',name:player.name+' '+graphName,visible:'legendonly',};if(yaxis){res.yaxis=yaxis;}
data.push(res);return 1;}
function computePlayerHealthData(healthGraph,player,data,yaxis){return _computePlayerGraphData(healthGraph,player,data,yaxis,"health","hp");}
function computePlayerBarrierData(barrierGraph,player,data,yaxis){return _computePlayerGraphData(barrierGraph,player,data,yaxis,"barrier","barrier");}
function computeBuffData(buffData,data){if(buffData){for(var i=0;i<buffData.length;i++){var boonItem=buffData[i];var boon=findSkill(true,boonItem.id);var line={x:[],y:[],text:[],yaxis:boon.stacking?'y4':'y',type:'scatter',visible:boonItem.visible?null:'legendonly',line:{color:boonItem.color,shape:'hv'},hoverinfo:'text+x',fill:'tozeroy',name:boon.name.substring(0,20)};for(var p=0;p<boonItem.states.length;p++){line.x.push(boonItem.states[p][0]);line.y.push(boonItem.states[p][1]);line.text.push(boon.name+': '+boonItem.states[p][1]);}
data.push(line);}
return buffData.length;}
return 0;}
function computeTargetDPS(target,damageData,lim,phasebreaks,cacheID,times,graphMode){if(target.dpsGraphCache.has(cacheID)){return target.dpsGraphCache.get(cacheID);}
var totalDamage=0;var totalDPS=[0];var maxDPS=0;var left=0,right=0;var end=times.length;if(graphMode===GraphType.CenteredDPS){lim/=2;}
for(var j=0;j<end;j++){var time=times[j];if(lim>0){left=Math.max(Math.round(time-lim),0);}else if(phasebreaks&&phasebreaks[j]){left=j;}
right=j;if(graphMode===GraphType.CenteredDPS){if(lim>0){right=Math.min(Math.round(time+lim),end-1);}else if(phasebreaks){for(var i=left+1;i<phasebreaks.length;i++){if(phasebreaks[i]){right=i;break;}}}else{right=end-1;}}
var div=graphMode!==GraphType.Damage?Math.max(times[right]-times[left],1):1;totalDamage=damageData[right]-damageData[left];totalDPS[j]=Math.round(totalDamage/(div));maxDPS=Math.max(maxDPS,totalDPS[j]);}
if(maxDPS<1e-6){maxDPS=10;}
var res={dps:totalDPS,maxDPS:maxDPS};target.dpsGraphCache.set(cacheID,res);return res;}
function addTargetLayout(data,target,states,percentName,graphName,visible){if(!states){return 0;}
var texts=[];var times=[];for(var j=0;j<states.length;j++){texts[j]=states[j][1]+"% "+percentName;times[j]=states[j][0];}
var res={x:times,text:texts,mode:'lines',line:{dash:'dashdot',shape:'hv'},hoverinfo:'text',visible:visible?true:'legendonly',name:target.name+' '+graphName,yaxis:'y3'};data.push(res);return 1;}
"use strict";function compileTemplates(){Vue.component("graph-component",{props:['id','layout','data'],template:'<div :id="id" class="d-flex flex-row justify-content-center"></div>',activated:function(){var div=document.querySelector(this.queryID);Plotly.react(div,this.data,this.layout,{showEditInChartStudio:true,plotlyServerURL:"https://chart-studio.plotly.com"});var _this=this;div.on('plotly_animated',function(){Plotly.relayout(div,_this.layout);});},computed:{queryID:function(){return "#"+this.id;}},watch:{layout:{handler:function(){var div=document.querySelector(this.queryID);if(!div){return;}
var duration=1000;Plotly.animate(div,{data:this.data},{transition:{duration:duration,easing:'cubic-in-out'},frame:{duration:0.75*duration}});},deep:true},data:{handler:function(){var div=document.querySelector(this.queryID);if(!div){return;}
Plotly.react(div,this.data,this.layout,{showEditInChartStudio:true,plotlyServerURL:"https://chart-studio.plotly.com"});},deep:true}}});Vue.component("custom-numberform-component",{props:["minValue","maxValue","id","placeholderValue"],template:`
        <div>
            <input class="form-control" type="number" :id="id"
                @onkeypress="return isNumber(event)" onpaste="return false;" step="2" 
                    :value="placeholderValue" data-bind="value:replyNumber, fireChange: true"
                    :min="minValue" :max="maxValue">
        </div>
        `,methods:{isNumber:function(evt){evt=(evt)?evt:window.event;var charCode=(evt.which)?evt.which:evt.keyCode;if((charCode>31&&charCode<48)||charCode>57){return false;}
return true;}},mounted(){$("#"+this.id).on("input ",function(){var max=parseInt($(this).attr('max'))||1e12;var min=parseInt($(this).attr('min'));if($(this).val()>max){$(this).val(max);}else if($(this).val()<min){$(this).val(min);}});}});Vue.component("table-scroll-component",{props:["min","max","width","height","transform","pagestructure"],template:`      
        <input 
            style="background-color: #888888;" 
            :style=getStyle()
            type="range" :min="min" :max="max" :value="min" class="slider" @input="updateOffset($event.target.value)">
        `,methods:{updateOffset:function(value){this.pagestructure.offset=parseInt(value);},getStyle:function(){var res={width:this.width,height:this.height,transform:this.transform};return res;},}});Vue.component("targetperplayer-graphs-tab-component",{props:["targetindex","phaseindex",'light','playerindex'],template:`      
        <div>            
            <keep-alive>  
                <targetperplayer-graph-tab-component v-for="(player, pId) in players" v-if="pId === playerindex"
                :key="phaseindex + 'perplayer' + pId" :targetindex="targetindex" :phaseindex="phaseindex" :light="light"
                :playerindex="playerindex">
                </targetperplayer-graph-tab-component>           
            <keep-alive>
        </div>
        `,computed:{players:function(){return logData.players;}}});{Vue.component("buff-stats-component",{props:['type','phaseindex','playerindex','activeduration'],template:`    <div>        <div class="d-flex flex-row justify-content-center mt-1 mb-1">            <ul class="nav nav-pills d-flex flex-row justify-content-center scale85">                <li class="nav-item">                    <a class="nav-link" @click="mode = 0" :class="{active: mode === 0}">Uptime</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="mode = 1" :class="{active: mode === 1 }">Generation Self</a>                </li>                <li v-if="!singlePlayer" class="nav-item">                    <a class="nav-link" @click="mode = 2" :class="{active: mode === 2 }"                        data-original-title="Self excluded">Generation Group</a>                </li>                <li v-if="!singleGroup" class="nav-item">                    <a class="nav-link" @click="mode = 3" :class="{active: mode === 3 }"                        data-original-title="Self excluded">Generation Off-Group</a>                </li>                <li v-if="!singleGroup" class="nav-item">                    <a class="nav-link" @click="mode = 4" :class="{active: mode === 4 }"                        data-original-title="Self excluded">Generation Squad</a>                </li>            </ul>        </div>        <keep-alive>            <buff-table-component v-if="type === 0" :key="'boon-stats-table'" :condition="false" :generation="mode > 0"                :id="'boon-stats-table'" :buffs="boons" :playerdata="buffData.boonsData[mode]"                :sums="mode === 0 ? buffData.boonsData[5] : []" :playerindex="playerindex" :hidecustom="mode > 1">            </buff-table-component>            <buff-table-component v-if="type === 1" :key="'offensivebuff-stats-table'" :condition="false"                :generation="mode > 0" :id="'offensivebuff-stats-table'" :buffs="offs"                :playerdata="buffData.offsData[mode]" :sums="mode === 0 ? buffData.offsData[5] : []"                :playerindex="playerindex" :hidecustom="mode > 1">            </buff-table-component>            <buff-table-component v-if="type === 2" :key="'supportbuff-stats-table'" :condition="false"                :generation="mode > 0" :id="'supportbuff-stats-table'" :buffs="sups"                :playerdata="buffData.supsData[mode]" :sums="mode === 0 ? buffData.supsData[5] : []"                :playerindex="playerindex" :hidecustom="mode > 1">            </buff-table-component>            <buff-table-component v-if="type === 3" :key="'defensivebuff-stats-table'" :condition="false"                :generation="mode > 0" :id="'defensivebuff-stats-table'" :buffs="defs"                :playerdata="buffData.defsData[mode]" :sums="mode === 0 ? buffData.defsData[5] : []"                :playerindex="playerindex" :hidecustom="mode > 1">            </buff-table-component>        </keep-alive>    </div>`,data:function(){return{mode:0,cache:new Map()};},computed:{singleGroup:function(){return logData.singleGroup;},singlePlayer:function(){return logData.players.filter(x=>!x.notInSquad).length<=1;},phase:function(){return logData.phases[this.phaseindex];},boons:function(){var data=[];for(var i=0;i<logData.boons.length;i++){data[i]=findSkill(true,logData.boons[i]);}
return data;},offs:function(){var data=[];for(var i=0;i<logData.offBuffs.length;i++){data[i]=findSkill(true,logData.offBuffs[i]);}
return data;},defs:function(){var data=[];for(var i=0;i<logData.defBuffs.length;i++){data[i]=findSkill(true,logData.defBuffs[i]);}
return data;},sups:function(){var data=[];for(var i=0;i<logData.supBuffs.length;i++){data[i]=findSkill(true,logData.supBuffs[i]);}
return data;},buffData:function(){var id=this.phaseindex+'-'+this.activeduration;if(this.cache.has(id)){return this.cache.get(id);}
var activeduration=this.activeduration;var activeTimes=this.phase.playerActiveTimes;var getData=function(uptimesStats,genSelfStats,genGroupStats,genOffGroupStats,genSquadStats){var uptimes=[],genSelf=[],genGroup=[],genOffGroup=[],genSquad=[];var avg=[],groupAvg=[],totalAvg=[];var groupCount=[],totalCount=0;var groupBoonAvg=[],totalBoonAvg=0;for(var i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
uptimes.push({player:player,data:uptimesStats[i]});genSelf.push({player:player,data:genSelfStats[i]});genGroup.push({player:player,data:genGroupStats[i]});genOffGroup.push({player:player,data:genOffGroupStats[i]});genSquad.push({player:player,data:genSquadStats[i]});if(activeduration&&activeTimes[i]<1e-6){continue;}
var playerWeight=activeduration?activeTimes[i]:1;if(player.notInSquad){continue;}
if(!groupAvg[player.group]){groupAvg[player.group]=[];groupCount[player.group]=0;groupBoonAvg[player.group]=0;}
totalCount+=playerWeight;totalBoonAvg+=playerWeight*uptimesStats[i].avg;groupBoonAvg[player.group]+=playerWeight*uptimesStats[i].avg;groupCount[player.group]+=playerWeight;for(var j=0;j<uptimesStats[i].data.length;j++){totalAvg[j]=(totalAvg[j]||0)+playerWeight*(uptimesStats[i].data[j][0]||0);groupAvg[player.group][j]=(groupAvg[player.group][j]||0)+playerWeight*(uptimesStats[i].data[j][0]||0);}}
for(var i=0;i<groupAvg.length;i++){if(groupAvg[i]){for(var k=0;k<groupAvg[i].length;k++){groupAvg[i][k]=Math.round(1000*groupAvg[i][k]/groupCount[i])/1000;}
avg.push({name:"Group "+i,data:groupAvg[i],avg:Math.round(1000*groupBoonAvg[i]/groupCount[i])/1000});}}
for(var k=0;k<totalAvg.length;k++){totalAvg[k]=Math.round(1000*totalAvg[k]/totalCount)/1000;}
avg.push({name:"Total",data:totalAvg,avg:Math.round(1000*totalBoonAvg/totalCount)/1000});return[uptimes,genSelf,genGroup,genOffGroup,genSquad,avg];};var res;if(this.activeduration){res={boonsData:getData(this.phase.boonActiveStats,this.phase.boonGenActiveSelfStats,this.phase.boonGenActiveGroupStats,this.phase.boonGenActiveOGroupStats,this.phase.boonGenActiveSquadStats),offsData:getData(this.phase.offBuffActiveStats,this.phase.offBuffGenActiveSelfStats,this.phase.offBuffGenActiveGroupStats,this.phase.offBuffGenActiveOGroupStats,this.phase.offBuffGenActiveSquadStats),defsData:getData(this.phase.defBuffActiveStats,this.phase.defBuffGenActiveSelfStats,this.phase.defBuffGenActiveGroupStats,this.phase.defBuffGenActiveOGroupStats,this.phase.defBuffGenActiveSquadStats),supsData:getData(this.phase.supBuffActiveStats,this.phase.supBuffGenActiveSelfStats,this.phase.supBuffGenActiveGroupStats,this.phase.supBuffGenActiveOGroupStats,this.phase.supBuffGenActiveSquadStats)};}else{res={boonsData:getData(this.phase.boonStats,this.phase.boonGenSelfStats,this.phase.boonGenGroupStats,this.phase.boonGenOGroupStats,this.phase.boonGenSquadStats),offsData:getData(this.phase.offBuffStats,this.phase.offBuffGenSelfStats,this.phase.offBuffGenGroupStats,this.phase.offBuffGenOGroupStats,this.phase.offBuffGenSquadStats),defsData:getData(this.phase.defBuffStats,this.phase.defBuffGenSelfStats,this.phase.defBuffGenGroupStats,this.phase.defBuffGenOGroupStats,this.phase.defBuffGenSquadStats),supsData:getData(this.phase.supBuffStats,this.phase.supBuffGenSelfStats,this.phase.supBuffGenGroupStats,this.phase.supBuffGenOGroupStats,this.phase.supBuffGenSquadStats)};}
this.cache.set(id,res);return res;}},});}
{Vue.component("buff-stats-player-component",{props:['phaseindex','playerindex'],template:`    <div>            <div :key="'activedurationplayer'" class="d-flex flex-row justify-content-center mt-1 mb-1">            <ul class="nav nav-pills d-flex flex-row justify-content-center scale85">                <li class="nav-item">                    <a class="nav-link" @click="activeduration = 0" :class="{active: activeduration === 0}">Phase                        duration</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="activeduration = 1" data-original-title="Removed dead time and dc time"                        :class="{active: activeduration === 1 }">Phase active duration</a>                </li>            </ul>        </div>        <div class="mt-1 mb-1">            <buff-table-component :condition="false" :generation="true" :id="'boon-stats-player-table-' + player.id" :buffs="boons"                :playerdata="boonData" :sums="boonSums" :playerindex="-1" :hidecustom="false"></buff-table-component>        </div>    </div>`,data:function(){return{activeduration:0,cacheBoon:new Map(),cacheBoonSums:new Map(),};},computed:{boons:function(){var data=[];for(var i=0;i<logData.boons.length;i++){data[i]=findSkill(true,logData.boons[i]);}
return data;},phase:function(){return logData.phases[this.phaseindex];},player:function(){return logData.players[this.playerindex];},boonData:function(){var id=this.phaseindex+'-'+this.activeduration;if(this.cacheBoon.has(id)){return this.cacheBoon.get(id);}
var res=[];var activeTimes=this.phase.playerActiveTimes;var activeduration=this.activeduration;for(var i=0;i<logData.players.length;i++){if(activeduration&&activeTimes[i]<1e-6){continue;}
res.push({player:logData.players[i],data:activeduration?this.phase.boonActiveDictionaries[this.playerindex][i]:this.phase.boonDictionaries[this.playerindex][i]});}
this.cacheBoon.set(id,res);return res;},boonSums:function(){var id=this.phaseindex+'-'+this.activeduration;if(this.cacheBoonSums.has(id)){return this.cacheBoonSums.get(id);}
var activeduration=this.activeduration;var res=[];var playerData=activeduration?this.phase.boonActiveStats[this.playerindex]:this.phase.boonStats[this.playerindex];var activeTimes=this.phase.playerActiveTimes;if(activeduration&&activeTimes[this.playerindex]<1e-6){res.push({icon:this.player.icon,name:this.player.name,avg:0,data:[]});}else{res.push({icon:this.player.icon,name:this.player.name,avg:playerData.avg,data:playerData.data});}
this.cacheBoonSums.set(id,res);return res;},}});}
{Vue.component("buff-stats-target-component",{props:['phaseindex','playerindex','targetindex'],template:`    <div>        <div>            <h3 class="text-center">Conditions</h3>            <buff-table-component :condition="true" :generation="true" :id="'condition-stats-target-table-' + target.id" :buffs="conditions"                :playerdata="condiData" :sums="condiSums" :playerindex="playerindex" :hidecustom="false"></buff-table-component>        </div>        <div v-show="hasBoons" class="mt-2">            <h3 class="text-center">Boons</h3>            <buff-table-component :condition="false" :generation="false" :id="'boon-stats-target-table-' + target.id" :buffs="boons"                :playerdata="boonData" :sums="[]" :hidecustom="false"></buff-table-component>        </div>    </div>`,data:function(){return{cacheCondi:new Map(),cacheCondiSums:new Map(),cacheBoon:new Map()};},computed:{boons:function(){var data=[];for(var i=0;i<logData.boons.length;i++){data[i]=findSkill(true,logData.boons[i]);}
return data;},conditions:function(){var data=[];for(var i=0;i<logData.conditions.length;i++){data[i]=findSkill(true,logData.conditions[i]);}
return data;},phase:function(){return logData.phases[this.phaseindex];},target:function(){return logData.targets[this.targetindex];},targetPhaseIndex:function(){return this.phase.targets.indexOf(this.targetindex);},hasBoons:function(){return this.phase.targetsBoonTotals[this.targetPhaseIndex].avg>0;},condiData:function(){if(this.cacheCondi.has(this.phaseindex)){return this.cacheCondi.get(this.phaseindex);}
var res=[];var i;if(this.targetPhaseIndex===-1){for(i=0;i<logData.players.length;i++){res.push({player:logData.players[i],data:{avg:0.0,data:[]}});}}else{for(i=0;i<logData.players.length;i++){res.push({player:logData.players[i],data:this.phase.targetsCondiStats[this.targetPhaseIndex][i]});}}
this.cacheCondi.set(this.phaseindex,res);return res;},condiSums:function(){if(this.cacheCondiSums.has(this.phaseindex)){return this.cacheCondiSums.get(this.phaseindex);}
var res=[];if(this.targetPhaseIndex===-1){res.push({icon:this.target.icon,name:this.target.name,avg:0,data:[]});}else{var targetData=this.phase.targetsCondiTotals[this.targetPhaseIndex];res.push({icon:this.target.icon,name:this.target.name,avg:targetData.avg,data:targetData.data});}
this.cacheCondiSums.set(this.phaseindex,res);return res;},boonData:function(){if(this.cacheBoon.has(this.phaseindex)){return this.cacheBoon.get(this.phaseindex);}
var res=[];if(this.targetPhaseIndex===-1||!this.hasBoons){res.push({player:this.target,data:{avg:0.0,data:[]}});}else{var targetData=this.phase.targetsBoonTotals[this.targetPhaseIndex];res.push({player:this.target,data:targetData});}
this.cacheBoon.set(this.phaseindex,res);return res;}}});}
{Vue.component("buff-table-component",{props:["buffs","playerdata","generation","condition","sums","id","playerindex","hidecustom"],template:`    <div v-if="buffs.length > 0">        <img v-if="generation" class="mb-1 icon" src="https://i.imgur.com/nSYuby8.png"            :data-original-title="tooltipExpl" />        <div v-if="colPageCount > 0">            <table-scroll-component :min="0" :max="colPageCount" :width="'600px'" :height="'10px'" :transform="'translate(500px)'" :pagestructure="colStructure"></table-scroll-component>        </div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">Sub</th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')"></th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">Name</th>                    <th class="stat-cell" v-for="(buff, index) in buffs" :class="getHeaderClass('Data', index)" @click="sortBy('Data', index)"                        v-show="isInColPage(index)"                        :data-original-title="buff.name + (buff.description ? '<br> ' + buff.description : '')">                        <img :src="buff.icon" :alt="buff.name" class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-show="!row.player.notInSquad || !hidecustom" v-for="row in sortData(playerdata)" :class="{active: row.player.group && row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">{{ row.player.group ? row.player.group : '-' }}</td>                    <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession ? row.player.profession : row.player.name">                        <img :src="row.player.icon"                            :alt="row.player.profession ? row.player.profession : row.player.name" class="icon">                        <span style="display:none">                            {{ row.player.profession ? row.player.profession : row.player.name}}                        </span>                    </td>                    <td class="text-left" :class="getBodyClass('Name')" :data-original-title="getAvgTooltip(row.data.avg)">                        {{ row.player.name }}                    </td>                    <td v-for=" (buff, index) in buffs"  :class="getBodyClass('Data', index)"                        v-show="isInColPage(index)"                        :data-original-title="getCellTooltip(buff, row.data.data[index])">                        {{ getCellValue(buff, row.data.data[index]) }}                    </td>                </tr>            </tbody>            <tfoot v-show="sums.length > 0">                <tr v-for="sum in sums">                    <td></td>                    <td v-if="sum.icon" :data-original-title="sum.name"><img :src="sum.icon" :alt="sum.name"                            class="icon"></td>                    <td v-else></td>                    <td class="text-left" :data-original-title="getAvgTooltip(sum.avg)">{{sum.name}}</td>                    <td v-for=" (buff, index) in buffs"                        v-show="isInColPage(index)"                        :data-original-title="getCellTooltip(buff, sum.data[index], !!sum.icon)">                        {{ getCellValue(buff, sum.data[index]) }}                    </td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent,colSliderComponent(20)],data:function(){return{sortdata:{order:"asc",index:-1,key:"Sub",}};},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Data":var index=this.sortdata.index;function getValue(rowValue){var value=rowValue.data.data[index];if(value instanceof Array){return value[0]??0;}
return value??0;}
rows.sort((x,y)=>order*(getValue(x)-getValue(y)));break;default:return null;break;}
return rows;},getAvgTooltip:function(avg){if(avg){return("Average number of "+
(this.condition?"conditions: ":"boons: ")+
avg);}
return false;},getCellTooltip:function(buff,val,uptime){if(val instanceof Array){if(!uptime&&this.generation&&(val[1]>0||val[2]>0||val[3]>0||val[4]>0)){var res='';if(val[1]!==val[0]){res+=(val[1]||0)+(buff.stacking?"":"%")+" with overstack";}
if(val[4]>0){res+=res.length>0?"<br>":'';res+=val[4]+(buff.stacking?"":"%")+" by extension";}
if(val[2]>0){res+=res.length>0?"<br>":'';res+=val[2]+(buff.stacking?"":"%")+" wasted";}
if(val[5]>0){res+=res.length>0?"<br>":'';res+=val[5]+(buff.stacking?"":"%")+" extended";}
if(val[3]>0){res+=res.length>0?"<br>":'';res+=val[3]+(buff.stacking?"":"%")+" extended by unknown source";}
return res.length>0?res:false;}else if(buff.stacking&&val[1]>0){return "Uptime: "+val[1]+"%";}else{return false;}}
return false;},getCellValue:function(buff,val){var value=val;var force=false;if(val instanceof Array){value=val[0];force=this.generation&&(val[1]>0||val[2]>0||val[3]>0||val[4]>0);}
if(value>0||force){return buff.stacking?value:value+"%";}
return "-";}},computed:{colPageCount:function(){return this.buffs.length-this.colStructure.perpage;},tableid:function(){return this.id;},tooltipExpl:function(){return `<ul style='text-align:left;margin-block-end: 0.3em;'>
                        <li>The value shown in the row is "generation + extensions you are the source"</li>
                        <li>With overstack is "generation + extensions you are the source + stacks that couldn't make into the queue/stacks"</li>
                        <li>By extension is "extensions you are the source"</li>
                        <li>Waste is "stacks that were overriden/cleansed". If you have high waste values that could mean there is an issue with your composition as someone may be overriding your stacks non-stop.</li>
                        <li>Extended by unknown source is the extension value for which we were unable to find an src, not included in generation.</li>
                        <li>Extended is "extended by unknown source + extended by known source other than yourself". Not included in generation. This value is just here to indicate if you are a good seed.</li>
                        </ul>`}}});}
{Vue.component('dmgdist-player-component',{props:['playerindex','phaseindex','activetargets'],template:`    <div>        <div v-if="player.minions.length > 0">            <ul class="nav nav-tabs">                <li>                    <a class="nav-link" :class="{active: distmode === -1}" @click="distmode = -1">{{player.name}}</a>                </li>                <li v-for="(minion, mindex) in player.minions">                    <a class="nav-link" :class="{active: distmode === mindex}"                        @click="distmode = mindex">{{minion.name}}</a>                </li>            </ul>        </div>        <div v-if="!targetless" class="d-flex flex-row justify-content-center mt-1 mb-1">            <ul class="nav nav-pills scale85">                <li class="nav-item">                    <a class="nav-link" @click="targetmode = 1" :class="{active: targetmode}">Target</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="targetmode = 0" :class="{active: !targetmode }">All</a>                </li>            </ul>        </div>        <damagedist-table-component :dmgdist="targetmode === 0 ? dmgdist : dmgdisttarget"            :tableid="'dmgdist-' + playerindex" :actorindex="playerindex" :minionindex="distmode"             :player="true" :istarget="targetmode === 1"            :phaseindex="phaseindex"></damagedist-table-component>    </div>`,data:function(){return{distmode:-1,targetless:logData.targetless,targetmode:logData.targetless?0:1,cacheTarget:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},player:function(){return logData.players[this.playerindex];},dmgdist:function(){if(this.distmode===-1){return this.player.details.dmgDistributions[this.phaseindex];}
return this.player.details.minions[this.distmode].dmgDistributions[this.phaseindex];},dmgdisttarget:function(){var cacheID=this.phaseindex+'-'+this.distmode+'-';cacheID+=getTargetCacheID(this.activetargets);if(this.cacheTarget.has(cacheID)){return this.cacheTarget.get(cacheID);}
var dist={contributedDamage:0,contributedBreakbarDamage:0,contributedShieldDamage:0,totalDamage:0,totalBreakbarDamage:0,totalCasting:0,distribution:[],};var rows=new Map();for(var i=0;i<this.activetargets.length;i++){var targetid=this.activetargets[i];var targetDist=this.distmode===-1?this.player.details.dmgDistributionsTargets[this.phaseindex][targetid]:this.player.details.minions[this.distmode].dmgDistributionsTargets[this.phaseindex][targetid];dist.contributedDamage+=targetDist.contributedDamage;dist.contributedBreakbarDamage+=targetDist.contributedBreakbarDamage;dist.totalDamage+=targetDist.totalDamage;dist.totalBreakbarDamage+=targetDist.totalBreakbarDamage;dist.contributedShieldDamage+=targetDist.contributedShieldDamage;dist.totalCasting=targetDist.totalCasting;var distribution=targetDist.distribution;for(var k=0;k<distribution.length;k++){var targetDistribution=distribution[k];if(rows.has(targetDistribution[1])){var row=rows.get(targetDistribution[1]);row[2]+=targetDistribution[2];row[3]=Math.min(targetDistribution[3],row[3]);row[4]=Math.max(targetDistribution[4],row[4]);row[6]+=targetDistribution[6];row[7]+=targetDistribution[7];row[8]+=targetDistribution[8];row[9]+=targetDistribution[9];row[12]+=targetDistribution[12];row[13]+=targetDistribution[13];row[14]+=targetDistribution[14];row[16]+=targetDistribution[16];row[17]+=targetDistribution[17];}else{rows.set(targetDistribution[1],targetDistribution.slice(0));}}}
rows.forEach(function(value,key,map){dist.distribution.push(value);});dist.contributedDamage=Math.max(dist.contributedDamage,0);dist.totalDamage=Math.max(dist.totalDamage,0);dist.contributedShieldDamage=Math.max(dist.contributedShieldDamage,0);dist.totalCasting=Math.max(dist.totalCasting,0);this.cacheTarget.set(cacheID,dist);return dist;}},});}
{Vue.component("damagedist-table-component",{props:["dmgdist","tableid","actorindex","minionindex","istarget","phaseindex","player"],template:`    <div>        <div v-if="actor !== null" class="mb-1 mt-1">            <div v-if="isminion">                <p style="display: table-row;">                    {{actor.name}} did {{round3(100*dmgdist.contributedDamage/dmgdist.totalDamage)}}% of its master's total                    {{istarget ? 'Target' :''}} damage ({{dmgdist.contributedDamage}})                </p>                <p v-if="hasBreakbarDamage && dmgdist.contributedBreakbarDamage > 0" style="display: table-row;">                    {{actor.name}} did {{round3(100*dmgdist.contributedBreakbarDamage/dmgdist.totalBreakbarDamage)}}% of its master's total                    {{istarget ? 'Target' :''}} breakbar damage ({{round1(dmgdist.contributedBreakbarDamage)}})                </p>            </div>            <div v-else>                <p style="display: table-row;">                    {{actor.name}} did {{round3(100*dmgdist.contributedDamage/dmgdist.totalDamage)}}% of their total {{istarget ?                        'Target' :''}} damage ({{dmgdist.contributedDamage}})                </p>                              <p v-if="hasBreakbarDamage && dmgdist.contributedBreakbarDamage > 0" style="display: table-row;">                    {{actor.name}} did {{round3(100*dmgdist.contributedBreakbarDamage/dmgdist.totalBreakbarDamage)}}% of their total                    {{istarget ? 'Target' :''}} breakbar damage ({{round1(dmgdist.contributedBreakbarDamage)}})                </p>            </div>        </div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="text-left" :class="getHeaderClass('Skill')" @click="sortBy('Skill')">                        Skill                    </th>                    <th class="damage-dist-cell"                          :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0, x => getDamage(x))"                        data-original-title="% Damage">                        % <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 1)" @click="sortBy('Data', 1, x => getDamage(x))"                        data-original-title="Damage">                        <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2, x => getBarrierDamage(x))"                        data-original-title="Damage against barrier. Not necessarily included in total damage">                        <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png"                            alt="Barrier Damage" class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 3)" @click="sortBy('Data', 3, x => getMinDamage(x))"                            data-original-title="Minimum Damage">                        Min <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4, x => round(getDamage(x)/getConnectedHits(x)))"                         data-original-title="Average Damage">                        Avg <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5, x => getMaxDamage(x))"                            data-original-title="Maximum Damage">                        Max <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                        class="icon">                    </th>                    <th v-if="hasBreakbarDamage" class="damage-dist-cell"                          :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6, x => getBreakbarDamage(x))"                            data-original-title="% Breakbar Damage">                        % <img src="https://wiki.guildwars2.com/images/a/ae/Unshakable.png" alt="Breakbar"                        class="icon">                    </th>                    <th v-if="hasBreakbarDamage" class="damage-dist-cell"                          :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7, x => getBreakbarDamage(x))"                         data-original-title="Breakbar Damage">                        <img src="https://wiki.guildwars2.com/images/a/ae/Unshakable.png" alt="Breakbar"                        class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 8)" @click="sortBy('Data', 8, x => getCast(x))"                        v-if="actor !== null">                        Cast                    </th>                    <th class="damage-dist-cell"                        :class="getHeaderClass('Data', 9)" @click="sortBy('Data', 9, x => getConnectedHits(x))">                        Hits                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 10)" @click="sortBy('Data', 10, x => round2(getConnectedHits(x)/getCast(x)))"                        data-original-title="Hits per Cast">                        <img src="https://wiki.guildwars2.com/images/thumb/5/53/Number_of_targets.png/20px-Number_of_targets.png"                            alt="Hits per Cast" class="icon icon-hover">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 11)" @click="sortBy('Data', 11, x => round2(getDamage(x)/(0.001 * getCastDuration(x))))"                        data-original-title="Damage divided by time spent in animation">                        <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                            class="icon">                        /                        <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                            class="icon">                    </th>                                     <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 18)" @click="sortBy('Data', 18, x => getMinCastingTimeNoInterrupt(x))"                            data-original-title="Minimum Casting Time (No interrupted skills)">                        Min <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 19)" @click="sortBy('Data', 19, x => round3(0.001 * getCastDurationNoInterrupt(x) / getCastNoInterrupt(x) ))"                         data-original-title="Average Casting Time (No interrupted skills)">                        Avg <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 20)" @click="sortBy('Data', 20, x => getMaxCastingTimeNoInterrupt(x))"                            data-original-title="Maximum Casting Time (No interrupted skills)">                        Max <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Activation Time"                        class="icon">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 12)" @click="sortBy('Data', 12, x => round2(getCriticalHits(x)*100/getConnectedHits(x)))"                        data-original-title="Percent time hits critical">                        <img src="https://wiki.guildwars2.com/images/9/95/Critical_Chance.png" alt="Crits"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 13)" @click="sortBy('Data', 13, x => round2(getFlankingHits(x)*100/getConnectedHits(x)))"                        data-original-title="Percent time hits while flanking">                        <img src="https://wiki.guildwars2.com/images/b/bb/Hunter%27s_Tactics.png" alt="Flank"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 14)" @click="sortBy('Data', 14, x => round2(getGlancingHits(x)*100/getConnectedHits(x)))"                        data-original-title="Percent time hits while glancing">                        <img src="https://wiki.guildwars2.com/images/f/f9/Weakness.png" alt="Glance"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell"                         :class="getHeaderClass('Data', 15)" @click="sortBy('Data', 15, x => round2(100 * getAgainstMovingHits(x)/getConnectedHits(x)))"                        data-original-title="Damage against moving">                        <img src="https://i.imgur.com/11uAbd4.png"                            alt="Against Moving" class="icon icon-hover">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 16)" @click="sortBy('Data', 16, x => getCastTimeWasted(x))"                        data-original-title="Time wasted interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/b/b3/Out_Of_Health_Potions.png" alt="Wasted"                            class="icon icon-hover">                    </th>                    <th class="damage-dist-cell" v-if="actor !== null"                         :class="getHeaderClass('Data', 17)" @click="sortBy('Data', 17, x => getCastTimeSaved(x))"                        data-original-title="Time saved(in seconds) interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/e/eb/Ready.png" alt="Saved"                            class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(dmgdist.distribution)" :class="{condi: getSkill(row).condi}">                    <td class="text-left" :class="getBodyClass('Skill')"                        :data-original-title="getSkill(row).name + ' ' + getSkillID(row)">                        <img :src="getSkill(row).icon" class="icon">                        {{getSkill(row).name.length > 15 ? (getSkill(row).name.slice(0, 15)) + '...': getSkill(row).name}}                    </td>                    <td :class="getBodyClass('Data', 0)">                        {{ round3(100*getDamage(row)/dmgdist.contributedDamage) }}%                    </td>                    <td :class="getBodyClass('Data', 1)"                        :data-original-title="round2(getDamage(row)/phase.durationS) +' dps'">                        {{ getDamage(row) }}                    </td>                    <td :class="getBodyClass('Data', 2)"                        :data-original-title="round2(getBarrierDamage(row)/phase.durationS) +' dps'">                        {{ getBarrierDamage(row) }}                    </td>                    <td :class="getBodyClass('Data', 3)">                        {{ getMinDamage(row) }}                    </td>                    <td :class="getBodyClass('Data', 4)">                        {{ round(getDamage(row)/getConnectedHits(row)) }}                    </td>                    <td :class="getBodyClass('Data', 5)">                        {{ getMaxDamage(row) }}                    </td>                    <td :class="getBodyClass('Data', 6)" v-if="hasBreakbarDamage">                        {{ round3(100*getBreakbarDamage(row)/dmgdist.contributedBreakbarDamage) }}%                    </td>                    <td :class="getBodyClass('Data', 7)" v-if="hasBreakbarDamage"                         :data-original-title="round2(getBreakbarDamage(row)/phase.durationS) +' bps'">                        {{ getBreakbarDamage(row) }}                    </td>                    <td :class="getCastBodyClass('Data', 8, row)" v-if="actor !== null">                        {{ (!getSkill(row).condi && getCast(row)) ? getCast(row) : ''}}                    </td>                    <td :class="getBodyClass('Data', 9)"                         :data-original-title="(getAllHits(row) - getConnectedHits(row)) + ' hit(s) not connected'">                        {{ getConnectedHits(row) }}                    </td>                    <td :class="getHitsPerCastBodyClass('Data', 10, row)" v-if="actor !== null"                         :data-original-title=" (!getSkill(row).condi && getAllHits(row) && getCast(row)) ? (showInequality(row) ? '<= ' : '') + round2(getAllHits(row)/getCast(row)) + ' with missed hits' : false" >                        {{(!getSkill(row).condi && getConnectedHits(row) && getCast(row)) ? round2(getConnectedHits(row)/getCast(row)) : ''}}                    </td>                    <td :class="getBodyClass('Data', 11)" v-if="actor !== null">                        {{(!getSkill(row).condi && getConnectedHits(row) && getCastDuration(row)) ? round2(getDamage(row)/(0.001 * getCastDuration(row))) : ''}}                    </td>                                  <td :class="getBodyClass('Data', 18)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getMinCastingTimeNoInterrupt(row)) + 's': ' '}}                    </td>                    <td :class="getBodyClass('Data', 19)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getCastDurationNoInterrupt(row) / getCastNoInterrupt(row) ) + 's'  : ' '}}                    </td>                    <td :class="getBodyClass('Data', 20)" v-if="actor !== null" >                        {{ getCastDurationNoInterrupt(row) ? round3(0.001 * getMaxCastingTimeNoInterrupt(row)) + 's'  : ' '}}                    </td>                    <td :class="getBodyClass('Data', 12)"                         :data-original-title="(!getSkill(row).condi && getConnectedHits(row)) ? getCriticalHits(row) +' out of ' + getConnectedHits(row) + ' connected hit(s) <br> Damage: ' + getCriticalDamage(row) + '<br>' + round2(getCriticalDamage(row)*100/getDamage(row)) + '% of skill damage' : false">                        {{(!getSkill(row).condi && getConnectedHits(row)) ? round2(getCriticalHits(row)*100/getConnectedHits(row)) + '%' : ''}}                    </td>                    <td :class="getBodyClass('Data', 13)"                         :data-original-title="(!getSkill(row).condi && getConnectedHits(row)) ? getFlankingHits(row) +' out of ' + getConnectedHits(row) + ' connected hit(s)': false">                        {{(!getSkill(row).condi && getConnectedHits(row)) ? round2(getFlankingHits(row)*100/getConnectedHits(row)) + '%' : ''}}                    </td>                    <td :class="getBodyClass('Data', 14)"                         :data-original-title="(!getSkill(row).condi && getConnectedHits(row)) ? getGlancingHits(row) +' out of ' + getConnectedHits(row) + ' connected hit(s)': false">                        {{(!getSkill(row).condi && getConnectedHits(row)) ? round2(getGlancingHits(row)*100/getConnectedHits(row)) + '%' : ''}}                    </td>                    <td :class="getBodyClass('Data', 15)"                         :data-original-title="getAgainstMovingHits(row) +' out of ' + getConnectedHits(row) + ' connected hit(s)'">                        {{getConnectedHits(row) ? (round2(100 * getAgainstMovingHits(row)/getConnectedHits(row)) + '%') : ''}}                    </td>                    <td :class="getBodyClass('Data', 16)"  v-if="actor !== null"                        :data-original-title="getCastTimeWasted(row) ? round2(100.0 * getCastTimeWasted(row)/phase.durationS) + '% of the phase' : false">                        {{ getCastTimeWasted(row) ? getCastTimeWasted(row) + 's' : ''}}                    </td>                    <td :class="getBodyClass('Data', 17)" v-if="actor !== null"                        :data-original-title="getCastTimeSaved(row) ? round2(100.0 * getCastTimeSaved(row)/phase.durationS) + '% of the phase' : false">                        {{ getCastTimeSaved(row) ? getCastTimeSaved(row) + 's' : ''}}                    </td>                </tr>            </tbody>            <tfoot class="text-dark">                <tr>                    <td class="text-left">                        Total                    </td>                    <td></td>                    <td :data-original-title="Math.round(dmgdist.contributedDamage/phase.durationS) +' dps'">                        {{dmgdist.contributedDamage}}                    </td>                    <td :data-original-title="Math.round(dmgdist.contributedShieldDamage/phase.durationS) +' dps'">                        {{dmgdist.contributedShieldDamage}}                    </td>                    <td></td>                    <td></td>                    <td></td>                       <td v-if="hasBreakbarDamage"></td>                    <td v-if="hasBreakbarDamage" :data-original-title="Math.round(dmgdist.contributedBreakbarDamage/phase.durationS) +' bps'">                        {{dmgdist.contributedBreakbarDamage}}                    </td>                    <td v-if="actor !== null"></td>                               <td></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null">                        {{round2(dmgdist.contributedDamage/(0.001 * dmgdist.totalCasting))}}                    </td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                    <td></td>                    <td></td>                    <td></td>                    <td></td>                    <td v-if="actor !== null"></td>                    <td v-if="actor !== null"></td>                </tr>            </tfoot>        </table>    </div>`,data:function(){return{sortdata:{order:"desc",index:1,key:'Data',sortFunc:row=>this.getDamage(row),}};},mixins:[numberComponent,sortedTableComponent,sortedDistributionComponent],methods:{getSkillID:function(data){return data[1];},getSkillIsBuff:function(data){return data[0]},getSkill:function(data){return findSkill(this.getSkillIsBuff(data),this.getSkillID(data));},showInequality:function(data){return this.getCastDuration(data)===0&&this.getSkill(data).notAccurate;},getConnectedHits:function(data){return data[6];},getCastDuration:function(data){return data[15];},getCastDurationNoInterrupt:function(data){return data[20];},getDamage:function(data){return data[2];},getCriticalDamage:function(data){return data[13];},getMinDamage:function(data){return data[3];},getMaxDamage:function(data){return data[4];},getBarrierDamage:function(data){return data[12];},getBreakbarDamage:function(data){return data[17];},getAllHits:function(data){return data[14];},getCriticalHits:function(data){return data[7];},getFlankingHits:function(data){return data[8];},getGlancingHits:function(data){return data[9];},getAgainstMovingHits:function(data){return data[16];},getCast:function(data){return data[5];},getCastNoInterrupt:function(data){return data[21];},getCastTimeWasted:function(data){return data[10];},getMinCastingTimeNoInterrupt:function(data){return data[18];},getMaxCastingTimeNoInterrupt:function(data){return data[19];},getCastTimeSaved:function(data){return data[11];}},computed:{phase:function(){return logData.phases[this.phaseindex];},isminion:function(){return this.minionindex>-1;},actor:function(){if(this.actorindex<0){return null;}
var master=!this.player?logData.targets[this.actorindex]:logData.players[this.actorindex];if(this.isminion){return master.minions[this.minionindex];}
return master;},hasBreakbarDamage:function(){return logData.hasBreakbarDamage;},}});}
{Vue.component('dmgdist-target-component',{props:['targetindex','phaseindex'],template:`    <div>        <div v-if="target.minions.length > 0">            <ul class="nav nav-tabs">                <li>                    <a class="nav-link" :class="{active: distmode === -1}" @click="distmode = -1">{{target.name}}</a>                </li>                <li v-for="(minion, mindex) in target.minions">                    <a class="nav-link" :class="{active: distmode === mindex}"                        @click="distmode = mindex">{{minion.name}}</a>                </li>            </ul>        </div>        <damagedist-table-component :dmgdist="dmgdist" :tableid="'dmgdist-target-' + targetindex"            :actorindex="targetindex" :minionindex="distmode"             :player="false" :istarget="false"            :phaseindex="phaseindex"></damagedist-table-component>    </div>`,data:function(){return{distmode:-1};},computed:{target:function(){return logData.targets[this.targetindex];},dmgdist:function(){if(this.distmode===-1){return this.target.details.dmgDistributions[this.phaseindex];}
return this.target.details.minions[this.distmode].dmgDistributions[this.phaseindex];}},});}
{Vue.component("dmgmodifier-table-component",{props:['phaseindex','id','playerindex','playerindices','activetargets','modifiers','modifiersdata','mode','sum'],mixins:[numberComponent,sortedTableComponent,colSliderComponent(20)],template:`    <div>        <div v-if="colPageCount > 0">            <table-scroll-component :min="0" :max="colPageCount" :width="'600px'" :height="'10px'" :transform="'translate(500px)'" :pagestructure="colStructure"></table-scroll-component>        </div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">Sub</th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')"></th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">Name</th>                    <th class="stat-cell" v-for="(modifier, index) in modifiers" :class="getHeaderClass('Data', index)"                         v-show="isInColPage(index)"                        @click="sortBy('Data', index)":data-original-title="modifier.name + '<br>' + modifier.tooltip">                        <img :src="modifier.icon" :alt="modifier.name" class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData((mode ? tableDataTarget.rows : tableData.rows))"                    :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">{{row.player.group}}</td>                    <td :class="getBodyClass('Prof')":data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">{{row.player.profession}}</span>                    </td>                    <td :class="getBodyClass('Name')"class="text-left">{{row.player.name}}</td>                    <td v-for="(modifier, index) in modifiers" :class="getBodyClass('Data', index, modifier.approximate, getCellValue(row.data[index], modifier))"                        v-show="isInColPage(index)"                        :data-original-title="getTooltip(row.data[index], modifier)">                        {{getCellValue(row.data[index], modifier)}}                    </td>                </tr>            </tbody>            <tfoot v-if="sum">                <tr v-for="row in (mode ? tableDataTarget.sums : tableData.sums)">                    <td></td>                    <td></td>                    <td class="text-left">{{row.name}}</td>                    <td v-for="(modifier, index) in modifiers" :class="getSumClass(modifier.approximate,getCellValue(row.data[index], modifier))"                        v-show="isInColPage(index)"                        :data-original-title="getTooltip(row.data[index], modifier)">                        {{getCellValue(row.data[index], modifier)}}                    </td>                </tr>            </tfoot>        </table>    </div>`,data:function(){return{cache:new Map(),cacheTarget:new Map(),sortdata:{order:"asc",index:-1,key:"Prof"}};},computed:{tableid:function(){return this.id;},phase:function(){return logData.phases[this.phaseindex];},colPageCount:function(){return this.modifiers.length-this.colStructure.perpage;},indicesToUse:function(){var res=[];if(this.playerindices!==null){for(var i=0;i<this.playerindices.length;i++){res.push(this.playerindices[i]);}
return res;}
for(var i=0;i<logData.players.length;i++){res.push(i);}
return res;},tableData:function(){if(this.cache.has(this.phaseindex)){return this.cache.get(this.phaseindex);}
var rows=[];var sums=[];var groups=[];var total={name:"Total",data:[]};var j;for(var i=0;i<this.indicesToUse.length;i++){var index=this.indicesToUse[i];var player=logData.players[index];if(player.isFake){continue;}
if(!player.notInSquad&&!groups[player.group]){groups[player.group]={name:"Group"+player.group,data:[]};}
var dmgModifier=this.modifiersdata[index].data;var data=[];for(j=0;j<this.modifiers.length;j++){data[j]=dmgModifier[j];if(!player.notInSquad){if(!groups[player.group].data[j]){groups[player.group].data[j]=[0,0,0,0];}
if(!total.data[j]){total.data[j]=[0,0,0,0];}
for(var k=0;k<data[j].length;k++){groups[player.group].data[j][k]+=data[j][k];total.data[j][k]+=data[j][k];}}}
rows.push({player:player,data:data});}
for(var i=0;i<groups.length;i++){if(groups[i]){sums.push(groups[i]);}}
sums.push(total);var res={rows:rows,sums:sums};this.cache.set(this.phaseindex,res);return res;},tableDataTarget:function(){var cacheID=this.phaseindex+'-';cacheID+=getTargetCacheID(this.activetargets);if(this.cacheTarget.has(cacheID)){return this.cacheTarget.get(cacheID);}
var rows=[];var sums=[];var groups=[];var total={name:"Total",data:[]};var j;for(var i=0;i<this.indicesToUse.length;i++){var index=this.indicesToUse[i];var player=logData.players[index];if(player.isFake){continue;}
if(!player.notInSquad&&!groups[player.group]){groups[player.group]={name:"Group"+player.group,data:[]};}
var data=[];for(j=0;j<this.modifiers.length;j++){data[j]=[0,0,0,0];if(!player.notInSquad){if(!groups[player.group].data[j]){groups[player.group].data[j]=[0,0,0,0];}
if(!total.data[j]){total.data[j]=[0,0,0,0];}}}
var dmgModifier=this.modifiersdata[index].dataTarget;for(j=0;j<this.activetargets.length;j++){var modifier=dmgModifier[this.activetargets[j]];for(var k=0;k<this.modifiers.length;k++){var targetData=modifier[k];var curData=data[k];for(var l=0;l<targetData.length;l++){curData[l]+=targetData[l];}}}
if(!player.notInSquad){for(j=0;j<this.modifiers.length;j++){for(var k=0;k<data[j].length;k++){groups[player.group].data[j][k]+=data[j][k];total.data[j][k]+=data[j][k];}}}
rows.push({player:player,data:data});}
for(var i=0;i<groups.length;i++){if(groups[i]){sums.push(groups[i]);}}
sums.push(total);var res={rows:rows,sums:sums};this.cacheTarget.set(cacheID,res);return res;}},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index,approximate,cellValue){var classes=this.getBodyClassBase(this.sortdata,key,index);classes.approximate=cellValue!=="-"&&cellValue!=="Tooltip"?!!approximate:false;return classes;},getSumClass:function(approximate,cellValue){var classes={};classes.approximate=cellValue!=="-"&&cellValue!=="Tooltip"?!!approximate:false;return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Data":var index=this.sortdata.index;var modifier=this.modifiers[index];rows.sort((x,y)=>order*this.getCellValue(x.data[index],modifier).localeCompare(this.getCellValue(y.data[index],modifier)));break;default:return null;break;}
return rows;},getTooltip:function(item,mod){if(item[0]===0){return null;}
var hits=item[0]+" out of "+item[1]+" hits";var percent;if(mod.skillBased){percent=this.round3(1000.0*item[1]/this.phase.duration)+" hits/s";}else{percent=this.round3(100.0*item[0]/item[1])+" hit %";}
var res=hits+"<br>"+percent;if(item[2]===0){return res;}
var gain;if(mod.nonMultiplier){gain="Damage Done: ";}else{gain="Pure Damage: ";}
gain+=this.round(item[2]);if(mod.nonMultiplier){gain+="<br>Total Damage: "+this.round3(100.0*item[2]/item[3])+"%";}
return res+"<br>"+gain;},getCellValue:function(item,mod){if(item[2]===0){if(item[0]>0){return 'Tooltip';}
return '-';}
if(mod.nonMultiplier){return 'Tooltip';}
var damageIncrease=this.round3(100*(item[3]/(item[3]-item[2])-1.0));if(Math.abs(damageIncrease)<1e-6||isNaN(damageIncrease)||!isFinite(damageIncrease)){return "-";}
return damageIncrease+'%';}},});}
{Vue.component("dmgmodifier-stats-component",{props:['phaseindex','playerindex','activetargets'],template:`    <div>        <ul class="nav nav-tabs">            <li v-if="itemModifiers.length > 0">                <a class="nav-link" :class="{active: displayMode === 0}" @click="displayMode = 0"> Gear Based Damage                    Modifiers </a>            </li>            <li v-if="commonModifiers.length > 0">                <a class="nav-link" :class="{active: displayMode === 1}" @click="displayMode = 1"> Shared Damage                    Modifiers </a>            </li>            <li>                <a class="nav-link" :class="{active: displayMode === 2}" @click="displayMode = 2"> Class Based Damage                    Modifiers </a>            </li>        </ul>        <ul v-if="!targetless" class="nav nav-pills d-flex flex-row justify-content-center mt-1 mb-1 scale85">            <li class="nav-item">                <a class="nav-link" @click="mode = 1" :class="{active: mode}">Target</a>            </li>            <li class="nav-item">                <a class="nav-link" @click="mode = 0" :class="{active: !mode }">All</a>            </li>        </ul>        <keep-alive>            <dmgmodifier-table-component v-if="displayMode === 0" :key="'gear'" :phaseindex="phaseindex"                :playerindex="playerindex" :activetargets="activetargets" :mode="mode"                :id="'damage-modifier-item-table'" :playerindices="null" :modifiers="itemModifiers"                :modifiersdata="phase.dmgModifiersItem" :sum="true"></dmgmodifier-table-component>            <dmgmodifier-table-component v-if="displayMode === 1" :key="'common'" :phaseindex="phaseindex"                :playerindex="playerindex" :activetargets="activetargets" :mode="mode"                :id="'damage-modifier-common-table'" :playerindices="null" :modifiers="commonModifiers"                :modifiersdata="phase.dmgModifiersCommon" :sum="true"></dmgmodifier-table-component>            <dmgmodifier-persstats-component v-if="displayMode === 2" :key="'pers'" :phaseindex="phaseindex"                :playerindex="playerindex" :activetargets="activetargets" :mode="mode">            </dmgmodifier-persstats-component>        </keep-alive>    </div>`,data:function(){return{mode:logData.targetless?0:1,targetless:logData.targetless,displayMode:logData.dmgModifiersItem.length>0?0:logData.dmgModifiersCommon.length>0?1:2};},computed:{phase:function(){return logData.phases[this.phaseindex];},commonModifiers:function(){var modifiers=[];for(var i=0;i<logData.dmgModifiersCommon.length;i++){modifiers.push(logData.damageModMap['d'+logData.dmgModifiersCommon[i]]);}
return modifiers;},itemModifiers:function(){var modifiers=[];for(var i=0;i<logData.dmgModifiersItem.length;i++){modifiers.push(logData.damageModMap['d'+logData.dmgModifiersItem[i]]);}
return modifiers;}}});}
{Vue.component("dmgmodifier-persstats-component",{props:['phaseindex','playerindex','activetargets','mode'],template:`    <div>        <ul class="nav nav-pills d-flex flex-row justify-content-center mt-1 mb-1 scale85">            <li v-for="base in bases" class="nav-item">                <a class="nav-link" @click="specmode = base" :class="{active: specmode === base}">{{ base }}</a>            </li>        </ul>        <div>            <div v-for="(spec, index) in orderedSpecs" class="mt-1 mb-1">                <div v-show="specToBase[spec.name] === specmode">                    <h3 class="text-center">{{ spec.name }}</h3>                    <dmgmodifier-table-component :phaseindex="phaseindex" :playerindex="playerindex"                        :activetargets="activetargets" :mode="mode" :id="'damage-modifier-pers-table-'+spec.name"                        :modifiers="personalModifiers[index]" :playerindices="spec.ids"                        :modifiersdata="phase.dmgModifiersPers" :sum="false"></dmgmodifier-table-component>                </div>            </div>        </div>    </div>`,data:function(){return{bases:[],specmode:"Warrior",specToBase:specToBase};},computed:{phase:function(){return logData.phases[this.phaseindex];},orderedSpecs:function(){var res=[];var aux=new Set();for(var i=0;i<specs.length;i++){var spec=specs[i];var pBySpec=[];for(var j=0;j<logData.players.length;j++){if(logData.players[j].profession===spec&&logData.phases[0].dmgModifiersPers[j].data.length>0){pBySpec.push(j);}}
if(pBySpec.length){aux.add(specToBase[spec]);res.push({ids:pBySpec,name:spec});}}
this.bases=[];var _this=this;aux.forEach(function(value,value2,set){_this.bases.push(value);});this.specmode=this.bases[0];return res;},personalModifiers:function(){var res=[];for(var i=0;i<this.orderedSpecs.length;i++){var spec=this.orderedSpecs[i];var data=[];for(var j=0;j<logData.dmgModifiersPers[spec.name].length;j++){data.push(logData.damageModMap['d'+logData.dmgModifiersPers[spec.name][j]]);}
res.push(data);}
return res;}}});}
{Vue.component("damage-stats-component",{props:["activetargets","playerindex","phaseindex"],template:`    <div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">Sub</th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')"></th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">Name</th>                    <th :class="getHeaderClass('Account')" @click="sortBy('Account')">Account</th>                    <th v-if="!targetless" :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0)" data-original-title="Power + Condition" class="damage-cell">                        Target <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="All"                            class="icon">                    </th>                    <th v-if="!targetless" :class="getHeaderClass('Data', 1)" @click="sortBy('Data', 1)" data-original-title="Power" class="damage-cell">                        Target <img src="https://wiki.guildwars2.com/images/2/23/Power.png" alt="Power"                             class="icon">                    </th>                    <th v-if="!targetless" :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2)" data-original-title="Condition" class="damage-cell">                        Target <img src="https://wiki.guildwars2.com/images/5/54/Condition_Damage.png" alt="Condition"                        class="icon">                    </th>                    <th :class="getHeaderClass('Data', 3)" @click="sortBy('Data', 3)" v-if="!targetless && hasBreakbarDamage" data-original-title="Breakbar" class="damage-cell">                        Target <img src="https://wiki.guildwars2.com/images/a/ae/Unshakable.png" alt="Breakbar"                        class="icon">                    </th>                    <th :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4)" data-original-title="Power + Condition" class="damage-cell">                        All <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="All"                        class="icon">                    </th>                    <th :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5)" data-original-title="Power" class="damage-cell">                        All <img src="https://wiki.guildwars2.com/images/2/23/Power.png" alt="Power"                        class="icon">                    </th>                    <th :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6)" data-original-title="Condition" class="damage-cell">                        All <img src="https://wiki.guildwars2.com/images/5/54/Condition_Damage.png" alt="Condition"                        class="icon">                    </th>                    <th :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7)" v-if="hasBreakbarDamage" data-original-title="Breakbar" class="damage-cell">                        All <img src="https://wiki.guildwars2.com/images/a/ae/Unshakable.png" alt="Breakbar"                        class="icon">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(tableData.rows)" :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">{{row.player.group}}</td>                    <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">{{row.player.profession}}</span>                    </td>                    <td :class="getBodyClass('Name')" class="text-left">{{row.player.name}}</td>                    <td :class="getBodyClass('Account')">{{row.player.acc}}</td>                    <td v-if="!targetless" :class="getBodyClass('Data', 0)"                        :data-original-title="getPlayerTooltip(0, row, tableData.sums)">                        {{getPlayerCell(0, row)}}</td>                    <td v-if="!targetless" :class="getBodyClass('Data', 1)"                        :data-original-title="getPlayerTooltip(1, row, tableData.sums)">                        {{getPlayerCell(1, row)}}</td>                    <td v-if="!targetless" :class="getBodyClass('Data', 2)"                        :data-original-title="getPlayerTooltip(2, row, tableData.sums)">                        {{getPlayerCell(2, row)}}</td>                    <td v-if="!targetless && hasBreakbarDamage" :class="getBodyClass('Data', 3)"                        :data-original-title="computeTotalContribution(3, row.dps,tableData.sums)+ '<br>'+ computeGroupContribution(row.player.group, 3, row.dps,tableData.sums)">                        {{round1(row.dps[3])}}                    </td>                    <td :class="getBodyClass('Data', 4)"                        :data-original-title="getPlayerTooltip(4, row, tableData.sums)">                        {{getPlayerCell(4, row)}}</td>                    <td :class="getBodyClass('Data', 5)"                        :data-original-title="getPlayerTooltip(5, row, tableData.sums)">                        {{getPlayerCell(5, row)}}</td>                    <td :class="getBodyClass('Data', 6)"                        :data-original-title="getPlayerTooltip(6, row, tableData.sums)">                        {{getPlayerCell(6, row)}}</td>                    <td v-if="hasBreakbarDamage" :class="getBodyClass('Data', 7)"                        :data-original-title="computeTotalContribution(7, row.dps,tableData.sums)+ '<br>'+ computeGroupContribution(row.player.group, 7, row.dps,tableData.sums)">                        {{round1(row.dps[7])}}                    </td>                </tr>            </tbody>            <tfoot>                <tr v-for="sum in tableData.sums">                    <td></td>                    <td></td>                    <td class="text-left">{{sum.name}}</td>                    <td></td>                    <td v-if="!targetless" :data-original-title="getSumTooltip(0, sum)">                        {{getSumCell(0, sum)}}</td>                    <td v-if="!targetless" :data-original-title="getSumTooltip(1, sum)">                        {{getSumCell(1, sum)}}</td>                    <td v-if="!targetless" :data-original-title="getSumTooltip(2, sum)">                        {{getSumCell(2, sum)}}</td>                    <td v-if="!targetless && hasBreakbarDamage">                        {{round1(sum.dps[3])}}                    </td>                    <td :data-original-title="getSumTooltip(4, sum)">                        {{getSumCell(4, sum)}}</td>                    <td :data-original-title="getSumTooltip(5, sum)">                        {{getSumCell(5, sum)}}</td>                    <td :data-original-title="getSumTooltip(6, sum)">                        {{getSumCell(6, sum)}}</td>                    <td v-if="hasBreakbarDamage">                        {{round1(sum.dps[7])}}                    </td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent],data:function(){return{targetless:logData.targetless,showDamage:logData.wvw,cacheTarget:new Map(),sortdata:{order:"desc",key:"Data",index:logData.targetless?4:0}};},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index,approximate){var classes=this.getBodyClassBase(this.sortdata,key,index);classes.approximate=!!approximate;return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Account":rows.sort((x,y)=>order*x.player.acc.localeCompare(y.player.acc));break;case "Data":var index=this.sortdata.index;rows.sort((x,y)=>order*(x.dps[index]-y.dps[index]));break;default:return null;break;}
return rows;},computeTotalContribution:function(index,row,sums){return this.round2(row[index]*100/sums[sums.length-1].dps[index])+'% of total';},computeGroupContribution:function(groupIndex,index,row,sums){var sumId=0;for(var sumId=0;sumId<sums.length;sumId++){if(sums[sumId].name.includes(groupIndex)){break;}}
return this.round2(row[index]*100/sums[sumId].dps[index])+'% of group';},getPlayerTooltip:function(index,row,sums){return(!this.showDamage?row.dps[index]:this.round(row.dps[index]/this.phase.durationS))+' damage'+
'<br>'+this.computeTotalContribution(index,row.dps,sums)+
'<br>'+this.computeGroupContribution(row.player.group,index,row.dps,sums);},getPlayerCell:function(index,row){return this.showDamage?row.dps[index]:this.round(row.dps[index]/this.phase.durationS)},getSumTooltip:function(index,row){return(!this.showDamage?row.dps[index]:this.round(row.dps[index]/this.phase.durationS))+' damage';},getSumCell:function(index,row){return this.showDamage?row.dps[index]:this.round(row.dps[index]/this.phase.durationS)}},computed:{tableid:function(){return "dps-table";},phase:function(){return logData.phases[this.phaseindex];},hasBreakbarDamage:function(){return logData.hasBreakbarDamage;},tableData:function(){var cacheID=this.phaseindex+'-';cacheID+=getTargetCacheID(this.activetargets);if(this.cacheTarget.has(cacheID)){return this.cacheTarget.get(cacheID);}
var rows=[];var sums=[];var total=[0,0,0,0,0,0,0,0];var groups=[];var i,j;for(i=0;i<this.phase.dpsStats.length;i++){var dpsStat=this.phase.dpsStats[i];var dpsTargetStat=[0,0,0,0];for(j=0;j<this.activetargets.length;j++){var tar=this.phase.dpsStatsTargets[i][this.activetargets[j]];for(var k=0;k<dpsTargetStat.length;k++){dpsTargetStat[k]+=tar[k];}}
var player=logData.players[i];if(!groups[player.group]){groups[player.group]=[0,0,0,0,0,0,0,0];}
var dps=dpsTargetStat.concat(dpsStat);for(j=0;j<dps.length;j++){total[j]+=dps[j];groups[player.group][j]+=dps[j];}
rows.push({player:player,dps:dps});}
for(i=0;i<groups.length;i++){if(groups[i]){sums.push({name:"Group "+i,dps:groups[i]});}}
sums.push({name:"Total",dps:total});var res={rows:rows,sums:sums};this.cacheTarget.set(cacheID,res);return res;}}});}
{Vue.component('dmgtaken-component',{props:['actorindex',"player",'tableid','phaseindex'],template:`    <damagedist-table-component :dmgdist="dmgtaken" :tableid="tableid" :actorindex="-1" :minionindex="-1" :istarget="false" :player="player"        :phaseindex="phaseindex">    </damagedist-table-component>`,computed:{actor:function(){return this.player?logData.players[this.actorindex]:logData.targets[this.actorindex];},dmgtaken:function(){return this.actor.details.dmgDistributionsTaken[this.phaseindex];}},});}
{Vue.component("deathrecap-component",{props:["playerindex","phaseindex"],template:`    <div>        <div v-if="recaps">            <div v-for="index in phaseRecaps">                <h3 v-if="phaseRecaps.length > 1" class="text-center">                    Death #{{index + 1}}                </h3>                <div v-if="!recaps[index].toKill">                    <h3 class="text-center">Player was instantly killed after down</h3>                    <div class="text-center">                        Took {{data.totalDamage.down[index]}}                        damage to go into downstate in                        {{data.totalSeconds.down[index]}} seconds                    </div>                </div>                <div v-else-if="!recaps[index].toDown">                    <h3 class="text-center">Player was instantly killed</h3>                    <div class="text-center">                        Took {{data.totalDamage.kill[index]}}                        damage in {{data.totalSeconds.kill[index]}} seconds before                        dying                    </div>                </div>                <div v-else>                    <div class="text-center">                        Took {{data.totalDamage.down[index]}}                        damage to go into downstate in                        {{data.totalSeconds.down[index]}} seconds                    </div>                    <div class="text-center">                        Took {{data.totalDamage.kill[index]}}                        damage in {{data.totalSeconds.kill[index]}} seconds before                        dying afterwards                    </div>                </div>                <graph-component :id="'deathrecap-' + playerindex + '-' + index" :layout="data.layout"                    :data="[data.data[index]]"></graph-component>            </div>            <div v-show="phaseRecaps === null || phaseRecaps.length === 0">                <h3 class="text-center">Player has never died during this phase</h3>            </div>        </div>        <div v-else>            <h3 class="text-center">Player has never died</h3>        </div>    </div>`,mixins:[numberComponent],computed:{phase:function(){return logData.phases[this.phaseindex];},recaps:function(){return logData.players[this.playerindex].details.deathRecap;},data:function(){if(!this.recaps){return null;}
var res={totalSeconds:{down:[],kill:[]},totalDamage:{down:[],kill:[]},data:[],layout:{}};for(var i=0;i<this.recaps.length;i++){var recap=this.recaps[i];var data={y:[],x:[],type:'bar',textposition:"none",text:[],hoverinfo:'y+text',marker:{color:[]}};var j,totalSec,totalDamage;if(recap.toDown){totalSec=(recap.toDown[0][0]-recap.toDown[recap.toDown.length-1][0])/1000;totalDamage=0;for(j=recap.toDown.length-1;j>=0;j--){totalDamage+=recap.toDown[j][2];data.x.push(this.round3(recap.toDown[j][0]/1000-this.phase.start));data.y.push(recap.toDown[j][2]);data.text.push(recap.toDown[j][3]+' - '+findSkill(recap.toDown[j][4],recap.toDown[j][1]).name);data.marker.color.push('rgb(0,255,0,1)');}
res.totalSeconds.down[i]=totalSec;res.totalDamage.down[i]=totalDamage;}
if(recap.toKill){totalSec=(recap.toKill[0][0]-recap.toKill[recap.toKill.length-1][0])/1000;totalDamage=0;for(j=recap.toKill.length-1;j>=0;j--){totalDamage+=recap.toKill[j][2];data.x.push(this.round3(recap.toKill[j][0]/1000-this.phase.start));data.y.push(recap.toKill[j][2]);data.text.push(recap.toKill[j][3]+' - '+findSkill(recap.toKill[j][4],recap.toKill[j][1]).name);data.marker.color.push(recap.toDown?'rgb(255,0,0,1)':'rgb(0,255,0,1)');}
res.totalSeconds.kill[i]=totalSec;res.totalDamage.kill[i]=totalDamage;}
res.data.push(data);}
res.layout={title:'Damage Taken',font:{color:'#ffffff'},width:1300,height:600,paper_bgcolor:'rgba(0,0,0,0)',plot_bgcolor:'rgba(0,0,0,0)',showlegend:false,bargap:0.05,yaxis:{title:'Damage',tickformat:",d",},xaxis:{title:'Time(seconds)',type:'category',tickmode:'auto',nticks:8,}};return res;},phaseRecaps:function(){if(!this.recaps){return null;}
var res=[];for(var i=0;i<this.recaps.length;i++){var time=this.recaps[i].time/1000.0;if(this.phase.start<=time&&this.phase.end>=time){res.push(i);}}
return res;}}});}
{Vue.component("defense-stats-component",{props:["phaseindex","playerindex"],template:`    <div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">                        Sub                    </th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')">                    </th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">                        Name                    </th>                    <th class="text-left" :class="getHeaderClass('Account')" @click="sortBy('Account')">                        Account                    </th>                    <th class="damage-cell" :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0)"                        data-original-title="Damage taken">                        <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png"                            alt="Damage Taken" class="icon icon-hover">                    </th>                    <th class="damage-cell" :class="getHeaderClass('Data', 1)" @click="sortBy('Data', 1)"                        data-original-title="Damage absorbed by barrier">                        <img src="https://wiki.guildwars2.com/images/thumb/c/cc/Barrier.png/30px-Barrier.png"                            alt="Damage Barrier" class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2)"                        data-original-title="Number of hits missed against">                        <img src="https://wiki.guildwars2.com/images/3/33/Blinded.png" alt="Missed"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 3)" @click="sortBy('Data', 3)"                        data-original-title="Number of times interrupted">                        <img src="https://wiki.guildwars2.com/images/7/79/Daze.png" alt="Interrupted"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4)"                        data-original-title="Number of times was invulnerable to damage">                        <img src="https://wiki.guildwars2.com/images/e/eb/Determined.png" alt="Ivuln"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5)"                        data-original-title="Number of evades">                        <img src="https://wiki.guildwars2.com/images/e/e2/Evade.png" alt="Evaded"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6)"                        data-original-title="Number of times blocked an attack">                        <img src="https://wiki.guildwars2.com/images/e/e5/Aegis.png" alt="Blocked"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7)"                        data-original-title="Number of dodge + mirage cloak">                        <img src="https://wiki.guildwars2.com/images/b/b2/Dodge.png" alt="Dodge"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 8)" @click="sortBy('Data', 8)"                        data-original-title="Condition Cleanse">                        <img src="https://wiki.guildwars2.com/images/1/12/Healing_Spring.png" alt="Condition Cleanse"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 10)" @click="sortBy('Data', 10)"                        data-original-title="Boon Strips">                        <img src="https://wiki.guildwars2.com/images/e/ec/Banish_Enchantment.png" alt="Boon Strips"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 12)" @click="sortBy('Data', 12)"                        data-original-title="Times downed">                        <img src="https://wiki.guildwars2.com/images/c/c6/Downed_enemy.png" alt="Downs"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 16)" @click="sortBy('Data', 16)"                        data-original-title="Damage taken while downed">                        <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                            class="icon">                            &#8658                        <img src="https://wiki.guildwars2.com/images/c/c6/Downed_enemy.png"                            alt="Downed"                             class="icon">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 14)" @click="sortBy('Data', 14)"                        data-original-title="Times died">                        <img src="https://wiki.guildwars2.com/images/4/4a/Ally_death_%28interface%29.png" alt="Dead"                            class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(tableData.rows)" :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">                        {{row.player.group}}                    </td>                    <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">{{row.player.profession}}</span>                    </td>                    <td :class="getBodyClass('Name')" class="text-left">                        {{row.player.name}}                    </td>                    <td :class="getBodyClass('Account')" class="text-left">                        {{row.player.acc}}                    </td>                    <td :class="getBodyClass('Data', 0)">                        {{row.def[0]}}                    </td>                    <td :class="getBodyClass('Data', 1)">                        {{row.def[1]}}                    </td>                    <td :class="getBodyClass('Data', 2)">                        {{row.def[2]}}                    </td>                    <td :class="getBodyClass('Data', 3)">                        {{row.def[3]}}                    </td>                    <td :class="getBodyClass('Data', 4)">                        {{row.def[4]}}                    </td>                    <td :class="getBodyClass('Data', 5)">                        {{row.def[5]}}                    </td>                    <td :class="getBodyClass('Data', 6)">                        {{row.def[6]}}                    </td>                    <td :class="getBodyClass('Data', 7)">                        {{row.def[7]}}                    </td>                    <td :class="getBodyClass('Data', 8)" :data-original-title="row.def[9] + ' seconds'">                        {{row.def[8]}}                    </td>                    <td :class="getBodyClass('Data', 10)" :data-original-title="row.def[11] + ' seconds'">                        {{row.def[10]}}                    </td>                    <td :class="getBodyClass('Data', 12)" :data-original-title="row.def[13]">                        {{row.def[12]}}                    </td>                    <td :class="getBodyClass('Data', 16)">                        {{row.def[16]}}                    </td>                    <td :class="getBodyClass('Data', 14)" :data-original-title="row.def[15]">                        {{row.def[14]}}                    </td>                </tr>            </tbody>            <tfoot>                <tr v-for="sum in tableData.sums">                    <td></td>                    <td></td>                    <td class="text-left">{{sum.name}}</td>                    <td></td>                    <td>{{sum.def[0]}}</td>                    <td>{{sum.def[1]}}</td>                    <td>{{sum.def[2]}}</td>                    <td>                        {{sum.def[3]}}                    </td>                    <td>{{sum.def[4]}}</td>                    <td>{{sum.def[5]}}</td>                    <td>{{sum.def[6]}}</td>                    <td>{{sum.def[7]}}</td>                    <td>{{sum.def[8]}}</td>                    <td>{{sum.def[10]}}</td>                    <td>{{sum.def[12]}}</td>                    <td>{{sum.def[16]}}</td>                    <td>{{sum.def[14]}}</td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent],data:function(){return{cache:new Map(),sortdata:{order:"desc",index:0,key:"Data",}};},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Account":rows.sort((x,y)=>order*x.player.acc.localeCompare(y.player.acc));break;case "Data":var index=this.sortdata.index;rows.sort((x,y)=>order*(x.def[index]-y.def[index]));break;default:return null;break;}
return rows;},},computed:{tableid:function(){return "def-table";},phase:function(){return logData.phases[this.phaseindex];},tableData:function(){if(this.cache.has(this.phaseindex)){return this.cache.get(this.phaseindex);}
var rows=[];var sums=[];var total=[];var groups=[];var i;for(i=0;i<this.phase.defStats.length;i++){var def=this.phase.defStats[i];var player=logData.players[i];if(player.isFake){continue;}
rows.push({player:player,def:def});if(!groups[player.group]){groups[player.group]=[];}
for(var j=0;j<def.length;j++){if(typeof def[j]==='string'){continue;}
total[j]=(total[j]||0)+def[j];groups[player.group][j]=(groups[player.group][j]||0)+def[j];}}
for(i=0;i<groups.length;i++){if(groups[i]){sums.push({name:"Group "+i,def:groups[i]});}}
sums.push({name:"Total",def:total});var res={rows:rows,sums:sums};this.cache.set(this.phaseindex,res);return res;}}});}
{Vue.component("encounter-component",{props:[],template:`    <div class="card fight-summary" style="min-width: 350px;">        <h3 class="card-header text-center">{{ encounter.name }}</h3>        <div class="card-body container">            <div class="d-flex flex-row justify-content-center align-items-center">                <div class="d-flex flex-column mr-3 justify-content-center">                    <div v-if="instanceBuffs" class="d-flex flex-row justify-content-around mb-1">                        <span v-for="instanceBuff in instanceBuffs">                            {{instanceBuff.stack > 1 ? instanceBuff.stack + ' x' : ''}}                            <img :data-original-title="instanceBuff.buff.name + (instanceBuff.buff.description ? '<br> ' + instanceBuff.buff.description : '')"                                 :src="instanceBuff.buff.icon" class="icon icon-hover" />                        </span>                    </div>                    <img class="encounter-icon" :src="encounter.icon" :alt="encounter.name">                </div>                <div class="ml-3 d-flex flex-column justify-content-center">                    <div class="mb-2" v-for="target in encounter.targets">                        <div v-if="encounter.targets.length > 1" class="small" style="text-align:center;">                            {{target.name}}                        </div>                        <div v-if="target.health > 0" class="super-small" style="text-align:center;">                            {{ target.health }} Health                        </div>                        <div :style="{'background': getGradient(target.hpLeft ? target.hpLeft : 0), 'height': '10px', 'width': '100%', 'border-radius': '5px'}">                        </div>                        <div class="small" style="text-align:center;">                            {{ target.hpLeft ? target.hpLeft : 0 }}% remaining                        </div>                    </div>                    <div class="mb-2 text" :class="resultStatus.class">                        Result: {{resultStatus.text}}                    </div>                    <div class="mb-2">Duration: {{ encounter.duration }}</div>                    <div class="mb-2" v-if="fractalScale > 0">Fractal Scale: {{ fractalScale }}</div>                </div>            </div>        </div>    </div>`,methods:{getGradient:function(percent){var template='linear-gradient(to right, $left$, $middle$, $right$)';var greenPercent="green "+(100-percent)+"%";var redPercent="red "+(percent)+"%";var middle=percent+"%";template=template.replace('$right$',greenPercent);template=template.replace('$left$',redPercent);template=template.replace('$middle$',middle);return template;}},computed:{encounter:function(){var targets=[];if(logData.phases[0].targets.length<10&&!logData.targetless){for(var i=0;i<logData.phases[0].targets.length;i++){var targetData=logData.targets[logData.phases[0].targets[i]];targets.push(targetData);}}
var encounter={name:logData.fightName,icon:logData.fightIcon,duration:logData.encounterDuration,targets:targets};return encounter;},fractalScale:function(){return logData.fractalScale;},resultStatus:function(){return logData.success?{text:'Success',class:["text-success"]}:{text:'Failure',class:["text-warning"]};},instanceBuffs:function(){if(logData.instanceBuffs.length==0){return null;}
var res=[];for(var i=0;i<logData.instanceBuffs.length;i++){res.push({buff:findSkill(true,logData.instanceBuffs[i][0]),stack:logData.instanceBuffs[i][1]});}
return res;},}});}
{Vue.component("food-component",{props:["phaseindex","playerindex"],template:`    <div class="mt-2">        <div v-if="data.start.length">            Started with:            <ul>                <li v-for="initial in data.start">                    {{initial.name}} <img class="icon" :alt="initial.name" :data-original-title="initial.description"                        :src="initial.icon">                    {{initial.stack > 1 ? "("+initial.stack+")" : ""}} ({{initial.duration}}                    seconds remaining)                </li>            </ul>        </div>        <div v-if="data.refreshed.length">            In phase consumable updates:            <ul>                <li v-for="refresh in data.refreshed">                    {{refresh.dimished ? 'suffered' : 'consumed'}} {{refresh.name}}                    <img class="icon" :alt="refresh.name" :data-original-title="refresh.description"                        :src="refresh.icon">                    {{refresh.stack > 1 ? "("+refresh.stack+")" : ""}}                    at {{round3(refresh.time - phase.start)}}s ({{refresh.duration}}                    seconds)                </li>            </ul>        </div>        <div v-if="!data.refreshed.length && !data.start.length" class="text-center">            <h3>No consumable activity</h3>        </div>    </div>`,data:function(){return{cache:new Map()};},mixins:[numberComponent],computed:{phase:function(){return logData.phases[this.phaseindex];},food:function(){return logData.players[this.playerindex].details.food;},data:function(){if(this.cache.has(this.phase)){return this.cache.get(this.phase);}
var res={start:[],refreshed:[]};for(var k=0;k<this.food.length;k++){var foodData=this.food[k];if(!foodData.name){var skill=findSkill(true,foodData.id);foodData.name=skill.name;foodData.icon=skill.icon;foodData.description=skill.description;}
if(foodData.time>=this.phase.start&&foodData.time<=this.phase.end){if(foodData.time===0){res.start.push(foodData);}else{res.refreshed.push(foodData);}}}
this.cache.set(this.phase,res);return res;}}});}
{Vue.component("gameplay-stats-component",{props:["playerindex","phaseindex"],template:`    <div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">                        Sub                    </th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')">                    </th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">                        Name                    </th>                    <th class="text-left" :class="getHeaderClass('Account')" @click="sortBy('Account')">                        Account                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0)"                        data-original-title="Time wasted(in seconds) interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/b/b3/Out_Of_Health_Potions.png" alt="Wasted"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2)"                        data-original-title="Time saved(in seconds) interupting skill casts">                        <img src="https://wiki.guildwars2.com/images/e/eb/Ready.png" alt="Saved"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4)"                        data-original-title="Times weapon swapped">                        <img src="https://wiki.guildwars2.com/images/c/ce/Weapon_Swap_Button.png" alt="Swap"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7)"                        data-original-title="% of time in combat spent in animation">                        <img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Animation" class="icon">                        /                        <img src="https://wiki.guildwars2.com/images/9/92/Arena_Proprietor.png" alt="Combat"                            class="icon">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 8)" @click="sortBy('Data', 8)"                        data-original-title="% of time in combat spent in animation, excluding auto attack skills">                        (<img src="https://wiki.guildwars2.com/images/6/6e/Activation.png" alt="Animation" class="icon">                        - <img src="https://wiki.guildwars2.com/images/a/a1/Hammer_Marker_Yellow.png" alt="Auto attack"                            class="icon">)                        /                        <img src="https://wiki.guildwars2.com/images/9/92/Arena_Proprietor.png" alt="Combat"                            class="icon">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5)"                        data-original-title="Average Distance to the center of the squad">                        <img src="https://wiki.guildwars2.com/images/e/ef/Commander_arrow_marker.png" alt="Stack Center"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" v-if="hasCommander" :class="getHeaderClass('Data', 6)"                        @click="sortBy('Data', 6)" data-original-title="Average Distance to the commander">                        <img src="https://wiki.guildwars2.com/images/5/54/Commander_tag_%28blue%29.png"                            alt="Stack Commander" class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(tableData.rows)" :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">                        {{row.player.group}}                    </td>                    <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">{{row.player.profession}}</span>                    </td>                    <td :class="getBodyClass('Name')" class="text-left">                        {{row.player.name}}                    </td>                    <td :class="getBodyClass('Account')" class="text-left">                        {{row.player.acc}}                    </td>                    <td :class="getBodyClass('Data', 0)"                        :data-original-title="row.commons[1] + ' cancels <br>' + round2(100.0 * row.commons[0] / phase.durationS) + '% of the phase'">                        {{row.commons[0]}}                    </td>                    <td :class="getBodyClass('Data', 2)"                        :data-original-title="row.commons[3] + ' cancels <br>' + round2(100.0 * row.commons[2] / phase.durationS) + '% of the phase'">                        {{row.commons[2]}}                    </td>                    <td :class="getBodyClass('Data', 4)">                        {{row.commons[4]}}                    </td>                    <td :class="getBodyClass('Data', 7)">                        {{row.commons[7]}}%                    </td>                    <td :class="getBodyClass('Data', 8)">                        {{row.commons[8]}}%                    </td>                    <td :class="getBodyClass('Data', 5)">                        {{row.commons[5]}}                    </td>                    <td :class="getBodyClass('Data', 6)" v-if="hasCommander">                        {{row.commons[6]}}                    </td>                </tr>            </tbody>            <tfoot>                <tr v-for="row in tableData.sums">                    <td></td>                    <td></td>                    <td class="text-left">{{row.name}}</td>                    <td></td>                    <td :data-original-title="row.commons[1] + ' cancels'">{{round3(row.commons[0])}}</td>                    <td :data-original-title="row.commons[3] + ' cancels'">{{round3(row.commons[2])}}</td>                    <td>{{row.commons[4]}}</td>                    <td></td>                    <td></td>                    <td>{{round2(row.commons[5] / row.count)}}</td>                    <td v-if="hasCommander">{{round2(row.commons[6] / row.count)}}</td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent],data:function(){return{hasCommander:logData.hasCommander,cache:new Map(),sortdata:{order:"desc",index:-1,key:"Prof"}};},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Account":rows.sort((x,y)=>order*x.player.acc.localeCompare(y.player.acc));break;case "Data":var index=this.sortdata.index;rows.sort((x,y)=>order*(x.commons[index]-y.commons[index]));break;default:return null;break;}
return rows;},},computed:{tableid:function(){return "gameplay-table";},phase:function(){return logData.phases[this.phaseindex];},tableData:function(){if(this.cache.has(this.phaseindex)){return this.cache.get(this.phaseindex);}
var rows=[];var sums=[];var groups=[];var total={name:"Total",commons:[],count:0};for(var i=0;i<this.phase.gameplayStats.length;i++){var commons=[];var player=logData.players[i];if(player.isFake){continue;}
if(!groups[player.group]){groups[player.group]={name:"Group "+player.group,commons:[],count:0};}
groups[player.group].count++;total.count++;var stats=this.phase.gameplayStats[i];for(var j=0;j<stats.length;j++){commons[j]=stats[j];groups[player.group].commons[j]=(groups[player.group].commons[j]||0)+commons[j];total.commons[j]=(total.commons[j]||0)+commons[j];}
rows.push({player:player,commons:commons});}
for(var i=0;i<groups.length;i++){if(groups[i]){sums.push(groups[i]);}}
sums.push(total);var res={rows:rows,sums:sums};this.cache.set(this.phaseindex,res);return res;}}});}
{Vue.component("offensive-stats-component",{props:["activetargets","playerindex","phaseindex"],template:`    <div>        <div v-if="!targetless" class="d-flex flex-row justify-content-center mt-1 mb-1">            <ul class="nav nav-pills scale85">                <li class="nav-item">                    <a class="nav-link" @click="mode = 1" :class="{active: mode}">Target</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="mode = 0" :class="{active: !mode }">All</a>                </li>            </ul>        </div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">                        Sub                    </th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')">                    </th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">                        Name                    </th>                    <th class="text-left" :class="getHeaderClass('Account')" @click="sortBy('Account')">                        Account                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2, 1)"                        data-original-title="Percent time hits critical">                        <img src="https://wiki.guildwars2.com/images/9/95/Critical_Chance.png" alt="Crits"                             class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4, 11)"                        data-original-title="Percent time hits while flanking">                        <img src="https://wiki.guildwars2.com/images/b/bb/Hunter%27s_Tactics.png" alt="Flank"                             class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 21)" @click="sortBy('Data', 21, 20)"                        data-original-title="Percent time power hits while self above 90% hp">                        <img src="https://wiki.guildwars2.com/images/2/23/Power.png" alt="Power"                             class="icon"> > 90%                    </th>                        <th class="stat-cell" :class="getHeaderClass('Data', 23)" @click="sortBy('Data', 23, 22)"                        data-original-title="Percent time condition ticks while self above 90% hp">                        <img src="https://wiki.guildwars2.com/images/5/54/Condition_Damage.png" alt="Condition"                             class="icon"> > 90%                    </th>                        <th class="stat-cell" :class="getHeaderClass('Data', 5)" @click="sortBy('Data', 5, 11)"                        data-original-title="Percent time hits while glancing">                        <img src="https://wiki.guildwars2.com/images/f/f9/Weakness.png" alt="Glance"                             class="icon icon-hover">                    </th>                        <th class="stat-cell" :class="getHeaderClass('Data', 14)" @click="sortBy('Data', 14, 15)"                        data-original-title="Times the target got hit while moving">                        <img src="https://i.imgur.com/11uAbd4.png" alt="Against Moving"                             class="icon icon-hover">                    </th>                      <th class="stat-cell" :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6)"                        data-original-title="Number of hits while blinded">                        <img src="https://wiki.guildwars2.com/images/3/33/Blinded.png" alt="Miss"                             class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 7)" @click="sortBy('Data', 7)"                        data-original-title="Number of hits used to interupt">                        <img src="https://wiki.guildwars2.com/images/7/79/Daze.png" alt="Interupts"                                                        class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 8)" @click="sortBy('Data', 8)"                        data-original-title="Times the enemy was invulnerable to attacks">                        <img src="https://wiki.guildwars2.com/images/e/eb/Determined.png" alt="Ivuln"                             class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 9)" @click="sortBy('Data', 9)"                        data-original-title="Times the enemy evaded an attack">                        <img src="https://wiki.guildwars2.com/images/e/e2/Evade.png" alt="Evaded"                             class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 10)" @click="sortBy('Data', 10)"                        data-original-title="Times the enemy blocked an attack">                        <img src="https://wiki.guildwars2.com/images/e/e5/Aegis.png" alt="Blocked"                             class="icon icon-hover">                    </th>                       <th class="stat-cell" v-if="wvw" :class="getHeaderClass('Data', 17)" @click="sortBy('Data', 17)"                        data-original-title="Down Contribution">                         <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                            class="icon">                        /                        <img src="https://wiki.guildwars2.com/images/c/c6/Downed_enemy.png" alt="Down"                            class="icon">                    </th>                              <th class="stat-cell" v-if="wvw" :class="getHeaderClass('Data', 13)" @click="sortBy('Data', 13)"                        data-original-title="Number of times downed target">                        <img src="https://wiki.guildwars2.com/images/c/c6/Downed_enemy.png"                            alt="Downed"                             class="icon icon-hover">                    </th>                       <th class="stat-cell" v-if="wvw" :class="getHeaderClass('Data', 25)" @click="sortBy('Data', 25)"                        data-original-title="Damage against downed target">                        <img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="Damage"                            class="icon">                            &#8658                        <img src="https://wiki.guildwars2.com/images/c/c6/Downed_enemy.png"                            alt="Downed"                             class="icon">                    </th>                               <th class="stat-cell" v-if="wvw" :class="getHeaderClass('Data', 12)" @click="sortBy('Data', 12)"                        data-original-title="Number of times killed target">                        <img src="https://wiki.guildwars2.com/images/4/4a/Ally_death_%28interface%29.png"                            alt="Killed"                             class="icon icon-hover">                    </th>                      </tr>            </thead>            <tbody>                <tr v-for="row in sortData(mode ? tableDataTarget.rows : tableData.rows)"                    :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">                        {{row.player.group}}                    </td>                    <td :class="getBodyClass('Prof')"                        :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">{{row.player.profession}}</span>                    </td>                    <td :class="getBodyClass('Name')" class="text-left">                        {{row.player.name}}                    </td>                    <td :class="getBodyClass('Account')" class="text-left" >                        {{row.player.acc}}                    </td>                    <td :class="getBodyClass('Data', 2)"                        :data-original-title="row.data[2] + ' out of ' + row.data[1] + ' critable hit(s)' +                                    '<br>Total Critical Damage: ' + row.data[3] +                                    '<br>' + round2(100*row.data[3]/ row.data[18]) +'% of total damage' +                                    '<br>' + round2(100*row.data[3]/ row.data[19]) +'% of total direct damage'">                        {{round2(100*row.data[2] / row.data[1])}}%                    </td>                    <td :class="getBodyClass('Data', 4)"                        :data-original-title="row.data[4] + ' out of ' + row.data[11] + ' connected direct hit(s)'">                        {{round2(100*row.data[4]/ row.data[11])}}%                    </td>                    <td :class="getBodyClass('Data', 21)"                        :data-original-title="row.data[21] + ' out of ' + row.data[20] + ' connected power hit(s)'">                        {{round2(100*row.data[21]/ row.data[20])}}%                    </td>                    <td :class="getBodyClass('Data', 23)"                        :data-original-title="row.data[23] + ' out of ' + row.data[22] + ' connected condition tick(s)'">                        {{round2(100*row.data[23]/ row.data[22])}}%                    </td>                    <td :class="getBodyClass('Data', 5)"                        :data-original-title="row.data[5] + ' out of ' + row.data[11] + ' connected direct hit(s)'">                        {{round2(100*row.data[5]/ row.data[11])}}%                    </td>                    <td :class="getBodyClass('Data', 14)"                        :data-original-title="row.data[14] + ' out of ' + row.data[15] + ' connected hit(s)'">                        {{round2(100*row.data[14]/ row.data[15]) + '%' }}                    </td>                    <td :class="getBodyClass('Data', 6)"                        :data-original-title="round2(100*row.data[6]/ row.data[0]) + '% of '+ row.data[0] + ' direct hit(s)'">                        {{row.data[6]}}                    </td>                    <td :class="getBodyClass('Data', 7)">                        {{row.data[7]}}                    </td>                    <td :class="getBodyClass('Data', 8)"                        :data-original-title="round2(100*row.data[8]/ row.data[0]) + '% of '+ row.data[16] + ' hit(s)'">                        {{row.data[8]}}                    </td>                    <td :class="getBodyClass('Data', 9)"                        :data-original-title="round2(100*row.data[9]/ row.data[0]) + '% of '+ row.data[0] + ' direct hit(s)'">                        {{row.data[9]}}                    </td>                    <td :class="getBodyClass('Data', 10)"                        :data-original-title="round2(100*row.data[10]/ row.data[0]) + '% of '+ row.data[0] + ' direct hit(s)'">                        {{row.data[10]}}                    </td>                    <td v-if="wvw" :class="getBodyClass('Data', 17)"                        :data-original-title="round2(100*row.data[17]/ row.data[26]) +'% of total damage'">                        {{row.data[17]}}                    </td>                    <td v-if="wvw" :class="getBodyClass('Data', 13)">                        {{row.data[13]}}                    </td>                    <td v-if="wvw" :class="getBodyClass('Data', 25)"                    :data-original-title="row.data[24] + ' hits<br>' + round2(100*row.data[25]/ row.data[26]) +'% of total damage'">                        {{row.data[25]}}                    </td>                    <td v-if="wvw" :class="getBodyClass('Data', 12)">                        {{row.data[12]}}                    </td>                </tr>            </tbody>            <tfoot>                <tr v-for="row in (mode ? tableDataTarget.sums : tableData.sums)">                    <td></td>                    <td></td>                    <td class="text-left">{{row.name}}</td>                    <td></td>                    <td                        :data-original-title="row.data[2] + ' out of ' + row.data[1] + ' critable hit(s)' +                                    '<br>Total Critical Damage: ' + row.data[3] +                                    '<br>' + round2(100*row.data[3]/ row.data[18]) +'% of total damage' +                                    '<br>' + round2(100*row.data[3]/ row.data[19]) +'% of total direct damage'">                        {{round2(100*row.data[2] / row.data[1])}}%                    </td>                    <td :data-original-title="row.data[4] + ' out of ' + row.data[11] + ' connected direct hit(s)'">                        {{round2(100*row.data[4]/ row.data[11])}}%                    </td>                    <td :data-original-title="row.data[21] + ' out of ' + row.data[20] + ' connected power hit(s)'">                        {{round2(100*row.data[21]/ row.data[20])}}%                    </td>                    <td :data-original-title="row.data[23] + ' out of ' + row.data[22] + ' connected condition tick(s)'">                        {{round2(100*row.data[23]/ row.data[22])}}%                    </td>                    <td :data-original-title="row.data[5] + ' out of ' + row.data[11] + ' connected direct hit(s)'">                        {{round2(100*row.data[5]/ row.data[11])}}%                    </td>                    <td :data-original-title="row.data[14] + ' out of ' + row.data[15] + ' connected hit(s)'">                        {{round2(100*row.data[14]/ row.data[15]) + '%' }}                    </td>                    <td :data-original-title="round2(100*row.data[6]/ row.data[0])+ '% of '+ row.data[0] + ' direct hit(s)'">                        {{row.data[6]}}                    </td>                    <td>                        {{row.data[7]}}                    </td>                    <td :data-original-title="round2(100*row.data[8]/ row.data[0])+ '% of '+ row.data[16] + ' hit(s)'">                        {{row.data[8]}}                    </td>                    <td :data-original-title="round2(100*row.data[9]/ row.data[0])+ '% of '+ row.data[0] + ' direct hit(s)'">                        {{row.data[9]}}                    </td>                    <td :data-original-title="round2(100*row.data[10]/ row.data[0]) + '% of '+ row.data[0] + ' direct hit(s)'">                        {{row.data[10]}}                    </td>                    <td v-if="wvw" :data-original-title="round2(100*row.data[17]/ row.data[26]) +'% of total damage'">                        {{row.data[17]}}                    </td>                    <td v-if="wvw">                        {{row.data[13]}}                    </td>                    <td v-if="wvw" :data-original-title="row.data[24] + ' hits<br>' + round2(100*row.data[25]/ row.data[26]) +'% of total damage'">                        {{row.data[25]}}                    </td>                    <td v-if="wvw">                        {{row.data[12]}}                    </td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent],data:function(){return{targetless:logData.targetless,wvw:logData.wvw,mode:logData.targetless?0:1,cache:new Map(),cacheTarget:new Map(),sortdata:{order:"desc",index:-1,divideIndex:-1,key:"Prof"}};},methods:{sortBy:function(key,index,divideIndex){this.sortByBase(this.sortdata,key,index);this.sortdata.divideIndex=divideIndex>=0?divideIndex:-1;},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Account":rows.sort((x,y)=>order*x.player.acc.localeCompare(y.player.acc));break;case "Data":var index=this.sortdata.index;var divideIndex=this.sortdata.divideIndex;if(divideIndex!==-1){rows.sort((x,y)=>order*(x.data[index]/x.data[divideIndex]-y.data[index]/y.data[divideIndex]));}else{rows.sort((x,y)=>order*(x.data[index]-y.data[index]));}
break;default:return null;break;}
return rows;},},computed:{tableid:function(){return "off-table";},phase:function(){return logData.phases[this.phaseindex];},tableData:function(){if(this.cache.has(this.phaseindex)){return this.cache.get(this.phaseindex);}
var rows=[];var sums=[];var groups=[];var total={name:"Total",data:[],count:0};for(var i=0;i<this.phase.offensiveStats.length;i++){var data=[];var player=logData.players[i];if(player.isFake){continue;}
if(!groups[player.group]){groups[player.group]={name:"Group "+player.group,data:[],count:0};}
groups[player.group].count++;total.count++;var stats=this.phase.offensiveStats[i];for(var j=0;j<stats.length;j++){data[j]=stats[j];groups[player.group].data[j]=(groups[player.group].data[j]||0)+data[j];total.data[j]=(total.data[j]||0)+data[j];}
rows.push({player:player,data:data});}
for(var i=0;i<groups.length;i++){if(groups[i]){sums.push(groups[i]);}}
sums.push(total);var res={rows:rows,sums:sums};this.cache.set(this.phaseindex,res);return res;},tableDataTarget:function(){var cacheID=this.phaseindex+'-';cacheID+=getTargetCacheID(this.activetargets);if(this.cacheTarget.has(cacheID)){return this.cacheTarget.get(cacheID);}
var rows=[];var sums=[];var groups=[];var total={name:"Total",data:[],count:0};for(var i=0;i<this.phase.offensiveStats.length;i++){var data=[];var player=logData.players[i];if(player.isFake){continue;}
if(!groups[player.group]){groups[player.group]={name:"Group "+player.group,data:[],count:0};}
groups[player.group].count++;total.count++;var stats=this.phase.offensiveStats[i];for(var j=0;j<stats.length;j++){if(this.activetargets.length>0){for(var k=0;k<this.activetargets.length;k++){var tar=this.phase.offensiveStatsTargets[i][this.activetargets[k]];data[j]=(data[j]||0)+tar[j];}}else{data[j]=(data[j]||0);}
groups[player.group].data[j]=(groups[player.group].data[j]||0)+data[j];total.data[j]=(total.data[j]||0)+data[j];}
rows.push({player:player,data:data});}
for(var i=0;i<groups.length;i++){if(groups[i]){sums.push(groups[i]);}}
sums.push(total);var res={rows:rows,sums:sums};this.cacheTarget.set(cacheID,res);return res;}}});}
{Vue.component("buff-tables-component",{props:["phaseindex","playerindex"],template:`    <div>        <ul class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: tab === 0}" @click="tab = 0">Boons</a>            </li>            <li v-if="hasOffBuffs">                <a class="nav-link" :class="{active: tab === 1}" @click="tab = 1">Offensive Buffs</a>            </li>            <li v-if="hasSupBuffs">                <a class="nav-link" :class="{active: tab === 2}" @click="tab = 2">Support Buffs</a>            </li>            <li v-if="hasDefBuffs">                <a class="nav-link" :class="{active: tab === 3}" @click="tab = 3">Defensive Buffs</a>            </li>            <li v-if="hasConditions">                <a class="nav-link" :class="{active: tab === 5}" @click="tab = 5">Conditions</a>            </li>            <li v-if="hasGearBuffs">                <a class="nav-link" :class="{active: tab === 4}" @click="tab = 4">Gear Buffs</a>            </li>            <li v-if="hasDebuffs">                <a class="nav-link" :class="{active: tab === 7}" @click="tab = 7">Debuffs</a>            </li>            <li v-if="hasNourishments">                <a class="nav-link" :class="{active: tab === 8}" @click="tab = 8">Nourishments</a>            </li>            <li v-if="hasEnhancements">                <a class="nav-link" :class="{active: tab === 9}" @click="tab = 9">Enhancements</a>            </li>            <li v-if="hasOtherConsumables">                <a class="nav-link" :class="{active: tab === 10}" @click="tab = 10">Other Consumables</a>            </li>            <li v-if="hasPersBuffs">                <a class="nav-link" :class="{active: tab === 6}" @click="tab = 6">Personal Buffs</a>            </li>        </ul>        <div :key="'activeduration'" class="d-flex flex-row justify-content-center mt-1 mb-1" v-if="showActiveDuration">            <ul class="nav nav-pills d-flex flex-row justify-content-center scale85">                <li class="nav-item">                    <a class="nav-link" @click="activeduration = 0" :class="{active: activeduration === 0}">Phase                        duration</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="activeduration = 1" data-original-title="Removed dead time and dc time"                        :class="{active: activeduration === 1 }">Phase active duration</a>                </li>            </ul>        </div>        <keep-alive>            <buff-stats-component v-if="tab < 4" :key="'buffs'" :type="tab" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></buff-stats-component>            <gear-buff-table-component v-if="tab === 4" :key="'gearbuffs'" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></gear-buff-table-component>            <nourishement-buff-table-component v-if="tab === 8" :key="'nourishments'" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></nourishement-buff-table-component>            <enhancement-buff-table-component v-if="tab === 9" :key="'enhancements'" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></enhancement-buff-table-component>            <otherconsumable-buff-table-component v-if="tab === 10" :key="'otherconsumables'" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></otherconsumable-buff-table-component>            <conditions-table-component v-if="tab === 5" :key="'conditions'" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></conditions-table-component>            <debuff-table-component v-if="tab === 7" :key="'debuffs'" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></debuff-table-component>            <personal-buff-table-component v-if="tab === 6" :key="'persbuffs'" :phaseindex="phaseindex"                :playerindex="playerindex" :activeduration="activeduration"></personal-buff-table-component>        </keep-alive>    </div>`,data:function(){return{activeduration:0,tab:0,};},computed:{showActiveDuration:function(){return this.tab<8||this.tab>10;},hasOffBuffs:function(){return logData.offBuffs.length>0;},hasDefBuffs:function(){return logData.defBuffs.length>0;},hasSupBuffs:function(){return logData.supBuffs.length>0;},hasGearBuffs:function(){return logData.gearBuffs.length>0;},hasDebuffs:function(){return logData.debuffs.length>0;},hasConditions:function(){return logData.conditions.length>0;},hasNourishments:function(){return logData.nourishments.length>0;},hasEnhancements:function(){return logData.enhancements.length>0;},hasOtherConsumables:function(){return logData.otherConsumables.length>0;},hasPersBuffs:function(){var hasPersBuffs=false;if(logData.persBuffs){for(var prop in logData.persBuffs){if(logData.persBuffs.hasOwnProperty(prop)&&logData.persBuffs[prop].length>0){hasPersBuffs=true;break;}}}
return hasPersBuffs;},}});}
{Vue.component("stat-tables-component",{props:["phaseindex","playerindex","activetargets"],template:`    <div>        <ul class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: tab === 0}" @click="tab = 0">Damage Stats</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 1}" @click="tab = 1">Gameplay Stats</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 4}" @click="tab = 4">Offensive Stats</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 2}" @click="tab = 2">Defensive Stats</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 3}" @click="tab = 3">Support Stats</a>            </li>        </ul>        <keep-alive>            <damage-stats-component v-if="tab === 0" :key="'damage'" :phaseindex="phaseindex"                :playerindex="playerindex" :activetargets="activetargets"></damage-stats-component>            <gameplay-stats-component v-if="tab === 1" :key="'gameplay'"                :phaseindex="phaseindex" :playerindex="playerindex">            </gameplay-stats-component>            <offensive-stats-component v-if="tab === 4" :key="'offensive'"                 :phaseindex="phaseindex" :playerindex="playerindex" :activetargets="activetargets">            </offensive-stats-component>            <defense-stats-component v-if="tab === 2" :key="'defense'" :phaseindex="phaseindex"                :playerindex="playerindex"></defense-stats-component>            <support-stats-component v-if="tab === 3" :key="'support'" :phaseindex="phaseindex"                :playerindex="playerindex"></support-stats-component>        </keep-alive>    </div>`,data:function(){return{tab:0,};},});}
{Vue.component("mechanics-stats-component",{props:["phaseindex","playerindex"],template:`    <div>        <div v-if="playerColPageCount > 0">            <table-scroll-component :min="0" :max="playerColPageCount" :width="'600px'" :height="'10px'" :transform="'translate(500px)'" :pagestructure="playerColStructure"></table-scroll-component>        </div>        <table v-if="playerMechHeader.length > 0" class="table table-sm table-striped table-hover" cellspacing="0" :id="tablePid">            <thead>                <tr>                    <th class="sub-cell" :class="getPlayerHeaderClass('Sub')" @click="sortPlayerBy('Sub')">Sub</th>                    <th class="prof-cell" :class="getPlayerHeaderClass('Prof')" @click="sortPlayerBy('Prof')"></th>                    <th class="text-left" :class="getPlayerHeaderClass('Name')" @click="sortPlayerBy('Name')">Player</th>                    <th class="stat-cell" v-for="(mech, index) in playerMechHeader"                         v-show="isInPlayerColPage(index)"                        :class="getPlayerHeaderClass('Data', index)" @click="sortPlayerBy('Data', index)" :data-original-title="mech.name + ': ' + mech.description">                        {{ mech.shortName}}                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortPlayerData(playerMechRows)" :class="{active: row.player.id === playerindex}">                    <td :class="getPlayerBodyClass('Sub')">{{row.player.group}}</td>                    <td :class="getPlayerBodyClass('Prof')" :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon">                        <span style="display:none">{{row.player.profession}}</span>                    </td>                    <td :class="getPlayerBodyClass('Name')" class="text-left">{{row.player.name}}</td>                    <td v-for="(mech, index) in row.mechs" :class="getPlayerBodyClass('Data', index)"                         v-show="isInPlayerColPage(index)"                        :data-original-title="mech[1] !== mech[0] ? mech[1] + ' times (multi hits)' : false">                        {{ playerMechHeader[index].isAchievementEligibility ? (mech[0] ? 'Non Eligible' : 'Eligible') : (mech[0] ? mech[0] : '-')}}                    </td>                </tr>            </tbody>        </table>        <div v-if="enemyColPageCount > 0">            <table-scroll-component :min="0" :max="enemyColPageCount" :width="'600px'" :height="'10px'" :transform="'translate(500px)'" :pagestructure="enemyColStructure"></table-scroll-component>        </div>        <table v-if="enemyMechHeader.length > 0" class="table table-sm table-striped table-hover" cellspacing="0" :id="tableEid">            <thead>                <tr>                    <th class="text-left" style="width: 250px;":class="getEnemyHeaderClass('Name')" @click="sortEnemyBy('Name')">Enemy</th>                    <th class="stat-cell" v-for="(mech, index) in enemyMechHeader"                         v-show="isInEnemyColPage(index)"                        :class="getEnemyHeaderClass('Data', index)" @click="sortEnemyBy('Data', index)" :data-original-title="mech.name + ': ' + mech.description">                        {{ mech.shortName}}                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortEnemyData(enemyMechRows)">                    <td :class="getEnemyBodyClass('Name')" class="text-left">{{row.enemy}}</td>                    <td v-for="(mech, index) in row.mechs" :class="getEnemyBodyClass('Data', index)"                                         v-show="isInEnemyColPage(index)"                        :data-original-title="mech[1] !== mech[0] ? mech[1] + ' times (multi hits)' : false">                        {{mech[0] ? mech[0] : '-'}}                    </td>                </tr>            </tbody>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent,colSliderComponent(10,["player","enemy"])],data:function(){return{cacheP:new Map(),cacheE:new Map(),sortEdata:{order:"asc",index:-1,key:"Name",},sortPdata:{order:"asc",index:-1,key:"Sub",}};},methods:{sortPlayerBy:function(key,index){this.sortByBase(this.sortPdata,key,index);},getPlayerHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortPdata,key,index);},getPlayerBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortPdata,key,index);return classes;},sortPlayerData:function(rows){var order=this.sortPdata.order==="asc"?1:-1;switch(this.sortPdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Data":var index=this.sortPdata.index;rows.sort((x,y)=>order*(x.mechs[index][0]-y.mechs[index][0]));break;default:return null;break;}
return rows;},sortEnemyBy:function(key,index){this.sortByBase(this.sortEdata,key,index);},getEnemyHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortEdata,key,index);},getEnemyBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortEdata,key,index);return classes;},sortEnemyData:function(rows){var order=this.sortEdata.order==="asc"?1:-1;switch(this.sortEdata.key){case "Name":rows.sort((x,y)=>order*x.enemy.localeCompare(y.enemy));break;case "Data":var index=this.sortEdata.index;rows.sort((x,y)=>order*(x.mechs[index][0]-y.mechs[index][0]));break;default:return null;break;}
return rows;},},computed:{playerColPageCount:function(){return this.playerMechHeader.length-this.playerColStructure.perpage;},enemyColPageCount:function(){return this.enemyMechHeader.length-this.enemyColStructure.perpage;},tablePid:function(){return "playermechs";},tableEid:function(){return "enemymechs";},phase:function(){return logData.phases[this.phaseindex];},playerMechHeader:function(){var playerMechanics=[];for(var i=0;i<logData.mechanicMap.length;i++){var mech=logData.mechanicMap[i];if(mech.playerMech){playerMechanics.push(mech);}}
return playerMechanics;},playerMechRows:function(){if(this.cacheP.has(this.phaseindex)){return this.cacheP.get(this.phaseindex);}
var players=logData.players;var rows=[];for(var i=0;i<players.length;i++){var player=players[i];if(player.isFake){continue;}
rows.push({player:player,mechs:this.phase.mechanicStats[i]});}
this.cacheP.set(this.phaseindex,rows);return rows;},enemyMechHeader:function(){var enemyMechanics=[];for(var i=0;i<logData.mechanicMap.length;i++){var mech=logData.mechanicMap[i];if(mech.enemyMech){enemyMechanics.push(mech);}}
return enemyMechanics;},enemyMechRows:function(){if(this.cacheE.has(this.phaseindex)){return this.cacheE.get(this.phaseindex);}
var enemies=logData.enemies;var rows=[];for(var i=0;i<enemies.length;i++){var enemy=enemies[i];rows.push({enemy:enemy.name,mechs:this.phase.enemyMechanicStats[i]});}
this.cacheE.set(this.phaseindex,rows);return rows;}}});}
{Vue.component("gear-buff-table-component",{props:['phaseindex','playerindex','activeduration'],template:`    <div>        <buff-table-component :key="'gear-buff-stats-table'" :condition="false" :generation="false"            :id="'gear-buff-stats-table'" :buffs="gears" :playerdata="buffData" :sums="[]" :playerindex="playerindex" :hidecustom="false">        </buff-table-component>    </div>`,data:function(){return{cache:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},gears:function(){var data=[];for(var i=0;i<logData.gearBuffs.length;i++){data[i]=findSkill(true,logData.gearBuffs[i]);}
return data;},buffData:function(){var id=this.phaseindex;if(this.cache.has(id)){return this.cache.get(id);}
var getData=function(stats){var uptimes=[];var i;for(i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
uptimes.push({player:player,data:stats[i]});}
return uptimes;};var res;if(this.activeduration){res=getData(this.phase.gearBuffActiveStats);}else{res=getData(this.phase.gearBuffStats);}
this.cache.set(id,res);return res;}},});}
{Vue.component("nourishement-buff-table-component",{props:['phaseindex','playerindex','activeduration'],template:`    <div>        <buff-table-component :key="'gear-buff-stats-table'" :condition="false" :generation="false"            :id="'gear-buff-stats-table'" :buffs="nourishments" :playerdata="buffData" :sums="[]" :playerindex="playerindex" :hidecustom="false">        </buff-table-component>    </div>`,data:function(){return{cache:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},nourishments:function(){var data=[];for(var i=0;i<logData.nourishments.length;i++){data[i]=findSkill(true,logData.nourishments[i]);}
return data;},buffData:function(){var id=this.phaseindex;if(this.cache.has(id)){return this.cache.get(id);}
var getData=function(stats){var uptimes=[];var i;for(i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
uptimes.push({player:player,data:stats[i]});}
return uptimes;};var res=getData(this.phase.nourishmentStats);this.cache.set(id,res);return res;}},});}
{Vue.component("enhancement-buff-table-component",{props:['phaseindex','playerindex','activeduration'],template:`    <div>        <buff-table-component :key="'gear-buff-stats-table'" :condition="false" :generation="false"            :id="'gear-buff-stats-table'" :buffs="enhancements" :playerdata="buffData" :sums="[]" :playerindex="playerindex" :hidecustom="false">        </buff-table-component>    </div>`,data:function(){return{cache:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},enhancements:function(){var data=[];for(var i=0;i<logData.enhancements.length;i++){data[i]=findSkill(true,logData.enhancements[i]);}
return data;},buffData:function(){var id=this.phaseindex;if(this.cache.has(id)){return this.cache.get(id);}
var getData=function(stats){var uptimes=[];var i;for(i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
uptimes.push({player:player,data:stats[i]});}
return uptimes;};var res=getData(this.phase.enhancementStats);this.cache.set(id,res);return res;}},});}
{Vue.component("otherconsumable-buff-table-component",{props:['phaseindex','playerindex','activeduration'],template:`    <div>        <buff-table-component :key="'gear-buff-stats-table'" :condition="false" :generation="false"            :id="'gear-buff-stats-table'" :buffs="otherConsumables" :playerdata="buffData" :sums="[]" :playerindex="playerindex" :hidecustom="false">        </buff-table-component>    </div>`,data:function(){return{cache:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},otherConsumables:function(){var data=[];for(var i=0;i<logData.otherConsumables.length;i++){data[i]=findSkill(true,logData.otherConsumables[i]);}
return data;},buffData:function(){var id=this.phaseindex;if(this.cache.has(id)){return this.cache.get(id);}
var getData=function(stats){var uptimes=[];var i;for(i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
uptimes.push({player:player,data:stats[i]});}
return uptimes;};var res=getData(this.phase.otherConsumableStats);this.cache.set(id,res);return res;}},});}
{Vue.component("debuff-table-component",{props:['phaseindex','playerindex','activeduration'],template:`    <div>        <buff-table-component :key="'debuff-stats-table'" :condition="false" :generation="false"            :id="'debuff-stats-table'" :buffs="debuffs" :playerdata="buffData" :sums="[]" :playerindex="playerindex" :hidecustom="false">        </buff-table-component>    </div>`,data:function(){return{cache:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},debuffs:function(){var data=[];for(var i=0;i<logData.debuffs.length;i++){data[i]=findSkill(true,logData.debuffs[i]);}
return data;},buffData:function(){var id=this.phaseindex+'-'+this.activeduration;if(this.cache.has(id)){return this.cache.get(id);}
var getData=function(stats){var uptimes=[];var i;for(i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
uptimes.push({player:player,data:stats[i]});}
return uptimes;};var res;if(this.activeduration){res=getData(this.phase.debuffActiveStats);}else{res=getData(this.phase.debuffStats);}
this.cache.set(id,res);return res;}},});}
{Vue.component("conditions-table-component",{props:['phaseindex','playerindex','activeduration'],template:`    <div>        <buff-table-component :key="'conditions-stats-table'" :condition="true" :generation="false"            :id="'conditions-stats-table'" :buffs="conditions" :playerdata="buffData[0]" :sums="buffData[1]" :playerindex="playerindex" :hidecustom="false">        </buff-table-component>    </div>`,data:function(){return{cache:new Map()};},computed:{phase:function(){return logData.phases[this.phaseindex];},conditions:function(){var data=[];for(var i=0;i<logData.conditions.length;i++){data[i]=findSkill(true,logData.conditions[i]);}
return data;},buffData:function(){var id=this.phaseindex+'-'+this.activeduration;if(this.cache.has(id)){return this.cache.get(id);}
var activeduration=this.activeduration;var activeTimes=this.phase.playerActiveTimes;var getData=function(uptimesStats){var uptimes=[];var avg=[],groupeAvg=[],totalAvg=[];var groupCount=[],totalCount=0;var groupConditionAvg=[],totalConditionAvg=0;for(var i=0;i<logData.players.length;i++){var player=logData.players[i];if(player.isFake){continue;}
uptimes.push({player:player,data:uptimesStats[i]});if(activeduration&&activeTimes[i]<1e-6){continue;}
if(player.notInSquad){continue;}
var playerWeight=activeduration?activeTimes[i]:1;if(!groupeAvg[player.group]){groupeAvg[player.group]=[];groupCount[player.group]=0;groupConditionAvg[player.group]=0;}
totalCount+=playerWeight;totalConditionAvg+=playerWeight*uptimesStats[i].avg;groupConditionAvg[player.group]+=playerWeight*uptimesStats[i].avg;groupCount[player.group]+=playerWeight;for(var j=0;j<uptimesStats[i].data.length;j++){totalAvg[j]=(totalAvg[j]||0)+playerWeight*(uptimesStats[i].data[j][0]||0);groupeAvg[player.group][j]=(groupeAvg[player.group][j]||0)+playerWeight*(uptimesStats[i].data[j][0]||0);}}
for(var i=0;i<groupeAvg.length;i++){if(groupeAvg[i]){for(var k=0;k<groupeAvg[i].length;k++){groupeAvg[i][k]=Math.round(1000*groupeAvg[i][k]/groupCount[i])/1000;}
avg.push({name:"Group "+i,data:groupeAvg[i],avg:Math.round(1000*groupConditionAvg[i]/groupCount[i])/1000});}}
for(var k=0;k<totalAvg.length;k++){totalAvg[k]=Math.round(1000*totalAvg[k]/totalCount)/1000;}
avg.push({name:"Total",data:totalAvg,avg:Math.round(1000*totalConditionAvg/totalCount)/1000});return[uptimes,avg];};var res;if(this.activeduration){res=getData(this.phase.conditionsActiveStats);}else{res=getData(this.phase.conditionsStats);}
this.cache.set(id,res);return res;}},});}
{Vue.component("personal-buff-table-component",{props:['phaseindex','playerindex','activeduration'],template:`    <div>        <ul class="nav nav-pills d-flex flex-row justify-content-center mt-1 mb-1 scale85">            <li v-for="base in bases" class="nav-item">                <a class="nav-link" @click="mode = base" :class="{active: mode === base}">{{ base }}</a>            </li>        </ul>        <div v-for="(spec, id) in orderedSpecs" class="mt-1 mb-1">            <div v-show="specToBase[spec.name] === mode">                <h3 class="text-center">{{ spec.name }}</h3>                <buff-table-component :target="null" :condition="false" :generation="false" :id="'persbuffs-stats-table' + '_' + spec.name"                    :buffs="buffs[id]" :playerdata="data[id]" :sums="[]" :playerindex="playerindex" :hidecustom="false"></buff-table-component>            </div>        </div>    </div>`,data:function(){return{bases:[],mode:"Warrior",cache:new Map(),specToBase:specToBase};},computed:{phase:function(){return logData.phases[this.phaseindex];},orderedSpecs:function(){var res=[];var aux=new Set();for(var i=0;i<specs.length;i++){var spec=specs[i];var pBySpec=[];for(var j=0;j<logData.players.length;j++){if(logData.players[j].profession===spec&&logData.phases[0].persBuffStats[j].data.length>0){pBySpec.push(j);}}
if(pBySpec.length){aux.add(specToBase[spec]);res.push({ids:pBySpec,name:spec});}}
this.bases=[];var _this=this;aux.forEach(function(value,value2,set){_this.bases.push(value);});this.mode=this.bases[0];return res;},data:function(){var id=this.phaseindex+'-'+this.activeduration;if(this.cache.has(id)){return this.cache.get(id);}
var res=[];for(var i=0;i<this.orderedSpecs.length;i++){var spec=this.orderedSpecs[i];var dataBySpec=[];for(var j=0;j<spec.ids.length;j++){dataBySpec.push({player:logData.players[spec.ids[j]],data:this.activeduration?this.phase.persBuffActiveStats[spec.ids[j]]:this.phase.persBuffStats[spec.ids[j]]});}
res.push(dataBySpec);}
this.cache.set(id,res);return res;},buffs:function(){var res=[];for(var i=0;i<this.orderedSpecs.length;i++){var spec=this.orderedSpecs[i];var data=[];for(var j=0;j<logData.persBuffs[spec.name].length;j++){data.push(findSkill(true,logData.persBuffs[spec.name][j]));}
res.push(data);}
return res;}}});}
{Vue.component("phase-component",{props:["phases"],template:`    <div>        <ul v-if="showNormalPhases" class="nav nav-pills d-flex flex-row justify-content-center">            <li class="nav-item" v-for="(phase, id) in phases" v-show="!getPhaseData(id).breakbarPhase"                :data-original-title="getPhaseData(id).durationS + ' seconds'">                <a class="nav-link" @click="select(phase)" :class="{active: phase.active}">{{getPhaseData(id).name}}</a>            </li>        </ul>        <div v-if="hasBreakbarPhases" class="d-flex flex-row justify-content-center align-items-center">            <span class="mr-1">Breakbar Phases: </span>            <div style="max-width: 1200px;" class="d-flex flex-row align-items-center scrollable-x">                <div v-for="data in breakbarPhasesPerTarget"                class="d-flex flex-row flex-nowrap  align-items-center mr-1 ml-1">                <img class="icon-sl mr-2" :src="getTargetData(data.targetId).icon"                    :alt="getTargetData(data.targetId).name" :data-original-title="getTargetData(data.targetId).name"                    v-if="breakbarPhasesPerTarget.length > 1">                <ul class="nav nav-pills d-flex flex-row flex-nowrap">                    <li class="nav-item" v-for="(phaseId, id) in data.phaseIds"                        v-show="getPhaseData(phaseId).breakbarPhase"                        :data-original-title="getPhaseData(phaseId).durationS + ' seconds'">                        <a class="nav-link" @click="select(getReactivePhaseData(phaseId))"                            :class="{active: getReactivePhaseData(phaseId).active}">{{id + 1}}</a>                    </li>                </ul>            </div>            </div>        </div>    </div>`,computed:{showNormalPhases:function(){return this.normalPhases.length>1||this.hasBreakbarPhases;},normalPhases:function(){return logData.phases.filter(phase=>!phase.breakbarPhase);},hasBreakbarPhases:function(){return this.breakbarPhasesPerTarget.length>0;},breakbarPhasesPerTarget:function(){var res=[];for(var targetId=0;targetId<logData.targets.length;targetId++){var brPhases=logData.phases.filter(phase=>phase.breakbarPhase&&phase.targets.indexOf(targetId)>-1);var phaseIds=[];for(var brPhaseId=0;brPhaseId<brPhases.length;brPhaseId++){phaseIds.push(logData.phases.indexOf(brPhases[brPhaseId]));}
if(phaseIds.length>0){res.push({targetId:targetId,phaseIds:phaseIds});}}
return res;},},methods:{select:function(phase){for(var i=0;i<this.phases.length;i++){this.phases[i].active=false;}
phase.active=true;},getPhaseData:function(id){return logData.phases[id];},getReactivePhaseData:function(id){return this.phases[id];},getTargetData:function(id){return logData.targets[id];}}});}
{Vue.component("player-component",{props:["players"],template:`    <div class="d-flex flex-row">        <img class="icon mr-1" src="https://i.imgur.com/nSYuby8.png" :data-original-title="scoreExpl" />        <div class="d-flex flex-column" style="max-width: 900px;">            <div v-for="group in groups" class="d-flex flex-wrap mb-1">                <div v-for="player in group"                    class="player-cell d-flex flex-column align-items-center justify-content-center"                    :class="{active: player.active}" @click="select(player.id)">                    <div>                        <img :src="player.icon" :alt="player.profession" class="icon"                            :data-original-title="player.profession">                        <img v-if="player.health > 0" src="https://wiki.guildwars2.com/images/b/be/Vitality.png"                            alt="Health" class="icon" :data-original-title="'Health: ' + player.health">                        <img v-if="player.condi > 0" src="https://wiki.guildwars2.com/images/5/54/Condition_Damage.png"                            alt="Condition Damage" class="icon"                            :data-original-title="scoreV2 ? 'Condition Damage' : 'Condition Damage: ' + player.condi">                        <img v-if="player.conc > 0" src="https://wiki.guildwars2.com/images/4/44/Boon_Duration.png"                            alt="Concentration" class="icon" :data-original-title="scoreV2 ? 'Concentration' : 'Concentration: ' + player.conc">                        <img v-if="player.heal > 0" src="https://wiki.guildwars2.com/images/8/81/Healing_Power.png"                            alt="Healing Power" class="icon" :data-original-title="scoreV2 ? 'Healing Power' : 'Healing Power: ' + player.heal">                        <img v-if="player.tough > 0" src="https://wiki.guildwars2.com/images/1/12/Toughness.png"                            alt="Toughness" class="icon" :data-original-title="scoreV2 ? 'Toughness' : 'Toughness: ' + player.tough">                    </div>                    <div v-if="player.l1Set.length > 0 || player.l2Set.length > 0">                        <img v-for="wep in player.l1Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                        <span v-if="player.l1Set.length > 0 && player.l2Set.length > 0">/</span>                        <img v-for="wep in player.l2Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                    </div>                    <div v-if="player.a1Set.length > 0 || player.a2Set.length > 0">                        <img v-for="wep in player.a1Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                        <span v-if="player.a1Set.length > 0 && player.a2Set.length > 0">/</span>                        <img v-for="wep in player.a2Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                    </div>                    <div class="d-flex align-items-center justify-content-center">                        <img v-if="runningExtensions && runningExtensions[player.id]"                            src="https://wiki.guildwars2.com/images/f/f0/Event_flag_green.png" alt="Extensions"                            class="icon" :data-original-title="computeExtensionTooltip(runningExtensions[player.id])">                        <img v-if="player.isCommander"                            src="https://wiki.guildwars2.com/images/5/54/Commander_tag_%28blue%29.png" alt="Commander"                            class="icon" data-original-title="Commander">                        <span class="player-cell-shorten" :data-original-title="player.acc">                            {{ player.name }}                        </span>                    </div>                </div>            </div>        </div>    </div>`,methods:{getIcon:function(path){return urls[path];},select:function(id){for(var i=0;i<this.players.length;i++){this.players[i].active=false;}
this.players[id].active=true;},computeExtensionTooltip:function(data){var str="Player is running: <br>";for(var i=0;i<data.length;i++){str+="- "+data[i]+" Extension";if(i!==data.length-1){str+="<br>";}}
return str;}},computed:{scoreV2:function(){return logData.evtcVersion>20210800;},scoreExpl:function(){if(this.scoreV2){return `
                        <span style='text-align:left;display: block;'>
                        A player has a stat score if they are above 60% of the maximum stat present in the squad. For example if the maximum healing power stat inside the squad is 1000, anybody with a healing power stat above 600 will be flagged as with healing power. 
                        </span>
                    `;}
return `
                <span style='text-align:left;display: block;'>
                Scores are relative to the squad. 10 means that that player had the highest stat in the squad. 8 means that that player had between 80% and 89% of the highest scored player's stat.
                </span>
                `},groups:function(){var aux=[];for(var i=0;i<logData.players.length;i++){var playerData=logData.players[i];if(playerData.isFake){continue;}
if(!aux[playerData.group]){aux[playerData.group]=[];}
var toPush={};Object.assign(toPush,playerData);toPush.active=this.players[i].active;aux[playerData.group].push(toPush);}
var noUndefinedGroups=[];for(var i=0;i<aux.length;i++){if(aux[i]){noUndefinedGroups.push(aux[i]);}}
return noUndefinedGroups;},runningExtensions:function(){if(logData.usedExtensions){var res=[];for(var i=0;i<logData.players.length;i++){var playerData=logData.players[i];var subRes=[];for(var j=0;j<logData.usedExtensions.length;j++){var usedExtension=logData.usedExtensions[j];var playersRunning=logData.playersRunningExtensions[j];if(playersRunning.includes(playerData.name)){subRes.push(usedExtension.split(" - ")[0]);}}
if(subRes.length>0){res.push(subRes);}else{res.push(null);}}
return res;}else{return null;}},}});}
{Vue.component("player-stats-component",{props:["phaseindex",'activetargets','activeplayer','light'],template:`    <div>        <h3 v-for="player in players" :key="player.id" v-show="player.id === activeplayer"            class="text-center mt-2"><img :alt="player.profession" class="icon" :src="player.icon">{{player.name}}</h3>        <ul class="nav nav-tabs" v-show="activeplayer > -1">            <li>                <a class="nav-link" :class="{active: tabmode === 0}" @click="tabmode = 0">                    Outgoing Damage                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 1}" @click="tabmode = 1">                    Incoming Damage                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 2}" @click="tabmode = 2">Graph</a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 7}" @click="tabmode = 7">                    Boon Status                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 3}" @click="tabmode = 3">                    Simple                    Rotation                </a>            </li>                    <li>                <a class="nav-link" :class="{active: tabmode === 4}" @click="tabmode = 4">                    Advanced                    Rotation                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 5}" @click="tabmode = 5">                    Consumables                </a>            </li>            <li>                <a class="nav-link" v-show="hasDeaths" :class="{active: tabmode === 6}" @click="tabmode = 6">                    Death                    Recap                </a>            </li>        </ul>        <keep-alive>            <player-tab-component v-for="player in players" :key="player.id"                v-if="player.id === activeplayer" :playerindex="player.id" :tabmode="tabmode"                :phaseindex="phaseindex" :activetargets="activetargets" :light="light"></player-tab-component>        </keep-alive>        <div v-if="activeplayer === -1">            <h3 class="text-center">No player selected</h3>        </div>    </div>`,data:function(){return{tabmode:0};},computed:{players:function(){return logData.players;},hasDeaths:function(){for(var i=0;i<this.players.length;i++){if(!!this.players[i].details.deathRecap){return true;}}
return false;}}});}
{Vue.component('player-tab-component',{props:['playerindex','tabmode','phaseindex','activetargets','light'],template:`    <div>        <keep-alive>            <dmgdist-player-component v-if="tabmode === 0" :key="'dist' + playerindex" :playerindex="playerindex"                :phaseindex="phaseindex" :activetargets="activetargets"></dmgdist-player-component>            <dmgtaken-component v-if="tabmode ===1" :key="'taken' + playerindex" :actorindex="playerindex" :player="true"                :tableid="'dmgtaken-player-'+playerindex" :phaseindex="phaseindex"></dmgtaken-component>            <player-graph-tab-component v-for="(ph, id) in phases" v-if="tabmode === 2 && id === phaseindex" :key="id + 'graph' + playerindex"                :playerindex="playerindex" :phaseindex="id" :activetargets="activetargets" :light="light">            </player-graph-tab-component>            <buff-stats-player-component v-if="tabmode === 7" :key="'buffs' + playerindex" :playerindex="playerindex"                :phaseindex="phaseindex"></buff-stats-player-component>            <simplerotation-component v-if="tabmode === 3" :key="'rot' + playerindex" :actorindex="playerindex"                :phaseindex="phaseindex" :target="false"></simplerotation-component>                        <advancedrotation-component v-for="(ph, id) in phases" v-if="tabmode === 4 && id === phaseindex" :key="id + 'advrot' + playerindex" :actorindex="playerindex"            :phaseindex="id" :target="false" :light="light"></advancedrotation-component>            <food-component v-if="tabmode === 5" :key="'cons' + playerindex" :playerindex="playerindex"                :phaseindex="phaseindex"></food-component>            <deathrecap-component v-if="tabmode === 6" :key="'recap' + playerindex" :playerindex="playerindex"                :phaseindex="phaseindex"></deathrecap-component>        </keep-alive>    </div>`,computed:{phases:function(){return logData.phases;},}});}
{Vue.component("simplerotation-component",{props:["actorindex","phaseindex","target"],template:`    <div>        <div class="d-flex flex-row justify-content-center mt-1 mb-1">            <ul class="nav nav-pills mr-1 scale85">                <li class="nav-item">                    <a class="nav-link" @click="autoattack = !autoattack" :class="{active: autoattack}">Show auto                        attacks</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="hideInterruptedAA = !hideInterruptedAA"                        :class="{active: hideInterruptedAA}">Hide interrupted auto attacks</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="hideSmallTime = !hideSmallTime"                        :class="{active: hideSmallTime}">Hide < 10ms</a>                </li>            </ul>                  <ul class="nav nav-pills ml-1 mr-1 scale85">                <li class="nav-item">                    <a class="nav-link" @click="hideInstantCast = !hideInstantCast"                        :class="{active: hideInstantCast}">Hide all instant cast</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="hideInstantCastSkill = !hideInstantCastSkill"                        :class="{active: hideInstantCastSkill, disabled: hideInstantCast}">Hide instant cast skills</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="hideGearProc = !hideGearProc"                        :class="{active: hideGearProc, disabled: hideInstantCast}">Hide gear procs</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="hideTraitProc = !hideTraitProc"                        :class="{active: hideTraitProc, disabled: hideInstantCast}">Hide trait procs</a>                </li>            </ul>            <ul class="nav nav-pills ml-1 scale85">                <li class="nav-item">                    <a class="nav-link" @click="small = !small" :class="{active: small}">Small icons</a>                </li>                <li class="nav-item">                    <a class="nav-link" @click="smallAA = !smallAA" :class="{active: smallAA}">Small auto attack                        icons</a>                </li>            </ul>        </div>        <div style="z-index: 1;" class="mb-4 mt-2">            <a href="#" class="dropdown-toggle" data-toggle="dropdown" title="Filter Skills" style="font-size: 1.1em;">                Skills <span class="caret"></span>            </a>            <ul class="dropdown-menu p-2 font-weight-normal" style="min-width: 165px; max-width: 165px;">                <div class="d-flex flex-column justify-content-center align-items-center mb-1"                    style="border-bottom: 2px solid #bbb;">                    <li>                        <button style="width:130px; padding: 0.4rem 0.4rem;" type="button" class="btn btn-primary btn-sm"                            @click="for (var i = 0; i < skillList.length; i++) {selectedSkills['s' + skillList[i].id] = true;}" @click.stop="stopClickEvent">Select all</button>                    </li>                    <li class="mb-1">                        <button style="width:130px; padding: 0.4rem 0.4rem;" type="button" class="btn btn-primary btn-sm"                            @click="for (var i = 0; i < skillList.length; i++) {selectedSkills['s' + skillList[i].id] = false;}" @click.stop="stopClickEvent">Deselect all</button>                    </li>                </div>                <li v-for="(skill, index) in skillList" :key="index">                    <input :id="'simple-rotation-player-' + index  + '-' + phaseindex" type="checkbox"                        v-model="selectedSkills['s' + skill.id]" @click.stop="stopClickEvent" />                    <label :for="'simple-rotation-player-' + index + '-' + phaseindex" @click.stop="stopClickEvent"                        style="font-size: 1.0em; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; width: 130px; margin-top: 2px; margin-left: 5px; position: absolute;">                                   <img class="icon"                                 :src="getSkill(skill.id).icon">                        {{skill.name}}                      </label>                </li>            </ul>        </div>        <span class="rot-skill" v-for="cast in rotation" :class="getCastClass(cast)" v-show="showSkill(cast)">            <img class="rot-icon" :class="getIconClass(cast)" :src="cast.skill.icon" :data-original-title="getTooltip(cast)"/>        </span>        <div class="card mt-2">            <div class="card-body container">                <p><u>Outline</u></p>                <span class="mr-1"                    style="padding: 2px; background-color:#999999; border-style:solid; border-width: 3px; border-color:#00FF00; color:#000000">                    Full After Cast                </span>                <span class="mr-1"                    style="padding: 2px; background-color:#999999; border-style:solid; border-width: 3px; border-color:#FF0000; color:#000000">                    Interrupted                </span>                <span class="mr-1"                     style="padding: 2px; background-color:#999999; border-style:solid; border-width: 3px; border-color:#00FFFF; color:#000000">                    Instant                </span>                <span class="mr-1"                    style="padding: 2px; background-color:#999999; border-style:solid; border-width: 3px; border-color:#FFFF00; color:#000000">                    Unknown                </span>            </div>        </div>    </div>`,data:function(){var selectedSkills={};var skillList=[];var rotation=this.target?logData.targets[this.actorindex].details.rotation[this.phaseindex]:logData.players[this.actorindex].details.rotation[this.phaseindex];for(var i=0;i<rotation.length;i++){var rota=rotation[i];var skillID=rota[1];var skill=this.getSkill(skillID);if(skill.isSwap||selectedSkills['s'+skillID]){continue;}
skillList.push({name:skill.name,id:skillID});selectedSkills['s'+skillID]=true;}
skillList.sort((x,y)=>{if(x.name<y.name){return-1;}
if(x.name>y.name){return 1;}
return 0;});return{autoattack:true,small:false,smallAA:true,hideInterruptedAA:false,hideInstantCast:false,hideInstantCastSkill:false,hideTraitProc:false,hideGearProc:false,hideSmallTime:true,selectedSkills:selectedSkills,skillList:skillList,};},computed:{rotation:function(){var data=this.target?logData.targets:logData.players;return data[this.actorindex].details.rotation[this.phaseindex].map((cast)=>({time:cast[0],skill:this.getSkill(cast[1]),duration:cast[2],type:cast[3]}));},RotationStatus:function(){return RotationStatus;}},methods:{stopClickEvent:function(event){event.stopPropagation();},getSkill:function(id){return findSkill(false,id);},isSwap:function(id){return findSkill(false,id).isSwap;},showSkill:function(cast){var skill=cast.skill;if(skill.isSwap){return true;}
if(!this.selectedSkills['s'+skill.id]){return false;}
var aa=skill.aa;if(aa){if(!this.autoattack){return false;}
if(this.hideInterruptedAA&&cast.type===RotationStatus.CANCEL){return false;}}
var isInstant=cast.type===RotationStatus.INSTANT;if(isInstant){if(this.hideInstantCast){return false;}else if(this.hideGearProc&&skill.gearProc){return false;}else if(this.hideTraitProc&&skill.traitProc){return false;}else if(this.hideInstantCastSkill&&!skill.traitProc&&!skill.gearProc){return false;}}else if(this.hideSmallTime){return cast.duration>10;}
return true;},getCastClass(cast){return{'rot-swap':cast.skill.isSwap,'mb-1':cast.skill.isSwap,'rot-small':this.small||(this.smallAA&&cast.skill.aa)};},getIconClass(cast){return{'rot-cancelled':cast.type===RotationStatus.CANCEL,'rot-animfull':cast.type===RotationStatus.FULL,'rot-unknown':cast.type===RotationStatus.UNKNOWN,'rot-instant':cast.type===RotationStatus.INSTANT};},getTooltip(cast){var tooltip=`${cast.skill.name} at ${cast.time}s`;if(cast.type===RotationStatus.INSTANT){return tooltip;}else{return tooltip+` for ${cast.duration}ms`;}}}});}
{function getAdvancedRotationLayout(images,color,nbLines){var layout={barmode:'stack',legend:{traceorder:'reversed'},hovermode:"closest",hoverdistance:50,images:images,font:{color:color},xaxis:{title:'Time(sec)',color:color,gridcolor:color,rangemode:'nonnegative',xrangeslider:{},tickmode:'auto',nticks:8},yaxis:{tickmode:'auto',color:color,tickformat:",d",range:[-nbLines,1]},paper_bgcolor:'rgba(0,0,0,0)',plot_bgcolor:'rgba(0,0,0,0)',shapes:[],annotations:[],margin:{l:150,},width:1300,height:850,datarevision:new Date().getTime(),};return layout;};function computeAdvancedRotationData(rotationData,images,data,phase,actor,selectedSkills){if(rotationData){var rotaTrace={x:[],base:[],y:[],name:actor.name,text:[],orientation:'h',mode:'markers',textposition:"none",type:'bar',width:[],hoverinfo:'text',hoverlabel:{namelength:'-1'},yaxis:'y',marker:{color:[],width:'2.5',line:{color:[],width:'1.0'}},showlegend:false};var timeOffset=0;var yOffset=0;for(var i=0;i<rotationData.length;i++){var item=rotationData[i];var x=item[0];var skillId=item[1];var duration=item[2];var endType=item[3];var quick=item[4];var skill=findSkill(false,skillId);var aa=false;var icon;var name='???';var swap=false;if(skill){aa=skill.aa;icon=skill.icon;name=skill.name;swap=skill.isSwap;}
if(!swap&&!selectedSkills['s'+skillId]){continue;}
if(!icon.includes("render")&&!icon.includes("darthmaim")){icon=null;}
var fillColor;var originalDuration=duration;if(endType==1){fillColor='rgb(0,0,255)';}
else if(endType==2){fillColor='rgb(255,0,0)';}
else if(endType==3){fillColor='rgb(0,255,0)';}
else if(endType==4){fillColor='rgb(0,255,255)';duration=50;}
else{fillColor='rgb(255,255,0)';}
var clampedX=Math.max(x,0);var diffX=clampedX-x;var clampedWidth=Math.min(x+duration/1000.0,phase.duration/1000.0)-x-diffX;clampedX-=timeOffset;if(!aa&&icon){images.push({source:icon,xref:'x',yref:'y',x:clampedX,y:0.0-yOffset,sizex:0.5,sizey:0.5,xanchor:'middle',yanchor:'bottom'});}
rotaTrace.x.push(clampedWidth-0.001);rotaTrace.base.push(clampedX);rotaTrace.y.push(0.6-yOffset);var text=`${name} at ${x}s`;rotaTrace.text.push(endType===RotationStatus.INSTANT?text:text+` for ${originalDuration}ms`);rotaTrace.width.push(aa?0.25:0.5);rotaTrace.marker.color.push(fillColor);var outlineR=quick>0.0?quick*quickColor.r+(1.0-quick)*normalColor.r:-quick*slowColor.r+(1.0+quick)*normalColor.r;var outlineG=quick>0.0?quick*quickColor.g+(1.0-quick)*normalColor.g:-quick*slowColor.g+(1.0+quick)*normalColor.g;var outlineB=quick>0.0?quick*quickColor.b+(1.0-quick)*normalColor.b:-quick*slowColor.b+(1.0+quick)*normalColor.b;rotaTrace.marker.line.color.push('rgb('+outlineR+','+outlineG+','+outlineB+')');if(swap){yOffset++;timeOffset=x;}}
data.push(rotaTrace);return yOffset;}
return 0;}
Vue.component("advancedrotation-component",{props:["phaseindex","light","actorindex","target"],template:`    <div>        <div style="position:absolute; margin-top: 60px;  margin-left: 145px; z-index: 1;">            <a href="#" class="dropdown-toggle" data-toggle="dropdown" title="Filter Skills" style="font-size: 1.1em;">                Skills <span class="caret"></span>            </a>            <ul class="dropdown-menu p-2 font-weight-normal" style="min-width: 165px; max-width: 165px;">                <div class="d-flex flex-column justify-content-center align-items-center mb-1"                    style="border-bottom: 2px solid #bbb;">                    <li>                        <button style="width:130px; padding: 0.4rem 0.4rem;" type="button" class="btn btn-primary btn-sm"                            @click="for (var i = 0; i < skillList.length; i++) {selectedSkills['s' + skillList[i].id] = true;}" @click.stop="stopClickEvent">Select all</button>                    </li>                    <li class="mb-1">                        <button style="width:130px; padding: 0.4rem 0.4rem;" type="button" class="btn btn-primary btn-sm"                            @click="for (var i = 0; i < skillList.length; i++) {selectedSkills['s' + skillList[i].id] = false;}" @click.stop="stopClickEvent">Deselect all</button>                    </li>                </div>                <li v-for="(skill, index) in skillList" :key="index">                    <input :id="'advanced-rotation-player-' + index  + '-' + phaseindex" type="checkbox"                        v-model="selectedSkills['s' + skill.id]" @click.stop="stopClickEvent" />                    <label :for="'advanced-rotation-player-' + index + '-' + phaseindex" @click.stop="stopClickEvent"                        style="font-size: 1.0em; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; width: 130px; margin-top: 2px; margin-left: 5px; position: absolute;">                                                             <img class="icon"                                 :src="getSkill(skill.id).icon">                        {{skill.name}}                    </label>                          </li>            </ul>        </div>        <graph-component :id="graphid" :layout="layout" :data="data"></graph-component>        <rotation-legend-component></rotation-legend-component>    </div>`,mixins:[graphComponent],watch:{light:{handler:function(){var textColor=this.light?'#495057':'#cccccc';this.layout.yaxis.gridcolor=textColor;this.layout.yaxis.color=textColor;this.layout.xaxis.gridcolor=textColor;this.layout.xaxis.color=textColor;this.layout.font.color=textColor;for(var i=0;i<this.layout.shapes.length;i++){this.layout.shapes[i].line.color=textColor;}
this.layout.datarevision=new Date().getTime();}},selectedSkills:{deep:true,handler:function(){this.computeLayout();}}},data:function(){var selectedSkills={};var skillList=[];var rotation=this.target?logData.targets[this.actorindex].details.rotation[this.phaseindex]:logData.players[this.actorindex].details.rotation[this.phaseindex];for(var i=0;i<rotation.length;i++){var rota=rotation[i];var skillID=rota[1];var skill=this.getSkill(skillID);if(skill.isSwap||selectedSkills['s'+skillID]){continue;}
skillList.push({name:skill.name,id:skillID});selectedSkills['s'+skillID]=true;}
skillList.sort((x,y)=>{if(x.name<y.name){return-1;}
if(x.name>y.name){return 1;}
return 0;});return{selectedSkills:selectedSkills,skillList:skillList,};},created:function(){this.computeLayout();},activated:function(){var div=document.getElementById(this.graphid);var _this=this;div.on('plotly_relayout',function(evt){var layout=_this.layout;var images=layout.images;var x0=layout.xaxis.range[0];var x1=layout.xaxis.range[1];var y0=layout.yaxis.range[0];var y1=layout.yaxis.range[1];if(_this.updateVisibilyInQuad(images,x0,x1,y0,y1)){layout.datarevision=new Date().getTime();}});},computed:{phase:function(){return logData.phases[this.phaseindex];},actor:function(){return this.target?logData.targets[this.actorindex]:logData.players[this.actorindex];},graphid:function(){return(this.target?"target":"player")+"advancedrotation-"+this.actorindex+'-'+this.phaseindex;},rotation:function(){return this.actor.details.rotation[this.phaseindex];}},methods:{computeLayout:function(){var backUpXAxis=null;if(this.layout){backUpXAxis=this.layout.xaxis;}
this.data=[];var images=[];var nbLines=computeAdvancedRotationData(this.rotation,images,this.data,this.phase,this.actor,this.selectedSkills);this.layout=getAdvancedRotationLayout(images,this.light?'#495057':'#cccccc',nbLines);if(backUpXAxis){this.layout.xaxis=backUpXAxis;}
this.updateVisibily(this.layout.images,this.phase.start,this.phase.end);},stopClickEvent:function(event){event.stopPropagation();},getSkill:function(id){return findSkill(false,id);},}});}
{Vue.component("support-stats-component",{props:["phaseindex","playerindex"],template:`    <div>        <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">            <thead>                <tr>                    <th class="sub-cell" :class="getHeaderClass('Sub')" @click="sortBy('Sub')">                        Sub                    </th>                    <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')">                    </th>                    <th class="text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">                        Name                    </th>                    <th class="text-left" :class="getHeaderClass('Account')" @click="sortBy('Account')">                        Account                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 0)" @click="sortBy('Data', 0)"                        data-original-title="Condition Cleanse on Squad Mates">                        <img src="https://wiki.guildwars2.com/images/1/12/Healing_Spring.png"                            alt="Condition Cleanse on Others" class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 2)" @click="sortBy('Data', 2)"                        data-original-title="Condition Cleanse on Self">                        <img src="https://wiki.guildwars2.com/images/e/ec/Mending.png" alt="Condition Cleanse on Self"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 4)" @click="sortBy('Data', 4)"                        data-original-title="Boon Strips">                        <img src="https://wiki.guildwars2.com/images/e/ec/Banish_Enchantment.png" alt="Boon Strips"                            class="icon icon-hover">                    </th>                    <th class="stat-cell" :class="getHeaderClass('Data', 6)" @click="sortBy('Data', 6)"                        data-original-title="Resurrects">                        <img src="https://wiki.guildwars2.com/images/3/3d/Downed_ally.png" alt="Resurrects"                            class="icon icon-hover">                    </th>                </tr>            </thead>            <tbody>                <tr v-for="row in sortData(tableData.rows)" :class="{active: row.player.id === playerindex}">                    <td :class="getBodyClass('Sub')">                        {{row.player.group}}                    </td>                    <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession">                        <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span                            style="display:none">{{row.player.profession}}</span>                    </td>                    <td :class="getBodyClass('Name')" class="text-left">                        {{row.player.name}}                    </td>                    <td :class="getBodyClass('Account')" class="text-left">                        {{row.player.acc}}                    </td>                    <td :class="getBodyClass('Data', 0)" :data-original-title="row.sup[1] + ' seconds'">                        {{row.sup[0]}}                    </td>                    <td :class="getBodyClass('Data', 2)" :data-original-title="row.sup[3] + ' seconds'">                        {{row.sup[2]}}                    </td>                    <td :class="getBodyClass('Data', 4)" :data-original-title="row.sup[5] + ' seconds'">                        {{row.sup[4]}}                    </td>                    <td :class="getBodyClass('Data', 6)" :data-original-title="row.sup[7] + ' seconds'">                        {{row.sup[6]}}                    </td>                </tr>            </tbody>            <tfoot>                <tr v-for="sum in tableData.sums">                    <td></td>                    <td></td>                    <td class="text-left">{{sum.name}}</td>                    <td></td>                    <td :data-original-title="round3(sum.sup[1]) + ' seconds'">{{sum.sup[0]}}</td>                    <td :data-original-title="round3(sum.sup[3])  + ' seconds'">{{sum.sup[2]}}</td>                    <td :data-original-title="round3(sum.sup[5])  + ' seconds'">{{sum.sup[4]}}</td>                    <td :data-original-title="round3(sum.sup[7])  + ' seconds'">{{sum.sup[6]}}</td>                </tr>            </tfoot>        </table>    </div>`,mixins:[numberComponent,sortedTableComponent],data:function(){return{cache:new Map(),sortdata:{order:"desc",index:-1,key:'Prof',}};},methods:{sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Sub":rows.sort((x,y)=>order*(x.player.group-y.player.group));break;case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "Account":rows.sort((x,y)=>order*x.player.acc.localeCompare(y.player.acc));break;case "Data":var index=this.sortdata.index;rows.sort((x,y)=>order*(x.sup[index]-y.sup[index]));break;default:return null;break;}
return rows;},},computed:{tableid:function(){return "sup-table";},phase:function(){return logData.phases[this.phaseindex];},tableData:function(){if(this.cache.has(this.phaseindex)){return this.cache.get(this.phaseindex);}
var rows=[];var sums=[];var total=[0,0,0,0,0,0,0,0];var groups=[];var i;for(i=0;i<this.phase.supportStats.length;i++){var sup=this.phase.supportStats[i];var player=logData.players[i];if(player.isFake){continue;}
rows.push({player:player,sup:sup});if(!groups[player.group]){groups[player.group]=[0,0,0,0,0,0,0,0];}
for(var j=0;j<sup.length;j++){total[j]+=sup[j];groups[player.group][j]+=sup[j];}}
for(i=0;i<groups.length;i++){if(groups[i]){sums.push({name:"Group "+i,sup:groups[i]});}}
sums.push({name:"Total",sup:total});var res={rows:rows,sums:sums};this.cache.set(this.phaseindex,res);return res;}}});}
{Vue.component("target-component",{props:["targets","phaseindex"],template:`    <div class="d-flex flex-row justify-content-center flex-wrap" style="max-width: 500px;">        <div v-for="(target, id) in targets" v-show="show(id)">            <img class="icon-lg mr-2 ml-2 target-cell" :src="getTargetData(id).icon" :alt="getTargetData(id).name"                :data-original-title="getTargetData(id).name" :class="{active: target.active}"                @click="target.active = !target.active">            <target-data-component :targetid="id"></target-data-component>        </div>    </div>`,computed:{phase:function(){return logData.phases[this.phaseindex];}},methods:{show:function(index){return this.phase.targets.indexOf(index)!==-1;},getTargetData:function(id){return logData.targets[id];}}});}
{Vue.component("target-stats-component",{props:["playerindex","phaseindex",'light',"simplephase"],template:`    <div>        <ul v-if="phaseTargets.length > 1" class=" nav nav-tabs">            <li v-for="target in phaseTargets">                <a class="nav-link" :class="{active: simplephase.focus === target.id}"                    @click="simplephase.focus = target.id">                    {{target.name}}                </a>            </li>        </ul>        <div v-for="target in phaseTargets" v-show="simplephase.focus === target.id">            <div class="d-flex flex-row justify-content-center align-items-center">                <div class="d-flex flex-column justify-content-center align-items-center">                    <img :alt="target.name" class="icon-lg mt-2" :src="target.icon">                    <target-data-component :targetid="target.id"></target-data-component>                </div>                <h3 class="text-center mt-2">{{target.name}}</h3>            </div>        </div>        <ul class="nav nav-tabs" v-show="phaseTargets.length > 0">            <li>                <a class="nav-link" :class="{active: mode === 0}" @click="mode = 0">                    Outgoing Damage                </a>            </li>            <li>                <a class="nav-link" :class="{active: mode === 1}" @click="mode = 1">                    Incoming Damage                </a>            </li>            <li>                <a class="nav-link" :class="{active: mode === 2}" @click="mode = 2">Graph</a>            </li>            <li>                <a class="nav-link" :class="{active: mode === 5}" @click="mode = 5">Graph Per Player</a>            </li>            <li>                <a class="nav-link" :class="{active: mode === 3}" @click="mode = 3">Simple Rotation</a>            </li>            <li>                <a class="nav-link" :class="{active: mode === 4}" @click="mode = 4">Buff Status</a>            </li>        </ul>        <keep-alive>            <target-tab-component v-for="target in targets" :key="target.id" v-if="simplephase.focus === target.id"                :targetindex="target.id" :phaseindex="phaseindex" :playerindex="playerindex" :mode="mode"                :light="light"></target-tab-component>        </keep-alive>    </div>`,data:function(){return{mode:0};},computed:{phase:function(){return logData.phases[this.phaseindex];},targets:function(){return logData.targets;},phaseTargets:function(){var res=[];for(var i=0;i<this.phase.targets.length;i++){var tar=logData.targets[this.phase.targets[i]];res.push(tar);}
if(this.simplephase.focus===-1){this.simplephase.focus=res[0]?res[0].id:-1;}
return res;}}});}
{Vue.component("target-tab-component",{props:["phaseindex","playerindex",'targetindex','mode','light'],template:`    <div>        <keep-alive>            <dmgdist-target-component v-if="mode === 0" :key="'dist' + targetindex" :phaseindex="phaseindex"                :targetindex="targetindex"></dmgdist-target-component>            <dmgtaken-component v-if="mode === 1" :actorindex="targetindex" :player="false" :key="'taken' + targetindex"                :tableid="'dmgtaken-target-'+targetindex" :phaseindex="phaseindex"></dmgtaken-component>            <target-graph-tab-component v-for="(ph, id) in phases" v-if="mode === 2 && id === phaseindex" :key="id"                :targetindex="targetindex" :phaseindex="id" :light="light"></target-graph-tab-component>            <targetperplayer-graphs-tab-component v-for="(ph, id) in phases" v-if="mode === 5 && id === phaseindex" :key="id + 'perplayer'"                 :targetindex="targetindex" :phaseindex="id" :playerindex="playerindex" :light="light">            </targetperplayer-graphs-tab-component>            <simplerotation-component v-if="mode === 3" :key="'rot' + targetindex" :actorindex="targetindex"                :phaseindex="phaseindex" :target="true"></simplerotation-component>            <buff-stats-target-component v-if="mode === 4" :key="'buffs' + targetindex" :targetindex="targetindex"                :phaseindex="phaseindex" :playerindex="playerindex"></buff-stats-target-component>        </keep-alive>    </div>`,computed:{phases:function(){return logData.phases;},}});}
{Vue.component("dps-graph-component",{props:["activetargets",'mode','phaseindex','playerindex','light'],template:`    <div>              <dps-graph-mode-selector-component :data="graphdata"            :phaseduration="this.phase.end - this.phase.start" :phasehassubphases="!!this.phase.subPhases" :ignorebreakbar="false" :column="false">        </dps-graph-mode-selector-component>        <h3 class="text-center mt-1 mb-1">{{graphname}}</h3>        <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>    </div>`,mixins:[graphComponent,damageGraphComponent],created:function(){var textColor=this.light?'#495057':'#cccccc';this.layout={yaxis:{title:'DPS',fixedrange:false,rangemode:'tozero',gridcolor:textColor,tickformat:",d",color:textColor},xaxis:{title:'Time(sec)',color:textColor,gridcolor:textColor,rangemode:'nonnegative',tickmode:'auto',nticks:8,xrangeslider:{}},hovermode:'x',hoverdistance:150,legend:{orientation:'h',font:{size:15},y:-0.1},font:{color:textColor},paper_bgcolor:'rgba(0,0,0,0)',plot_bgcolor:'rgba(0,0,0,0)',displayModeBar:false,shapes:[],annotations:[],autosize:true,width:1300,height:850,datarevision:new Date().getTime(),};computePhaseMarkups(this.layout.shapes,this.layout.annotations,this.phase,textColor);this.data=[];var data=this.data;var player;for(var i=0;i<logData.players.length;i++){var pText=[];player=logData.players[i];for(var j=0;j<this.phase.times.length;j++){pText.push(player.name);}
data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:player.colTarget,width:i===this.playerindex?5:2},text:pText,hoverinfo:'y+text+x',name:player.name,});}
data.push({x:this.phase.times,mode:'lines',line:{shape:'spline'},hoverinfo:'name+y+x',visible:'legendonly',name:'All Player'});computeTargetHealthData(this.graph,logData.targets,this.phase,this.data,null);computeTargetBarrierData(this.graph,logData.targets,this.phase,this.data,null);computeTargetBreakbarData(this.graph,logData.targets,this.phase,this.data,null);addMechanicsToGraph(data,this.phase,this.phaseindex);},watch:{playerindex:{handler:function(){for(var i=0;i<logData.players.length;i++){this.data[i].line.width=i===this.playerindex?5:2;}
this.layout.datarevision=new Date().getTime();},deep:true},light:{handler:function(){var textColor=this.light?'#495057':'#cccccc';this.layout.yaxis.gridcolor=textColor;this.layout.yaxis.color=textColor;this.layout.xaxis.gridcolor=textColor;this.layout.xaxis.color=textColor;this.layout.font.color=textColor;for(var i=0;i<this.layout.shapes.length;i++){this.layout.shapes[i].line.color=textColor;}
this.layout.datarevision=new Date().getTime();}}},computed:{graphid:function(){return 'dpsgraph-'+this.phaseindex;},damageGraphName:function(){switch(this.graphdata.damagemode){case DamageType.All:return "damage";case DamageType.Power:return "powerDamage";case DamageType.Condition:return "conditionDamage";case DamageType.Breakbar:return "breakbarDamage";default:throw new Error("unknown enum in damage graph name");}},graphname:function(){var name=getDamageGraphName(this.graphdata.damagemode,this.graphdata.graphmode);switch(this.graphdata.dpsmode){case 0:name="Full "+name;break;case-1:name="Phase "+name;break;default:name=this.graphdata.dpsmode+"s "+name;break;}
name=(this.mode===0?"Total ":(this.mode===1?"Target ":"Cleave "))+name;return name;},computeData:function(){this.layout.datarevision=new Date().getTime();this.layout.yaxis.title=graphTypeEnumToString(this.graphdata.graphmode);var points=this.computeDPSRelatedData();var res=this.data;for(var i=0;i<points.length;i++){res[i].y=points[i];}
return res;}},methods:{computeDPS:function(lim,phasebreaks,cacheID){var maxDPS={total:0,cleave:0,target:0};var allDPS={total:[],cleave:[],target:[]};var playerDPS=[];var damageArrayToUse=this.damageGraphName;for(var i=0;i<logData.players.length;i++){var data=computePlayerDPS(logData.players[i],this.graph.players[i][damageArrayToUse],lim,phasebreaks,this.activetargets,cacheID,this.phase.times,this.graphdata.graphmode,this.graphdata.damagemode);playerDPS.push(data.dps);maxDPS.total=Math.max(maxDPS.total,data.maxDPS.total);maxDPS.cleave=Math.max(maxDPS.cleave,data.maxDPS.cleave);maxDPS.target=Math.max(maxDPS.target,data.maxDPS.target);for(var j=0;j<data.dps.total.length;j++){allDPS.total[j]=(allDPS.total[j]||0)+data.dps.total[j];allDPS.cleave[j]=(allDPS.cleave[j]||0)+data.dps.cleave[j];allDPS.target[j]=(allDPS.target[j]||0)+data.dps.target[j];}}
return{allDPS:allDPS,playerDPS:playerDPS,maxDPS:maxDPS,};},computeDPSData:function(){var cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,this.activetargets,this.phaseindex,null);if(this.dpsCache.has(cacheID)){return this.dpsCache.get(cacheID);}
var res;if(this.graphdata.dpsmode>=0){res=this.computeDPS(this.graphdata.dpsmode,null,cacheID);}else{res=this.computeDPS(0,this.computePhaseBreaks,cacheID);}
this.dpsCache.set(cacheID,res);return res;},computeDPSRelatedData:function(){var cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,this.activetargets,this.phaseindex,this.mode);if(this.dataCache.has(cacheID)){return this.dataCache.get(cacheID);}
var res=[];var dpsData=this.computeDPSData();var offset=0;for(i=0;i<logData.players.length;i++){var pDPS=dpsData.playerDPS[i];res.push((this.mode===0?pDPS.total:(this.mode===1?pDPS.target:pDPS.cleave)));}
res.push((this.mode===0?dpsData.allDPS.total:(this.mode===1?dpsData.allDPS.target:dpsData.allDPS.cleave)));var maxDPS=(this.mode===0?dpsData.maxDPS.total:(this.mode===1?dpsData.maxDPS.target:dpsData.maxDPS.cleave));var hps=[];for(var i=0;i<this.graph.targets.length;i++){var health=this.graph.targets[i].healthStates;addPointsToGraph(res,health,maxDPS);}
for(var i=0;i<this.graph.targets.length;i++){var barrier=this.graph.targets[i].barrierStates;addPointsToGraph(res,barrier,maxDPS);}
for(var i=0;i<this.graph.targets.length;i++){var breakbar=this.graph.targets[i].breakbarPercentStates;addPointsToGraph(res,breakbar,maxDPS);}
updateMechanicsYValues(res,this.phase,this.phaseindex,this.graph,maxDPS);this.dataCache.set(cacheID,res);return res;},}});}
{Vue.component("dps-graph-mode-selector-component",{props:['data','phaseduration','phasehassubphases','ignorebreakbar',"column"],template:`    <div class="d-flex flex-row justify-content-center mt-1 mb-1">             <ul class="nav nav-pills d-flex flex-wrap justify-content-center mr-3 scale85" :class="{'flex-row': !column, 'flex-column': column}">            <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.dpsmode = 0" :class="{active: data.dpsmode === 0}">Full</a>            </li>            <li v-if="phaseduration > 4" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.dpsmode = 4" :class="{active: data.dpsmode === 4}">4s</a>            </li>            <li v-if="phaseduration > 10" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.dpsmode = 10" :class="{active: data.dpsmode === 10}">10s</a>            </li>            <li v-if="phaseduration > 20" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.dpsmode = 20" :class="{active: data.dpsmode === 20}">20s</a>            </li>            <li v-if="phaseduration > 30" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.dpsmode = 30" :class="{active: data.dpsmode === 30}">30s</a>            </li>            <li v-if="phasehassubphases" class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.dpsmode = -1" :class="{active: data.dpsmode === -1}">Phase</a>            </li>            <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <custom-numberform-component :minValue="0" :maxValue="Math.floor(phaseduration / 2) * 2" :id="'customDPS'"                                                   :placeholderValue="0"></custom-numberform-component>            </li>                </ul>            <ul class="nav nav-pills d-flex flex-wrap justify-content-center ml-3 scale85" :class="{'flex-row': !column, 'flex-column': column}">            <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Power + Condition">                <a class="nav-link" @click="data.damagemode = damageModeEnum.All" :class="{active: data.damagemode === damageModeEnum.All}"><img src="https://wiki.guildwars2.com/images/thumb/6/6a/Damage.png/30px-Damage.png" alt="All"                    class="icon"></a>            </li>                <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Power">                <a class="nav-link" @click="data.damagemode = damageModeEnum.Power" :class="{active: data.damagemode === damageModeEnum.Power}"><img src="https://wiki.guildwars2.com/images/2/23/Power.png" alt="Power"                    class="icon"></a>            </li>                                 <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Condition">                <a class="nav-link" @click="data.damagemode = damageModeEnum.Condition" :class="{active: data.damagemode === damageModeEnum.Condition}"><img src="https://wiki.guildwars2.com/images/5/54/Condition_Damage.png" alt="Condition"                    class="icon"></a>            </li>            <li class="nav-item d-flex flex-row justify-content-center align-items-center" v-if="hasBreakbarDamage" data-original-title="Breakbar">                <a class="nav-link" @click="data.damagemode = damageModeEnum.Breakbar" :class="{active: data.damagemode === damageModeEnum.Breakbar}"> <img src="https://wiki.guildwars2.com/images/a/ae/Unshakable.png" alt="Breakbar"                    class="icon"></a>            </li>        </ul>        <ul class="nav nav-pills d-flex flex-wrap justify-content-center ml-3 scale85" :class="{'flex-row': !column, 'flex-column': column}">            <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.graphmode = graphModeEnum.DPS" :class="{active: data.graphmode === graphModeEnum.DPS}">PS</a>            </li>                <li class="nav-item d-flex flex-row justify-content-center align-items-center" data-original-title="Centered">                <a class="nav-link" @click="data.graphmode = graphModeEnum.CenteredDPS" :class="{active: data.graphmode === graphModeEnum.CenteredDPS}">Ctrd.PS</a>            </li>                                 <li class="nav-item d-flex flex-row justify-content-center align-items-center">                <a class="nav-link" @click="data.graphmode = graphModeEnum.Damage" :class="{active: data.graphmode === graphModeEnum.Damage}">Cumulative</a>            </li>        </ul>    </div>`,mounted(){var _this=this;$('#customDPS').on("input ",function(){_this.data.dpsmode=Math.ceil($(this).val()/2)*2;});$('#customDPS').on("click ",function(){_this.data.dpsmode=Math.ceil($(this).val()/2)*2;});},computed:{graphModeEnum:function(){return GraphType;},damageModeEnum:function(){return DamageType;},hasBreakbarDamage:function(){return!this.ignorebreakbar&&logData.hasBreakbarDamage;}}});}
{Vue.component("graph-stats-component",{props:["activetargets","phaseindex",'playerindex','light'],template:`    <div>        <div v-if="!targetless">            <ul class="nav nav-tabs">                <li>                    <a class="nav-link" :class="{active: mode === 0}" @click="mode = 0">Total</a>                </li>                <li>                    <a class="nav-link" :class="{active: mode === 1}" @click="mode = 1">Target</a>                </li>                <li>                    <a class="nav-link" :class="{active: mode === 2}" @click="mode = 2">Cleave</a>                </li>            </ul>        </div>        <keep-alive>            <dps-graph-component v-for="(phase, id) in phases" :key="id" v-if="id === phaseindex"                :activetargets="activetargets" :mode="mode" :phaseindex="id" :playerindex="playerindex" :light="light">            </dps-graph-component>        </keep-alive>    </div>`,data:function(){return{targetless:logData.targetless,mode:logData.targetless?0:1,};},computed:{phases:function(){return logData.phases;}}});}
{Vue.component("player-graph-tab-component",{props:["playerindex","phaseindex","activetargets","light"],template:`    <div>        <dps-graph-mode-selector-component :data="graphdata" :phaseduration="this.phase.end - this.phase.start"            :phasehassubphases="!!this.phase.subPhases" :ignorebreakbar="false" :column="false">        </dps-graph-mode-selector-component>        <h3 class="text-center mt-1 mb-1">{{graphname}}</h3>        <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>        <rotation-legend-component></rotation-legend-component>    </div>`,mixins:[graphComponent,damageGraphComponent],data:function(){return{playerOffset:0,graphOffset:0};},watch:{light:{handler:function(){var textColor=this.light?'#495057':'#cccccc';this.layout.yaxis.gridcolor=textColor;this.layout.yaxis.color=textColor;this.layout.yaxis2.gridcolor=textColor;this.layout.yaxis2.color=textColor;this.layout.yaxis3.gridcolor=textColor;this.layout.yaxis3.color=textColor;this.layout.xaxis.gridcolor=textColor;this.layout.xaxis.color=textColor;this.layout.font.color=textColor;for(var i=0;i<this.layout.shapes.length;i++){this.layout.shapes[i].line.color=textColor;}
this.layout.datarevision=new Date().getTime();}}},created:function(){var images=[];this.data=[];this.playerOffset+=computeRotationData(this.player.details.rotation[this.phaseindex],images,this.data,this.phase,this.player,1);var oldOffset=this.playerOffset;this.playerOffset+=computeBuffData(this.player.details.boonGraph[this.phaseindex],this.data);var hasBuffs=oldOffset!==this.playerOffset;this.graphOffset=this.playerOffset;this.playerOffset+=computeTargetBreakbarData(this.graph,logData.targets,this.phase,this.data,'y3');this.playerOffset+=computeTargetBarrierData(this.graph,logData.targets,this.phase,this.data,'y3');this.playerOffset+=computeTargetHealthData(this.graph,logData.targets,this.phase,this.data,'y3');this.playerOffset+=computePlayerBarrierData(this.barrierGraph,this.player,this.data,'y3');this.playerOffset+=computePlayerHealthData(this.healthGraph,this.player,this.data,'y3');this.data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:this.player.colTotal,},yaxis:'y3',hoverinfo:'name+y+x',name:'Total'});if(!logData.targetless){this.data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:this.player.colTarget,},yaxis:'y3',hoverinfo:'name+y+x',name:'Target'});this.data.push({x:this.phase.times,y:[],mode:'lines',line:{shape:'spline',color:this.player.colCleave,},yaxis:'y3',hoverinfo:'name+y+x',name:'Cleave'});}
this.layout=getActorGraphLayout(images,this.light?'#495057':'#cccccc',hasBuffs);computePhaseMarkups(this.layout.shapes,this.layout.annotations,this.phase,this.light?'#495057':'#cccccc');this.updateVisibily(this.layout.images,this.phase.start,this.phase.end);},activated:function(){var div=document.getElementById(this.graphid);var layout=this.layout;var images=layout.images;var _this=this;div.on('plotly_relayout',function(evt){var x0=layout.xaxis.range[0];var x1=layout.xaxis.range[1];if(_this.updateVisibily(images,x0,x1)){layout.datarevision=new Date().getTime();}});},computed:{healthGraph:function(){return this.graph.players[this.playerindex].healthStates;},barrierGraph:function(){return this.graph.players[this.playerindex].barrierStates;},graphid:function(){return "playergraph-"+this.playerindex+'-'+this.phaseindex;},player:function(){return logData.players[this.playerindex];},damageGraphName:function(){switch(this.graphdata.damagemode){case DamageType.All:return "damage";case DamageType.Power:return "powerDamage";case DamageType.Condition:return "conditionDamage";case DamageType.Breakbar:return "breakbarDamage";default:throw new Error("unknown enum in damage graph name");}},graphname:function(){var name=getDamageGraphName(this.graphdata.damagemode,this.graphdata.graphmode);switch(this.graphdata.dpsmode){case 0:name="Full "+name;break;case-1:name="Phase "+name;break;default:name=this.graphdata.dpsmode+"s "+name;break;}
return name;},computeData:function(){this.layout.datarevision=new Date().getTime();this.layout.yaxis3.title=graphTypeEnumToString(this.graphdata.graphmode);var res=this.data;var data=this.computeDPSRelatedData();this.data[this.playerOffset].y=data[0];if(!logData.targetless){this.data[this.playerOffset+1].y=data[1];this.data[this.playerOffset+2].y=data[2];}
var offset=3;for(var i=this.graphOffset;i<this.playerOffset;i++){this.data[i].y=data[offset++];}
return res;}},methods:{computeDPSData:function(){var cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,this.activetargets,this.phaseindex,null);if(this.dpsCache.has(cacheID)){return this.dpsCache.get(cacheID);}
var data;var graphData=this.graph.players[this.playerindex];var damageArrayToUse=this.damageGraphName;if(this.graphdata.dpsmode>=0){data=computePlayerDPS(this.player,graphData[damageArrayToUse],this.graphdata.dpsmode,null,this.activetargets,cacheID,this.phase.times,this.graphdata.graphmode,this.graphdata.damagemode);}else{data=computePlayerDPS(this.player,graphData[damageArrayToUse],0,this.computePhaseBreaks,this.activetargets,cacheID,this.phase.times,this.graphdata.graphmode,this.graphdata.damagemode);}
var res={maxDPS:data.maxDPS.total,playerDPS:data.dps};this.dpsCache.set(cacheID,res);return res;},computeDPSRelatedData:function(){var cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,this.activetargets,this.phaseindex,null);if(this.dataCache.has(cacheID)){return this.dataCache.get(cacheID);}
var dpsData=this.computeDPSData();var res=[];res.push(dpsData.playerDPS.total);res.push(dpsData.playerDPS.target);res.push(dpsData.playerDPS.cleave);for(var i=0;i<this.graph.targets.length;i++){addPointsToGraph(res,this.graph.targets[i].breakbarPercentStates,dpsData.maxDPS);}
for(var i=0;i<this.graph.targets.length;i++){addPointsToGraph(res,this.graph.targets[i].barrierStates,dpsData.maxDPS);}
for(var i=0;i<this.graph.targets.length;i++){addPointsToGraph(res,this.graph.targets[i].healthStates,dpsData.maxDPS);}
addPointsToGraph(res,this.barrierGraph,dpsData.maxDPS);addPointsToGraph(res,this.healthGraph,dpsData.maxDPS);this.dataCache.set(cacheID,res);return res;},}});}
{function getActorsRotationLayout(images,color,players,phase){var layout={barmode:'stack',legend:{traceorder:'reversed'},hovermode:'x',hoverdistance:50,images:images,font:{color:color},xaxis:{title:'Time(sec)',color:color,gridcolor:color,rangemode:'nonnegative',xrangeslider:{},tickmode:'auto',nticks:8},paper_bgcolor:'rgba(0,0,0,0)',plot_bgcolor:'rgba(0,0,0,0)',shapes:[],annotations:[],margin:{l:150,},width:1300,height:players.length*65+180,datarevision:new Date().getTime(),};var delta=1.0/players.length;for(var i=0;i<players.length;i++){var player=players[i];var name;if(i===0){name='yaxis';}else{name='yaxis'+(i+1);}
layout[name]={domain:[i*delta,(i+1)*delta],fixedrange:true,showgrid:false,showticklabels:false,color:color,range:[0,2]};}
return layout;};Vue.component("player-rotations-component",{props:["phaseindex","light","playerindex"],template:`    <div>        <div style="position:absolute; margin-top: 60px; z-index: 1;">            <a href="#" class="dropdown-toggle" data-toggle="dropdown" title="Filter Players" style="font-size: 1.1em;">                Players <span class="caret"></span>            </a>            <ul class="dropdown-menu p-2 font-weight-normal" style="min-width: 165px; max-width: 165px;">                <div class="d-flex flex-column justify-content-center align-items-center mb-1"                    style="border-bottom: 2px solid #bbb;">                    <li>                        <button style="width:130px; padding: 0.4rem 0.4rem;" type="button" class="btn btn-primary btn-sm"                            @click="for (var i = 0; i < selectedPlayers.length; i++) {selectedPlayers[i].selected = true;}" @click.stop="stopClickEvent">Select all</button>                    </li>                    <li class="mb-1">                        <button style="width:130px; padding: 0.4rem 0.4rem;" type="button" class="btn btn-primary btn-sm"                            @click="for (var i = 0; i < selectedPlayers.length; i++) {selectedPlayers[i].selected = false;}" @click.stop="stopClickEvent">Deselect all</button>                    </li>                </div>                <li v-for="(player, index) in _players" :key="index">                    <input :id="'rotations-player-' + index  + '-' + phaseindex" type="checkbox"                        v-model="selectedPlayers[index].selected" @click.stop="stopClickEvent" />                    <label :for="'rotations-player-' + index + '-' + phaseindex" @click.stop="stopClickEvent"                        style="font-size: 1.0em; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; width: 130px; margin-top: 2px; margin-left: 5px; position: absolute;">                                 <img class="icon" :src="player.icon">                        {{player.name}}                    </label>                </li>            </ul>        </div>        <graph-component :id="graphid" :layout="layout" :data="data"></graph-component>        <rotation-legend-component></rotation-legend-component>    </div>`,mixins:[graphComponent],data:function(){var selectedPlayers=[];for(var i=0;i<logData.players.length;i++){selectedPlayers.push({selected:true});}
return{annotationsOffset:0,selectedPlayers:selectedPlayers};},watch:{light:{handler:function(){var textColor=this.light?'#495057':'#cccccc';var players=this.players;for(var i=0;i<players.length;i++){var player=players[i];var name;if(i===0){name='yaxis';}else{name='yaxis'+(i+1);}
this.layout[name].gridcolor=textColor;this.layout[name].color=textColor;this.layout.annotations[this.annotationsOffset+i].bgcolor=player.id===this.playerindex?(this.light?'rgba(120, 240, 0, 0.5)':'rgba(50, 120, 0, 0.5)'):'rgba(0,0,0,0)';}
this.layout.xaxis.gridcolor=textColor;this.layout.xaxis.color=textColor;this.layout.font.color=textColor;for(var i=0;i<this.layout.shapes.length;i++){this.layout.shapes[i].line.color=textColor;}
this.layout.datarevision=new Date().getTime();}},playerindex:{handler:function(){var players=this.players;for(var i=0;i<players.length;i++){var player=players[i];this.layout.annotations[this.annotationsOffset+i].bgcolor=player.id===this.playerindex?(this.light?'rgba(120, 240, 0, 0.5)':'rgba(50, 120, 0, 0.5)'):'rgba(0,0,0,0)';}
this.layout.datarevision=new Date().getTime();}},selectedPlayers:{deep:true,handler:function(){this.computeLayout();}}},created:function(){this.computeLayout();},activated:function(){var div=document.getElementById(this.graphid);var _this=this;div.on('plotly_relayout',function(evt){var layout=_this.layout;var images=layout.images;var x0=layout.xaxis.range[0];var x1=layout.xaxis.range[1];if(_this.updateVisibily(images,x0,x1)){layout.datarevision=new Date().getTime();}});},methods:{stopClickEvent:function(event){event.stopPropagation();},computeLayout:function(){var backUpXAxis=null;if(this.layout){backUpXAxis=this.layout.xaxis;}
this.data=[];var images=[];for(var i=0;i<this.players.length;i++){var player=this.players[i];computeRotationData(player.details.rotation[this.phaseindex],images,this.data,this.phase,player,i);}
this.layout=getActorsRotationLayout(images,this.light?'#495057':'#cccccc',this.players,this.phase);if(backUpXAxis){this.layout.xaxis=backUpXAxis;}
this.updateVisibily(images,this.phase.start,this.phase.end);computePhaseMarkups(this.layout.shapes,this.layout.annotations,this.phase,this.light?'#495057':'#cccccc');this.annotationsOffset=this.layout.annotations.length;for(var i=0;i<this.players.length;i++){var player=this.players[i];this.layout.annotations.push({xref:'paper',yref:i===0?'y':'y'+(i+1),x:0,y:1,xanchor:'right',yanchor:'middle',align:'left',text:player.name,showarrow:false,width:145,height:62,bgcolor:player.id===this.playerindex?(this.light?'rgba(120, 240, 0, 0.5)':'rgba(50, 120, 0, 0.5)'):'rgba(0,0,0,0)'});}},},computed:{phase:function(){return logData.phases[this.phaseindex];},players:function(){var res=[];for(var i=0;i<logData.players.length;i++){if(this.selectedPlayers[i].selected){res.push(logData.players[i]);}}
return res;},_players:function(){return logData.players;},graphid:function(){return "playersrotation-"+'-'+this.phaseindex;},}});}
{Vue.component("player-rotations-tab-component",{props:["phaseindex","light",'playerindex'],template:`    <div class="d-flex flex-column align-items-center justify-content-center">        <h3 class="text-center mt-1 mb-1">Players' Rotation</h3>        <keep-alive>            <player-rotations-component v-for='(phase, index) in phases' :key="'rotations' + index"                v-if="index === phaseindex" :phaseindex="phaseindex" :light="light" :playerindex="playerindex">                </player-rotation-component>        </keep-alive>    </div>`,computed:{phases:function(){return logData.phases;},}});}
{Vue.component('rotation-legend-component',{template:`    <div class="card">        <div class="card-body container">            <p><u>Fill</u></p>            <span style="padding: 2px; background-color:#0000FF; border-style:solid; border-width: 1px; border-color:#000000; color:#FFFFFF">                Hit                without aftercast            </span>            <span style="padding: 2px; background-color:#00FF00; border-style:solid; border-width: 1px; border-color:#000000; color:#000000">                Hit                with full aftercast            </span>            <span style="padding: 2px; background-color:#FF0000; border-style:solid; border-width: 1px; border-color:#000000; color:#FFFFFF">                Attack                canceled before completing            </span>            <span style="padding: 2px; background-color:#00FFFF; border-style:solid; border-width: 1px; border-color:#000000; color:#000000" data-original-title="50 ms on graph so that it appears">                Instant cast            </span>            <span style="padding: 2px; background-color:#FFFF00; border-style:solid; border-width: 1px; border-color:#000000; color:#000000">                Unknown                state            </span>            <p class="mt-2"><u>Outline</u></p>            <div>                The outline will be a linear gradient between slowed animation and normal animation when slowed, animation with quickness and normal animation when accelerated.            </div>            <span style="padding: 2px; background-color:#999999; border-style:solid; border-width: 2px; border-color:rgb(220,125,30); color:#000000">                Slowed                animation length            </span>            <span style="padding: 2px; background-color:#999999; border-style:solid; border-width: 2px; border-color:rgb(125,125,125); color:#000000">                Normal                animation length            </span>            <span style="padding: 2px; background-color:#999999; border-style:solid; border-width: 2px; border-color:rgb(220,20,220); color:#000000">                Animation                with quickness            </span>        </div>    </div>`});}
{Vue.component("target-graph-tab-component",{props:["targetindex","phaseindex",'light'],template:`    <div>        <dps-graph-mode-selector-component :data="graphdata" :phaseduration="this.phase.end - this.phase.start"            :phasehassubphases="!!this.phase.subPhases" :ignorebreakbar="true" :column="false">        </dps-graph-mode-selector-component>        <h3 class="text-center mt-1 mb-1">{{graphname}}</h3>        <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>        <rotation-legend-component></rotation-legend-component>    </div>`,mixins:[graphComponent,damageGraphComponent,targetTabGraphComponent],computed:{graphid:function(){return "targetgraph-"+this.phaseTargetIndex+'-'+this.phaseindex;},boonGraph:function(){return this.target.details.boonGraph[this.phaseindex];}},});}
{Vue.component("targetperplayer-graph-tab-component",{props:["targetindex","phaseindex",'light','playerindex'],template:`    <div>        <dps-graph-mode-selector-component :data="graphdata" :phaseduration="this.phase.end - this.phase.start"            :phasehassubphases="!!this.phase.subPhases" :ignorebreakbar="true" :column="false">        </dps-graph-mode-selector-component>        <h3 class="text-center mt-1 mb-1">{{graphname}}</h3>        <h3 class="text-center mt-1 mb-1">Buffs applied by {{player.name}}</h3>        <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>        <rotation-legend-component></rotation-legend-component>    </div>`,mixins:[graphComponent,damageGraphComponent,targetTabGraphComponent],computed:{graphid:function(){return "targetgraphperplayer-"+this.phaseTargetIndex+'-'+this.phaseindex+'-'+this.playerindex;},boonGraph:function(){return this.target.details.boonGraphPerSource[this.phaseindex][this.playerindex];},player:function(){return logData.players[this.playerindex];}},});}
{Vue.component('target-data-component',{props:['targetid'],template:`    <div class="d-flex flex-row justify-content-center align-items-center mb-2">        <img v-if="target.health > 0" src="https://wiki.guildwars2.com/images/b/be/Vitality.png" alt="Health"            class="icon" :data-original-title="'Health: ' + target.health">        <img v-if="target.tough > 0" src="https://wiki.guildwars2.com/images/1/12/Toughness.png" alt="Toughness"            class="icon" hbHeight :data-original-title="'Toughness: ' + target.tough">        <img v-if="target.hbWidth > 0" src="https://wiki.guildwars2.com/images/e/e7/1863930.png" alt="Hitbox Width"            class="icon" :data-original-title="'Hitbox Width: ' + target.hbWidth">        <img v-if="target.hbHeight > 0" src="https://wiki.guildwars2.com/images/5/57/1863934.png" alt="Hitbox Half-Height"            class="icon" :data-original-title="'Hitbox Half-Height: ' + 0.5 * target.hbHeight">    </div>`,computed:{target:function(){return logData.targets[this.targetid];}}});}
{Vue.component("main-view-component",{props:['light'],template:`    <div>        <div class="d-flex flex-row justify-content-center mt-1" id="phase-nav">            <phase-component :phases="logdata.phases"></phase-component>        </div>        <div class="d-flex flex-row justify-content-center mb-2 mt-2" id="actors">            <div v-if="hasTargets" v-show="tab !== 5" :class="{'d-flex': tab !== 5}"                class="flex-row justify-content-center align-items-center flex-wrap mr-5">                <target-component :targets="logdata.targets" :phaseindex="activePhase"></target-component>            </div>            <div class="ml-5">                <player-component :players="logdata.players"></player-component>            </div>        </div>             <h2 class="text-center">{{ name }}</h2>        <ul class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: tab === 0}" @click="tab = 0">General Stats</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 1}" @click="tab = 1">Buffs</a>            </li>            <li v-if="hasDamageMods">                <a class="nav-link" :class="{active: tab === 2}" @click="tab = 2">Damage Modifiers</a>            </li>            <li v-if="hasMechanics">                <a class="nav-link" :class="{active: tab === 3}" @click="tab = 3">Mechanics</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 4}" @click="tab = 4">Graph</a>            </li>            <li v-if="players.length > 1">                <a class="nav-link" :class="{active: tab === 7}" @click="tab = 7">Rotations</a>            </li>            <li v-if="hasTargets">                <a class="nav-link" :class="{active: tab === 5}" @click="tab = 5">Targets Summary</a>            </li>            <li>                <a class="nav-link" :class="{active: tab === 6}" @click="tab = 6">Player Summary</a>            </li>        </ul>        <keep-alive>            <stat-tables-component v-if="tab === 0" :key="'stat-tables'"                :phaseindex="activePhase" :playerindex="activePlayer"                 :activetargets="activePhaseTargets"></stat-tables-component>            <buff-tables-component v-if="tab === 1" :key="'buff-tables'"                :phaseindex="activePhase" :playerindex="activePlayer"></buff-tables-component>            <dmgmodifier-stats-component v-if="tab === 2" :key="'modifier'"                :phaseindex="activePhase" :playerindex="activePlayer" :activetargets="activePhaseTargets">            </dmgmodifier-stats-component>            <mechanics-stats-component v-if="tab === 3" :key="'mechanics'"                :phaseindex="activePhase" :playerindex="activePlayer"></mechanics-stats-component>            <graph-stats-component v-if="tab === 4" :key="'graph'"                :activetargets="activePhaseTargets" :phaseindex="activePhase" :playerindex="activePlayer"                :light="light"></graph-stats-component>            <player-rotations-tab-component v-if="tab === 7" :key="'rotations'" :phaseindex="activePhase"             :light="light" :playerindex="activePlayer">            </player-rotations-tab-component>            <target-stats-component v-if="tab === 5" :key="'targets'" :playerindex="activePlayer"                :simplephase="logdata.phases[activePhase]" :phaseindex="activePhase" :light="light">            </target-stats-component>            <player-stats-component v-if="tab === 6" :key="'players'"                :activeplayer="activePlayer" :phaseindex="activePhase" :activetargets="activePhaseTargets"                :light="light"></player-stats-component>        </keep-alive>    </div>`,data:function(){return{tab:0,logdata:simpleLogData};},computed:{activePhase:function(){var phases=this.logdata.phases;for(var i=0;i<phases.length;i++){if(phases[i].active){return i;}}},phase:function(){return logData.phases[this.activePhase];},activePlayer:function(){var players=this.logdata.players;for(var i=0;i<players.length;i++){if(players[i].active){return i;}}
return-1;},name:function(){return this.phase.name+" Summary";},activePhaseTargets:function(){var res=[];var activePhase=logData.phases[this.activePhase];for(var i=0;i<activePhase.targets.length;i++){var target=this.logdata.targets[activePhase.targets[i]];if(target.active){res.push(i);}}
return res;},hasDamageMods:function(){return Object.keys(logData.damageModMap).length!==0;},hasMechanics:function(){return logData.mechanicMap.length>0&&!logData.noMechanics;},hasTargets:function(){return!logData.targetless;},players:function(){return logData.players;}}});}};function mainLoad(){var firstActive=logData.phases[0];for(var i=0;i<logData.phases.length;i++){var phase=logData.phases[i];phase.durationS=phase.duration/1000.0
var times=[];var dur=phase.end-phase.start;var floorDur=Math.floor(dur);phase.needsLastPoint=dur>floorDur+1e-3;for(var j=0;j<=floorDur;j++){times.push(j);}
if(phase.needsLastPoint){times.push(phase.end-phase.start);}
phase.times=times;simpleLogData.phases.push({active:firstActive===phase,focus:-1});}
for(var i=0;i<logData.targets.length;i++){simpleLogData.targets.push({active:true});logData.targets[i].id=i;logData.targets[i].dpsGraphCache=new Map();}
for(var i=0;i<logData.players.length;i++){var playerData=logData.players[i];simpleLogData.players.push({active:!!playerData.isPoV,targetActive:!playerData.isFake});playerData.dpsGraphCache=new Map();playerData.id=i;}
compileTemplates();if(!!crData){compileCRTemplates();}
if(!!healingStatsExtension){compileHealingExtTemplates();}
new Vue({el:"#content",data:{light:typeof(window.theme)!=="undefined"?(window.theme==='yeti'):logData.lightTheme,mode:0,cr:!!crData,healingExtShow:!!healingStatsExtension||logData.evtcVersion>=20210701,healingExt:!!healingStatsExtension},methods:{switchTheme:function(state){if(state===this.light){return;}
var style=this.light?'yeti':'slate';this.light=state;var newStyle=this.light?'yeti':'slate';document.body.classList.remove("theme-"+style);document.body.classList.add("theme-"+newStyle);if(storeTheme)storeTheme(newStyle);var theme=document.getElementById('theme');theme.href=themes[newStyle];},getLogData:function(){return logData;}},computed:{errorMessages:function(){return logData.logErrors;},uploadLinks:function(){var res=[{key:"DPS Reports Link (EI)",url:""},{key:"Raidar Link",url:""}];var hasAny=false;for(var i=0;i<logData.uploadLinks.length;i++){var link=logData.uploadLinks[i];if(link.length>0){hasAny=true;res[i].url=link;}}
return hasAny?res:null;},usedExtensions:function(){if(!logData.usedExtensions){return null;}
return logData.usedExtensions;}},mounted(){var element=document.getElementById("loading");element.parentNode.removeChild(element);}});$("body").tooltip({selector:"[data-original-title]",html:true,boundary:"window"});};window.onload=function(){Vue.config.devtools=true;var img=document.createElement("img");img.style.display="none";document.body.appendChild(img);img.onload=function(){mainLoad();document.body.removeChild(img);};img.onerror=function(){apiRenderServiceOkay=false;console.warn("Warning: GW2 Render service unavailable, switching to darthmaim-cdn");console.warn("More info at https://dev.gw2treasures.com/services/icons");mainLoad();document.body.removeChild(img);};img.src="https://render.guildwars2.com/file/2FA9DF9D6BC17839BBEA14723F1C53D645DDB5E1/102852.png";}