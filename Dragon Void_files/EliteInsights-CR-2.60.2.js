"use strict";function compileCRTemplates(){{Vue.component("combat-replay-damage-data-component",{template:`    <div class="d-flex flex-column justify-content-center">        <dps-graph-mode-selector-component :data="graphdata"            :phaseduration="this.phase.end - this.phase.start" :phasehassubphases="false" :ignorebreakbar="false" :style="{'width': selectorWidth + 'px'}" :column="selectorWidth < 280">        </dps-graph-mode-selector-component>        <combat-replay-damage-stats-component :time="time" :playerid="selectedplayerid" :graphdata="graphdata">        </combat-replay-damage-stats-component>    </div>`,props:["time","selectedplayerid"],data:function(){return{graphdata:{dpsmode:0,graphmode:GraphType.DPS,damagemode:DamageType.All,}};},computed:{phase:function(){return logData.phases[0];},targets:function(){return logData.targetless?[]:this.phase.targets;},selectorWidth:function(){return Math.min(273+this.targets.length*130,650);},}});}
{Vue.component("combat-replay-status-data-component",{template:`    <div class="d-flex flex-column justify-content-center">        <ul class="nav nav-pills d-flex flex-row justify-content-center mb-1">            <li class="nav-item">                <a class="nav-link" :class="{active: mode === 0}" @click="mode = 0">Players</a>            </li>            <li v-if="!targetless" class="nav-item">                <a class="nav-link" :class="{active: mode === 1}" @click="mode = 1">Targets</a>            </li>            <li class="nav-item">                <a class="nav-link" :class="{active: mode === 2}" @click="mode = 2">Mechanics</a>            </li>        </ul>        <div class="squad-details">            <keep-alive>                <combat-replay-players-stats-component v-if="mode === 0" :key="'players-cr-details'" :time="time" :selectedplayerid="selectedactorid"></combat-replay-players-stats-component>                <combat-replay-targets-stats-component v-if="mode === 1" :key="'targets-cr-details'" :time="time" :selectedtargetid="selectedactorid"></combat-replay-targets-stats-component>                <combat-replay-mechanics-list-component v-if="mode === 2" :key="'mechanics-cr-details'" :selectedplayerid="selectedactorid"></combat-replay-mechanics-list-component>            </keep-alive>        </div>    </div>`,props:["time","selectedactorid"],data:function(){return{targetless:logData.targetless,mode:0};}});}
{Vue.component("combat-replay-damage-stats-component",{mixins:[timeRefreshComponent,numberComponent,sortedTableComponent,colSliderComponent(2),rowSliderComponent(10)],props:["playerid","graphdata"],template:`    <div>        <div class="d-flex flex-row justify-content-center">            <div v-if="rowPageCount > 0" style="width:25px;">                <table-scroll-component :min="0" :max="rowPageCount" :width="'230px'" :height="'10px'" :transform="colPageCount > 0 ? 'translate(-100px, 210px) rotate(90deg)' : 'translate(-100px, 185px) rotate(90deg)' " :pagestructure="rowStructure"></table-scroll-component>            </div>            <div>                <div v-if="colPageCount > 0">                    <table-scroll-component :min="0" :max="colPageCount" :width="'200px'" :height="'10px'" :transform="'translate(350px, 5px)'" :pagestructure="colStructure"></table-scroll-component>                </div>                <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">                    <thead>                        <tr>                            <th class="prof-cell" :class="getHeaderClass('Prof')" @click="sortBy('Prof')"></th>                            <th class="name-cr-cell text-left" :class="getHeaderClass('Name')" @click="sortBy('Name')">                                Name                            </th>                            <th class="damage-dist-cell" :class="getHeaderClass('All')" @click="sortBy('All')">                                All                            </th>                            <th v-if="!targetless" v-for="(col, colIndex) in tableData.cols" v-show="isInColPage(colIndex)"                                class="damage-cr-cell" :class="getHeaderClass('Target', colIndex)" @click="sortBy('Target', colIndex)">                                <span class="ellipsis" :title="col.name">                                    {{col.name}}                                </span>                            </th>                        </tr>                    </thead>                    <tbody>                        <tr v-for="(row, rowIndex) in sortData(tableData.rows)" :class="{active: row.player.uniqueID === playerid}" v-show="isInRowPage(rowIndex)">                            <td :class="getBodyClass('Prof')" :data-original-title="row.player.profession">                                <img :src="row.player.icon" :alt="row.player.profession" class="icon">                                <span style="display:none">                                    {{row.player.profession}}                                </span>                            </td>                            <td class="text-left" :class="getBodyClass('Name')">                                <span class="ellipsis" :title="row.player.acc">                                    {{row.player.name}}                                </span>                            </td>                            <td :class="getBodyClass('All')">                                {{tableRound(row.dps[row.dps.length - 1])}}                            </td>                            <td v-if="!targetless" v-for="(col, colIndex) in tableData.cols" v-show="isInColPage(colIndex)"                                :class="getBodyClass('Target', colIndex)">                                {{tableRound(row.dps[colIndex])}}                            </td>                        </tr>                    </tbody>                    <tfoot>                        <tr v-for="sum in tableData.sums">                            <td></td>                            <td>                                {{sum.name}}                            </td>                            <td>                                {{tableRound(sum.dps[sum.dps.length - 1])}}                            </td>                            <td v-if="!targetless" v-for="(col, colIndex) in tableData.cols" v-show="isInColPage(colIndex)">                                {{tableRound(sum.dps[colIndex])}}                            </td>                        </tr>                    </tfoot>                </table>            </div>        </div>    </div>`,data:function(){return{targetless:logData.targetless,sortdata:{order:"desc",index:-1,key:"All"},};},methods:{tableRound:function(value){return this.graphdata.damagemode==GraphType.Breakbar?this.round1(value):this.round(value)},sortBy:function(key,index){this.sortByBase(this.sortdata,key,index);},getHeaderClass:function(key,index){return this.getHeaderClassBase(this.sortdata,key,index);},getBodyClass:function(key,index){var classes=this.getBodyClassBase(this.sortdata,key,index);return classes;},sortData:function(rows){var order=this.sortdata.order==="asc"?1:-1;switch(this.sortdata.key){case "Prof":rows.sort((x,y)=>order*x.player.profession.localeCompare(y.player.profession));break;case "Name":rows.sort((x,y)=>order*x.player.name.localeCompare(y.player.name));break;case "All":rows.sort((x,y)=>order*(x.dps[x.dps.length-1]-y.dps[y.dps.length-1]));break;case "Target":var index=this.sortdata.index;rows.sort((x,y)=>order*(x.dps[index]-y.dps[index]));break;default:return null;break;}
return rows;},},created(){var i,cacheID;var allTargets=[];for(var j=0;j<this.targets.length;j++){var activeTargets=[j];allTargets.push(j);cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,activeTargets,0,null);for(i=0;i<logData.players.length;i++){computePlayerDPS(logData.players[i],this.graph[i].damage,this.graphdata.dpsmode,null,activeTargets,cacheID,this.phase.times,this.graphdata.graphmode,this.graphdata.damagemode);}}
cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,allTargets,0,null);for(i=0;i<logData.players.length;i++){computePlayerDPS(logData.players[i],this.graph[i].damage,this.graphdata.dpsmode,null,allTargets,cacheID,this.phase.times,this.graphdata.graphmode,this.graphdata.damagemode);}},computed:{colPageCount:function(){return this.tableData.cols.length-this.colStructure.perpage;},rowPageCount:function(){return this.tableData.rows.length-this.rowStructure.perpage;},tableid:function(){return "combat-replay-dps-table";},phase:function(){return logData.phases[0];},targets:function(){return this.phase.targets;},graph:function(){return graphData.phases[0].players;},graphModeEnum:function(){return GraphType;},hasBreakbarDamage:function(){return logData.hasBreakbarDamage;},damageGraphName:function(){switch(this.graphdata.damagemode){case DamageType.All:return "damage";case DamageType.Power:return "powerDamage";case DamageType.Condition:return "conditionDamage";case DamageType.Breakbar:return "breakbarDamage";default:throw new Error("unknown enum in damage graph name");}},tableData:function(){var rows=[];var cols=[];var sums=[];var total=[];var tS=this.timeToUse/1000.0;var curTime=Math.floor(tS);var nextTime=curTime+1;var dur=Math.floor(this.phase.end-this.phase.start);if(nextTime==dur+1&&this.phase.needsLastPoint){nextTime=this.phase.end-this.phase.start;}
var i,j;var allTargets=[];for(j=0;j<this.targets.length;j++){var target=logData.targets[this.targets[j]];allTargets.push(j);cols.push(target);}
var damageArrayToUse=this.damageGraphName;for(i=0;i<this.graph.length;i++){var cacheID,data,cur,next;var player=logData.players[i];var graphData=this.graph[i];var dps=[];for(j=0;j<this.targets.length;j++){var activeTargets=[j];cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,activeTargets,0,null);data=computePlayerDPS(player,graphData[damageArrayToUse],this.graphdata.dpsmode,null,activeTargets,cacheID,this.phase.times,this.graphdata.graphmode,this.graphdata.damagemode).dps.target;cur=data[curTime];next=data[curTime+1];if(typeof next!=="undefined"){dps[j]=cur+(tS-curTime)*(next-cur)/(nextTime-curTime);}else{dps[j]=cur;}}
cacheID=getDPSGraphCacheID(this.graphdata.dpsmode,this.graphdata.damagemode,this.graphdata.graphmode,allTargets,0,null);data=computePlayerDPS(player,graphData[damageArrayToUse],this.graphdata.dpsmode,null,allTargets,cacheID,this.phase.times,this.graphdata.graphmode,this.graphdata.damagemode).dps.total;cur=data[curTime];next=data[curTime+1];if(typeof next!=="undefined"){dps[j]=cur+(tS-curTime)*(next-cur)/(nextTime-curTime);}else{dps[j]=cur;}
for(j=0;j<dps.length;j++){total[j]=(total[j]||0)+dps[j];}
rows.push({player:player,dps:dps});}
sums.push({name:"Total",dps:total});var res={cols:cols,rows:rows,sums:sums};return res;}}});}
{var buffDisplayHeight=18;Vue.component("combat-replay-buff-display",{props:["buffarray"],template:`
        <div v-if="buffarray.length > 0" class="d-flex buff-display" :style="{'height': height}">
            <div v-for="buffData in buffarray" class="buff-container">
                <img :src="buffData.buff.icon" :title="buffData.buff.name + ' - ' + buffData.buff.id" :alt="buffData.buff.name + ' - ' + buffData.buff.id" class="icon-s" />
                <div v-if="buffData.state > 1" class="buff-number">{{buffData.state}}</div>
            </div>
        </div>
        `,computed:{height:function(){return buffDisplayHeight+"px";},},});Vue.component("combat-replay-actor-buffs-stats-component",{mixins:[timeRefreshComponent],props:["actorindex","enemy","buffstoshow"],template:`    <div class="d-flex flex-column justify-content-end" :style="{'height': height}">        <div v-if="isPresent('Fight Specifics')">            <combat-replay-buff-display :buffarray="data.fightSpecifics"></combat-replay-buff-display>        </div>        <div v-if="isPresent('Others')">            <combat-replay-buff-display :buffarray="data.others"></combat-replay-buff-display>        </div>        <div v-if="isPresent('Conditions')">            <combat-replay-buff-display :buffarray="data.conditions"></combat-replay-buff-display>        </div>              <div v-if="isPresent('Shared')">            <combat-replay-buff-display :buffarray="data.shared"></combat-replay-buff-display>        </div>          <div v-if="isPresent('Boons')">            <combat-replay-buff-display :buffarray="data.boons"></combat-replay-buff-display>        </div>        <div v-if="isPresent('Consumables')" >            <combat-replay-buff-display :buffarray="data.consumables"></combat-replay-buff-display>        </div>    </div>`,methods:{isPresent:function(type){return this.buffsToShowSet.has(type)&&this.presentBuffTypes.has(type);}},computed:{height:function(){var count=0;for(var i=0;i<this.buffstoshow.length;i++){count+=this.isPresent(this.buffstoshow[i])?1:0;}
return buffDisplayHeight*count+"px";},buffsToShowSet:function(){return new Set(this.buffstoshow);},presentBuffTypes:function(){var res=new Set();for(var i=0;i<this.buffData.length;i++){var data=this.buffData[i];var id=data.id;var buff=findSkill(true,id);if(buff.consumable){res.add("Consumables");}else if(buff.fightSpecific){res.add("Fight Specifics");}else if(this.boons.has(id)){res.add("Boons");}else if(this.offs.has(id)){res.add("Shared");}else if(this.defs.has(id)){res.add("Shared");}else if(this.sups.has(id)){res.add("Shared");}else if(this.conditions.has(id)){res.add("Conditions");}else{res.add("Others");}}
return res;},boons:function(){var hash=new Set();for(var i=0;i<logData.boons.length;i++){hash.add(logData.boons[i]);}
return hash;},offs:function(){var hash=new Set();for(var i=0;i<logData.offBuffs.length;i++){hash.add(logData.offBuffs[i]);}
return hash;},defs:function(){var hash=new Set();for(var i=0;i<logData.defBuffs.length;i++){hash.add(logData.defBuffs[i]);}
return hash;},sups:function(){var hash=new Set();for(var i=0;i<logData.supBuffs.length;i++){hash.add(logData.supBuffs[i]);}
return hash;},conditions:function(){var hash=new Set();for(var i=0;i<logData.conditions.length;i++){hash.add(logData.conditions[i]);}
return hash;},actor:function(){return this.enemy?logData.targets[this.actorindex]:logData.players[this.actorindex];},buffData:function(){return this.actor.details.boonGraph[0];},data:function(){var res={shared:[],boons:[],conditions:[],fightSpecifics:[],others:[],consumables:[]};for(var i=0;i<this.buffData.length;i++){var data=this.buffData[i];var id=data.id;var arrayToFill=[];var buff=findSkill(true,id);if(buff.consumable){arrayToFill=res.consumables;if(!this.buffsToShowSet.has("Consumables")){continue;}}else if(buff.fightSpecific){arrayToFill=res.fightSpecifics;if(!this.buffsToShowSet.has("Fight Specifics")){continue;}}else if(this.boons.has(id)){arrayToFill=res.boons;if(!this.buffsToShowSet.has("Boons")){continue;}}else if(this.offs.has(id)){arrayToFill=res.shared;if(!this.buffsToShowSet.has("Shared")){continue;}}else if(this.defs.has(id)){arrayToFill=res.shared;if(!this.buffsToShowSet.has("Shared")){continue;}}else if(this.sups.has(id)){arrayToFill=res.shared;if(!this.buffsToShowSet.has("Shared")){continue;}}else if(this.conditions.has(id)){arrayToFill=res.conditions;if(!this.buffsToShowSet.has("Conditions")){continue;}}else{arrayToFill=res.others;if(!this.buffsToShowSet.has("Others")){continue;}}
var t=this.timeToUse/1000;var val=findState(data.states,t,0,data.states.length-1);if(val>0){arrayToFill.push({state:val,buff:buff});}}
return res;}}});}
{Vue.component("combat-replay-player-stats-component",{props:["playerindex","time","buffs","rotation","buffstoshow"],template:`    <div>        <combat-replay-actor-buffs-stats-component v-if="buffs && buffstoshow.length > 0" :time="time" :actorindex="playerindex" :enemy="false" :buffstoshow="buffstoshow"></combat-replay-actor-buffs-stats-component>        <div class="d-flex mb-1 mt-1 align-items-center player-status-rotation">            <combat-replay-player-status-component :time="time" :playerindex="playerindex"></combat-replay-player-status-component>            <combat-replay-actor-rotation-component v-if="rotation" :time="time" :actorindex="playerindex" :enemy="false"></combat-replay-actor-rotation-component>        </div>    </div>`});}
{Vue.component("combat-replay-player-status-component",{props:["playerindex","time"],template:`    <div class="player-status" :style="{'background': getHPGradient(time, status)}" @click="select">        <h6 class="actor-shorten text-center" :title="player.name">            <img v-if="player.isCommander"                            src="https://wiki.guildwars2.com/images/5/54/Commander_tag_%28blue%29.png" alt="Commander"                            height="18" width="18" data-original-title="Commander">            <img :src="player.icon" :alt="player.profession" height="18" width="18">            {{player.name}}        </h6>        <p v-if="hasHealth" class="text-right cr-hp-display cr-hp-display-player">            {{(Math.round(100*getHPPercent(time))/100).toFixed(2)}} %        </p>        <p v-if="hasBarrier" class="text-right cr-barrier-display cr-barrier-display-player">            {{(Math.round(100*getBarrierPercent(time))/100).toFixed(2)}} %        </p>              <div v-if="hasBarrier" class="cr-barrier" :style="{'background': getBarrierGradient(time)}">        </div>    </div>`,methods:{getHPPercent:function(time){if(!this.hasHealth){return 100;}
return findState(this.healths,time/1000.0,0,this.healths.length-1);},getBarrierPercent:function(time){if(!this.hasBarrier){return 0;}
return findState(this.barriers,time/1000.0,0,this.barriers.length-1);},getHPGradient:function(time,status){var color=status===0?'black':status===1?'red':status===2?'grey':'green';return computeGradient(color,this.getHPPercent(time),'black');},getBarrierGradient:function(time){return computeGradient('rgba(0,0,0,0)',100-this.getBarrierPercent(time),'rgba(228,148,97, 0.5)');},select(){animator.selectActor(this.player.uniqueID);}},computed:{phase:function(){return logData.phases[0];},player:function(){return logData.players[this.playerindex];},healths:function(){return graphData.phases[0].players[this.playerindex].healthStates;},barriers:function(){return graphData.phases[0].players[this.playerindex].barrierStates;},status:function(){var crPData=animator.getActorData(this.player.uniqueID);var icon=crPData.getIcon(this.time);return icon===deadIcon?0:icon===downIcon?1:icon===dcIcon?2:3;},hasHealth:function(){return!!this.healths;},hasBarrier:function(){return!!this.barriers;}}});}
{Vue.component("combat-replay-actor-rotation-component",{mixins:[timeRefreshComponent],props:["actorindex","enemy"],template:`    <div class="d-flex align-items-center actor-rotation">        <div v-if="rotation.current">            <img class="icon-ll" :class="getIconClass(rotation.current)" :src="rotation.current.skill.icon" :data-original-title="getTooltip(rotation.current)"/>        </div>        <div v-else class="empty-icon-ll">        </div>        <div v-for="next in rotation.nexts">            <img class="icon-l" :class="getIconClass(next)" :src="next.skill.icon" :data-original-title="getTooltip(next)"/>        </div>    </div>`,methods:{getSkillDuration:function(item){return Math.max(item[2],1)*1e-3;},findRotationIndex:function(rotation,timeS,start,end){if(end===0){return 0;}
if(timeS<rotation[start][0]){return start;}else if(timeS>rotation[end][0]+this.getSkillDuration(rotation[end])){return end;}
var id=Math.floor((end+start)/2);if(id===start||id===end){var item=rotation[start];var x=item[0];var duration=this.getSkillDuration(item);if(timeS>=x&&x+duration>=timeS){return start;}
return end;}
var item=rotation[id];var x=item[0];var duration=this.getSkillDuration(item);if(timeS<x){return this.findRotationIndex(rotation,timeS,start,id);}else if(timeS>x+duration){return this.findRotationIndex(rotation,timeS,id,end);}else{return id;}},getIconClass(cast){return{'rot-cancelled':cast.type===RotationStatus.CANCEL,'rot-unknown':cast.type===RotationStatus.UNKNOWN,'rot-animfull':cast.type===RotationStatus.FULL,'rot-instant':cast.type===RotationStatus.INSTANT};},getTooltip(cast){var tooltip=`${cast.skill.name} at ${cast.time}s`;if(cast.type===RotationStatus.INSTANT){return tooltip;}else{return tooltip+` for ${cast.duration}ms`;}}},computed:{actor:function(){return this.enemy?logData.targets[this.actorindex]:logData.players[this.actorindex];},actorRotation:function(){return this.actor.details.rotation[0];},rotation:function(){var res={current:null,nexts:[]};if(this.actorRotation.length===0){return res;}
var time=this.timeToUse/1000.0;var id=this.findRotationIndex(this.actorRotation,time,0,this.actorRotation.length-1);var item=this.actorRotation[id];var x=item[0];var duration=this.getSkillDuration(item);if(x<=time&&time<=x+duration){res.current={time:item[0],skill:findSkill(false,item[1]),duration:item[2],type:item[3]};id++;}
for(var j=id;j<this.actorRotation.length;j++){var next=this.actorRotation[j];if(next[0]>=time){res.nexts.push({time:next[0],skill:findSkill(false,next[1]),duration:next[2],type:next[3]});}
if(res.nexts.length==3){break;}}
return res;},}});}
{Vue.component("combat-replay-target-stats-component",{props:["targetindex","time","buffstoshow"],template:`    <div>        <combat-replay-actor-buffs-stats-component v-if="buffstoshow.length > 0" :time="time" :actorindex="targetindex" :enemy="true" :buffstoshow="buffstoshow"/>        <div class="d-flex mb-1 mt-1">            <combat-replay-target-status-component :time="time" :targetindex="targetindex"/>            <combat-replay-actor-rotation-component :time="time" :actorindex="targetindex" :enemy="true"/>        </div>         <div v-if="hasBreakbarPercent" class="cr-breakbar-phase-display mb-1">                     <ul class="nav nav-pills d-flex flex-row flex-wrap justify-content-center">                <li class="nav-item" v-for="(phase, id) in breakbarPhases"                    @click="updatePhaseTime(phase.start * 1000, phase.end * 1000, phase.name)"                    :data-original-title="phase.durationS + ' seconds'">                    <a class="nav-link">{{id + 1}} </a>                </li>            </ul>        </div>    </div>`,methods:{updatePhaseTime:function(min,max,name){animator.updateTime(min);sliderDelimiter.min=min;sliderDelimiter.max=max;sliderDelimiter.name=name;},},computed:{breakbarPhases:function(){if(!this.hasBreakbarPercent){return[];}
return logData.phases.filter(phase=>phase.breakbarPhase&&phase.targets.indexOf(this.targetindex)>-1);},hasBreakbarPercent:function(){return!!this.breakbarPercent;},breakbarPercent:function(){return graphData.phases[0].targetsBreakbarPercentStatesForCR[this.targetindex];},}});}
{Vue.component("combat-replay-target-status-component",{props:["targetindex","time"],template:`    <div class="d-flex flex-column justify-content-center align-items-center">        <div class="target-status" :style="{'background': getHPGradient(time, status)}" @click="select">            <h6 class="actor-shorten text-center" :title="target.name + ' - ' + target.health + ' health'">                <img :src="target.icon" height="18" width="18"/>                {{target.name}}            </h6>            <p class="text-right cr-hp-display cr-hp-display-target">                {{(Math.round(100*getHPPercent(time))/100).toFixed(2)}} %            </p>            <p v-if="hasBarrier" class="text-right cr-barrier-display cr-barrier-display-target">                {{(Math.round(100*getBarrierPercent(time))/100).toFixed(2)}} %            </p>            <div v-if="hasBarrier" class="cr-barrier" :style="{'background': getBarrierGradient(time, status)}"></div>        </div>        <div v-if="hasBreakbarPercent" class="cr-breakbar-display">            <div class="cr-breakbar-bar" :style="{'background': getBreakbarGradient(time)}">                <p class="text-center" style="margin: 0;">                    {{(Math.round(100*getBreakbarPercent(time))/100).toFixed(2)}} %                </p>            </div>        </div>    </div>`,methods:{select(){animator.selectActor(this.target.uniqueID);},getBreakbarPercent:function(time){if(!this.hasBreakbarPercent){return 100.0;}
return findState(this.breakbarPercent,time/1000.0,0,this.breakbarPercent.length-1);},getHPPercent:function(time){return findState(this.healths,time/1000.0,0,this.healths.length-1);},getBarrierPercent:function(time){if(!this.hasBarrier){return 0;}
return findState(this.barriers,time/1000.0,0,this.barriers.length-1);},getHPGradient:function(time,status){var color=status===0?'black':status===1?'red':status===2?'grey':'green';return computeGradient(color,this.getHPPercent(time),'black');},getBreakbarGradient:function(time){var color=animator.getActorData(this.target.uniqueID).isBreakbarActive()?"#20B2AA":"#888888";return computeGradient(color,this.getBreakbarPercent(time),'black');},getBarrierGradient:function(time,status){return computeGradient('rgba(0,0,0,0)',100-this.getBarrierPercent(time),'rgba(228,148,97, 0.5)');},},computed:{phase:function(){return logData.phases[0];},status:function(){var crTData=animator.getActorData(this.target.uniqueID);var icon=crTData.getIcon(this.time);return icon===deadIcon?0:icon===downIcon?1:icon===dcIcon?2:3;},healths:function(){return graphData.phases[0].targetsHealthStatesForCR[this.targetindex];},breakbarPercent:function(){return graphData.phases[0].targetsBreakbarPercentStatesForCR[this.targetindex];},barriers:function(){return graphData.phases[0].targetsBarrierStatesForCR[this.targetindex];},hasBreakbarPercent:function(){return!!this.breakbarPercent;},hasBarrier:function(){return!!this.barriers;},target:function(){return logData.targets[this.targetindex];}}});}
{Vue.component("combat-replay-targets-stats-component",{props:["time","selectedtargetid"],template:`    <div>        <ul class="nav nav-pills d-flex flex-row justify-content-center mb-1 scale65">            <li v-for="(buffType, index) in possibleBuffs" class="ml-1 mr-1">                <input :id="'crtar-possibleBuffs-' + index" type="checkbox" :value="buffType" v-model="buffsToShow" />                <label :for="'crtar-possibleBuffs-' + index">{{buffType}}</label>            </li>        </ul>        <div class="mt-1 combat-actor-status-container scrollable-y">            <div class="d-flex flex-column justify-content-center align-items-center">                <div v-for="status in targets" v-if="alive(status)" class="target-data ml-1 mr-1" :class="{active: selectedtargetid === status.target.uniqueID}">                    <combat-replay-target-stats-component :time="time" :targetindex="status.target.id" :buffstoshow="buffsToShow"/>                </div>            </div>        </div>    </div>`,data:function(){return{buffsToShow:["Others","Boons","Fight Specifics","Conditions"]}},methods:{alive:function(status){return(status.start===-1&&status.end===-1)||status.start<=this.time&&status.end>=this.time;}},computed:{possibleBuffs:function(){return["Boons","Conditions","Fight Specifics","Shared","Others"];},targets:function(){var res=[];for(var i=0;i<logData.targets.length;i++){var target=logData.targets[i];var crTarget=animator.getActorData(target.uniqueID);if(crTarget){res.push({target:target,start:crTarget.start,end:crTarget.end});}}
return res;},}});}
{Vue.component("combat-replay-players-stats-component",{props:["time","selectedplayerid"],template:`    <div class="d-flex flex-row flex-wrap justify-content-center align-items-start mb-2">        <ul class="nav nav-pills d-flex flex-row justify-content-center mb-1 scale85">            <li class="nav-item">                <a class="nav-link" :class="{active: buffs}" @click="buffs = !buffs">                    Show Buffs                </a>            </li>            <li class="nav-item">                <a class="nav-link" :class="{active: rotation}" @click="rotation = !rotation">Show Rotation</a>            </li>        </ul>                            <ul class="nav nav-pills d-flex flex-row justify-content-center mb-1 scale65">            <li v-for="(buffType, index) in possibleBuffs" class="ml-1 mr-1">                <input :id="'crpl-possibleBuffs-' + index" type="checkbox" :value="buffType" v-model="buffsToShow" />                <label :for="'crpl-possibleBuffs-' + index">{{buffType}}</label>            </li>        </ul>        <div class="d-flex flex-column combat-actor-status-container scrollable-y" style="transform: translate(-42px,0);">            <div v-for="(group,id) in groups" v-if="group" class="d-flex flex-row align-items-center ml-2 mt-1">                <h5 v-if="!singleGroup" style="width:70px" class="text-center mt-2">Group {{id}}</h5>                <div class="d-flex flex-row flex-wrap align-items-center ml-1 mr-1" style="width:280px;border: 2px solid #888;">                    <div v-for="player in group" class="player-data ml-1" :class="{active: selectedplayerid === player.uniqueID}">                        <combat-replay-player-stats-component :time="time" :buffs="buffs" :rotation="rotation" :playerindex="player.id" :buffstoshow="buffsToShow"></combat-replay-player-stats-component>                    </div>                </div>            </div>        </div>    </div>`,data:function(){return{buffs:false,rotation:true,buffsToShow:["Others","Shared","Consumables","Boons"]};},computed:{singleGroup:function(){return logData.singleGroup;},possibleBuffs:function(){return["Boons","Conditions","Fight Specifics","Shared","Consumables","Others"];},groups:function(){var res=[];var i=0;for(i=0;i<logData.players.length;i++){var playerData=logData.players[i];if(!animator.getActorData(logData.players[i].uniqueID)){continue;}
if(!res[playerData.group]){res[playerData.group]=[];}
res[playerData.group].push(playerData);}
return res;}}});}
{Vue.component("combat-replay-ui-component",{props:["mode","light"],template:`    <div class="d-flex mt-2 justify-content-center">        <div class="d-flex flex-column align-items-center mr-2" style="margin-left: auto; min-width:450px;">            <combat-replay-damage-data-component :time="animationStatus.time" :selectedplayerid="animationStatus.selectedActorID">            </combat-replay-damage-data-component>            <div style="display: none">                <ul v-if="!targetless" class="nav nav-pills d-flex flex-row justify-content-center mb-1">                    <li class="nav-item">                        <a class="nav-link" :class="{active: selectionMode === 0}" @click="selectionMode = 0">Players</a>                    </li>                    <li class="nav-item">                        <a class="nav-link" :class="{active: selectionMode === 1}" @click="selectionMode = 1">Targets</a>                    </li>                </ul>                <combat-replay-player-select-component v-if="selectionMode === 0" :selectedplayerid="animationStatus.selectedActorID" :light="light"></combat-replay-player-select-component>                <combat-replay-target-select-component v-if="selectionMode === 1" :selectedtargetid="animationStatus.selectedActorID" :light="light"></combat-replay-target-select-component>            </div>            <combat-replay-extra-decorations-component :light="light"></combat-replay-extra-decorations-component>        </div>        <combat-replay-animation-control-component :light="light" :animated="animationStatus.animated"></combat-replay-animation-control-component>        <div class="d-flex flex-column align-items-center ml-2" style="margin-right: auto;min-width:450px;">            <combat-replay-status-data-component :time="animationStatus.time" :selectedactorid="animationStatus.selectedActorID">            </combat-replay-status-data-component>        </div>    </div>`,data:function(){return{animationStatus:reactiveAnimationData,selectionMode:0,targetless:logData.targetless,};},created(){animator=new Animator(crData);},activated(){if(this.animationStatus.animated&&animator!=null){animator.startAnimate(false);}},deactivated(){if(this.animationStatus.animated&&animator!=null){animator.stopAnimate(false);}},});}
{Vue.component("combat-replay-player-select-component",{props:['selectedplayerid',"light"],template:`    <div class="d-flex flex-row flex-wrap justify-content-center align-items-start mb-2">        <div class="d-flex flex-column scrollable-y" style="max-height: 250px;">            <div v-for="group in groups" class="d-flex flex-row align-items-center ml-2 mt-1" style="width:450px;">                <h5 v-if="!singleGroup" class="mt-2" style="min-width:80px;max-width:80px; text-align: center;">Group {{group.id}}</h5>                <div class="d-flex flex-row flex-wrap align-items-center ml-1" style="max-width:370px;">                    <span v-for="player in group.players"                           @click="selectActor(player.uniqueID);"                           class="btn btn-small ply-btn" :class="{'active': selectedplayerid === player.uniqueID, 'btn-dark': !light, 'btn-light': light}" :title="player.acc">                        <img v-if="player.isCommander" src="https://wiki.guildwars2.com/images/5/54/Commander_tag_%28blue%29.png" alt="Commander" class="icon">                        <img :src="player.icon" :alt="player.profession" class="icon">                        {{ player.name }}                    </span>                </div>            </div>        </div>    </div>`,methods:{selectActor:function(id){animator.selectActor(id);}},computed:{singleGroup:function(){return logData.singleGroup;},groups:function(){var aux=[];var i=0;for(i=0;i<logData.players.length;i++){var playerData=logData.players[i];if(!animator.getActorData(logData.players[i].uniqueID)){continue;}
if(!aux[playerData.group]){aux[playerData.group]=[];}
aux[playerData.group].push(playerData);}
var noUndefinedGroups=[];for(i=0;i<aux.length;i++){if(aux[i]){noUndefinedGroups.push({id:i,players:aux[i]});}}
return noUndefinedGroups;}}});}
{Vue.component("combat-replay-target-select-component",{props:['selectedtargetid',"light"],template:`    <div class="d-flex flex-row flex-wrap justify-content-center align-items-start mb-2">        <div class="d-flex flex-column scrollable-y" style="max-height: 250px;">            <div v-for="targets in targetsArray" v-if="targets.values.length > 0"                class="d-flex flex-row align-items-center ml-2 mt-1" style="width:450px;">                <h5 style="width:160px;text-align: center;">{{targets.name}}</h5>                <div class="d-flex flex-row flex-wrap align-items-center ml-1" style="max-width:270px;">                    <span v-for="target in targets.values" @click="selectActor(target.uniqueID);"                        class="btn btn-small ply-btn"                        :class="{'active': selectedtargetid === target.uniqueID, 'btn-dark': !light, 'btn-light': light}"                        :title="target.name">                        <img :src="target.icon" :alt="target.name" class="icon">                        {{ target.name }}                    </span>                </div>            </div>        </div>    </div>`,methods:{selectActor:function(id){animator.selectActor(id);}},computed:{mainTargets:function(){var mainFight=logData.phases[0];var res=[];for(var i=0;i<logData.targets.length;i++){if(mainFight.targets.indexOf(i)>-1&&!!animator.getActorData(logData.targets[i].uniqueID)){res.push(logData.targets[i]);}}
return res;},secondaryTargets:function(){var mainFight=logData.phases[0];var res=[];for(var i=0;i<logData.targets.length;i++){if(mainFight.targets.indexOf(i)===-1&&!!animator.getActorData(logData.targets[i].uniqueID)){res.push(logData.targets[i]);}}
return res;},targetsArray:function(){return[{name:"Main Targets",values:this.mainTargets},{name:"Secondary Targets",values:this.secondaryTargets}]}}});}
{Vue.component("combat-replay-extra-decorations-component",{props:["light"],template:`    <div class="d-flex flex-column justify-content-center align-items-center" style="max-width: 500px;">                   <h4>General Settings</h4>        <div class="d-flex flex-row justify-content-center flex-wrap">            <div class="form-check mb-2 mr-2">                <input type="checkbox" class="form-check-input" id="subgroupCheck"                     :checked="getAnimator().displaySettings.highlightSelectedGroup" v-on:change="getAnimator().toggleHighlightSelectedGroup()">                <label class="form-check-label" for="subgroupCheck">Highlight Selected Group</label>            </div>            <div v-if="showSecondaryNPCs" class="form-check mb-2 mr-2">                <input type="checkbox" class="form-check-input" id="trashCheck"                     :checked="getAnimator().displaySettings.displayTrashMobs" v-on:change="getAnimator().toggleTrashMobs()">                <label class="form-check-label" for="trashCheck">Secondary NPCs</label>            </div>             <div v-if="showMechanics" class="form-check mb-2 mr-2">                <input type="checkbox" class="form-check-input" id="mechanicsCheck"                     :checked="getAnimator().displaySettings.displayMechanics" v-on:change="getAnimator().toggleMechanics()">                <label class="form-check-label" for="mechanicsCheck">Mechanics</label>            </div>            <div v-if="showSkills" class="form-check mb-2 mr-2">                <input type="checkbox" class="form-check-input" id="skillsCheck"                     :checked="getAnimator().displaySettings.displaySkillMechanics" v-on:change="getAnimator().toggleSkills()">                <label class="form-check-label" for="skillsCheck">Skills</label>            </div>            <div class="form-check mb-2 mr-2">                <input type="checkbox" class="form-check-input" id="actorHitboxCheck"                     :checked="getAnimator().displaySettings.useActorHitboxWidth" v-on:change="getAnimator().toggleUseActorHitboxWidth()">                <label class="form-check-label" for="actorHitboxCheck">Use Hitbox Size</label>            </div>             <div class="form-check mb-2 mr-2">                <input type="checkbox" class="form-check-input" id="allMinionsCheck"                     :checked="getAnimator().displaySettings.displayAllMinions" v-on:change="getAnimator().toggleDisplayAllMinions()">                <label class="form-check-label" for="allMinionsCheck">All Minions</label>            </div>                 <div class="form-check mb-2 mr-2">                <input type="checkbox" class="form-check-input" id="selectedMinionsCheck"                     :checked="getAnimator().displaySettings.displaySelectedMinions" v-on:change="getAnimator().toggleDisplaySelectedMinions()">                <label class="form-check-label" for="selectedMinionsCheck">Selected's Minions</label>            </div>        </div>        <div v-if="showSkills" class="d-flex flex-column justify-content-center align-items-center" style="max-width: 500px;">            <h4>Global Skill Settings</h4>            <div class="d-flex flex-row justify-content-center flex-wrap">                <div class="form-check mb-2 mr-2" v-for="skillCategory in skillCategories">                    <input type="checkbox" class="form-check-input" :id="skillCategory.key"                         :checked="(getAnimator().displaySettings.skillMechanicsMask & skillCategory.mask) > 0" v-on:change="getAnimator().toggleSkillCategoryMask(skillCategory.mask)">                    <label class="form-check-label" :for="skillCategory.key">{{skillCategory.key}}</label>                </div>            </div>        </div>        <div class="d-flex flex-row justify-content-center">            <div class="mr-3">                <h4>Range Selectors</h4>                <div class="form-check mt-1 mb-2">                    <input type="checkbox" class="form-check-input" id="circle1Check"                         :checked=" getAnimator().rangeControl[0].enabled" v-on:change="getAnimator().toggleRange(0)">                    <label class="form-check-label" for="circle1Check">Circle 1</label>                </div>                <div class="d-flex flex-row justify-content-between align-items-center">                    <span>Radius: </span>                    <custom-numberform-component style="width: 100px;" :minValue="1" :id="'circle1Text'"                                                        :placeholderValue="getAnimator().rangeControl[0].radius"></custom-numberform-component>                </div>                <div class="form-check mt-1 mb-2">                    <input type="checkbox" class="form-check-input" id="circle2Check"                         :checked=" getAnimator().rangeControl[1].enabled" v-on:change="getAnimator().toggleRange(1)">                    <label class="form-check-label" for="circle2Check">Circle 2</label>                </div>                <div class="d-flex flex-row justify-content-between align-items-center">                    <span>Radius: </span>                    <custom-numberform-component style="width: 100px;" :minValue="1" :id="'circle2Text'"                                                        :placeholderValue="getAnimator().rangeControl[1].radius"></custom-numberform-component>                </div>                <div class="form-check mt-1 mb-2">                    <input type="checkbox" class="form-check-input" id="circle3Check"                         :checked=" getAnimator().rangeControl[2].enabled" v-on:change="getAnimator().toggleRange(2)">                    <label class="form-check-label" for="circle3Check">Circle 3</label>                </div>                <div class="d-flex flex-row justify-content-between align-items-center">                    <span>Radius: </span>                    <custom-numberform-component style="width: 100px;" :minValue="1" :id="'circle3Text'"                                                        :placeholderValue="getAnimator().rangeControl[2].radius"></custom-numberform-component>                </div>            </div>            <div class="ml-3">                <h4 data-original-title="Has an effect only when facing arrow are present">Cone Indicator</h4>                <div class="form-check mt-1 mb-2">                    <input type="checkbox" class="form-check-input" id="coneCheck"                         :checked=" getAnimator().coneControl.enabled" v-on:change="getAnimator().toggleConeDisplay()">                    <label class="form-check-label" for="coneCheck">Display Cone</label>                </div>                <div class="d-flex flex-row justify-content-between align-items-center mb-1">                    <span>Radius: </span>                    <custom-numberform-component style="width: 100px;" :minValue="1" :id="'coneRadiusText'"                                                        :placeholderValue="getAnimator().coneControl.radius"></custom-numberform-component>                </div>                <div class="d-flex flex-row justify-content-between align-items-center mt-1">                    <span>Opening: </span>                    <custom-numberform-component style="width: 100px;" :minValue="1" :maxValue="360" :id="'coneAngleText'"                                                        :placeholderValue="getAnimator().coneControl.openingAngle"></custom-numberform-component>                </div>            </div>        </div>    </div>`,data:function(){return{showSkills:animator.skillMechanicActorData.length>0,showMechanics:animator.overheadActorData.length+animator.mechanicActorData.length>0,showSecondaryNPCs:animator.trashMobData.size>0,};},methods:{getAnimator:function(){return animator;}},computed:{skillCategories:function(){var res=[];for(var key in SkillDecorationCategory){res.push({key:key,mask:SkillDecorationCategory[key]});}
return res;}},mounted(){$('#circle1Text').on("input ",function(){animator.setRangeRadius(0,$(this).val());});$('#circle2Text').on("input ",function(){animator.setRangeRadius(1,$(this).val());});$('#circle3Text').on("input ",function(){animator.setRangeRadius(2,$(this).val());});$('#coneRadiusText').on("input ",function(){animator.setConeRadius($(this).val());});$('#coneAngleText').on("input ",function(){animator.setConeAngle($(this).val());});}});}
{Vue.component("combat-replay-animation-control-component",{props:["light","animated"],template:`    <div class="d-flex flex-column justify-content-center align-items-center">        <div v-if="showNormalPhases" class="mb-1">            <ul class="nav nav-pills d-flex flex-row justify-content-center" style="max-width: 700px;">                <li class="nav-item" v-for="(phase, id) in phases"                    v-show="!getPhaseData(id).breakbarPhase"                    :data-original-title="getPhaseData(id).durationS + ' seconds'">                    <a class="nav-link" @click="updatePhaseTime(id)">{{getPhaseData(id).name}}</a>                </li>            </ul>        </div>        <div class="d-flex flex-column justify-content-center flex-wrap mt-1"            :style="{'width': Math.max(canvasSize.x, canvasSize.y) + 'px'}">            <div class="d-flex flex-column justify-content-center align-items-center"                :style="{'width': '100%', 'min-width': canvasSize.x + 'px', 'height': canvasSize.y + 'px', 'position': 'relative'}">                <canvas :width="canvasSize.x + 'px'" :height="canvasSize.y + 'px'" :id="htmlElementIDs.mainCanvasID"                    class="replay"></canvas>                <canvas :width="canvasSize.x + 'px'" :height="canvasSize.y + 'px'" :id="htmlElementIDs.bgCanvasID"                    class="replay"></canvas>            </div>            <div class="animation-control">                <div class="d-flex justify-content-center mb-1">                    <div @click="toggleAnimate();" class="btn btn-small"                        :class="{'btn-dark': !light, 'btn-light': light}" style="width: 50px;">{{animated ? "Pause" :                        "Play"}}</div>                    <div @click="restartAnimate();" class="btn btn-small"                        :class="{'btn-dark': !light, 'btn-light': light}">                        Restart                    </div>                    <div @click="toggleBackwards();" class="btn btn-small"                        :class="{'active': backwards, 'btn-dark': !light, 'btn-light': light}">Backwards</div>                </div>                <div class="d-flex justify-content-center slidercontainer mt-1">                    <input style="min-width: 400px;" @input="updateTime($event.target.value)" type="range" min="0"                        :max="maxTime" value="0" class="slider" :id="htmlElementIDs.timeRangeID"                        :style="{'background': getSliderGradient()}">                    <p style="position: absolute; color: black; pointer-events:none;">{{sliderDelimiter.name}}</p>                    <input style="width: 70px; text-align: right;" class="ml-3 mr-1" type="text"                        :id="htmlElementIDs.timeRangeDisplayID" value="0"                        @input="updateInputTime($event.target.value);">                </div>                <div class="d-flex justify-content-center">                    <label v-for="speed in speeds" @click="setSpeed(speed)"                        :class="{'active': speed === selectedSpeed, 'btn-dark': !light, 'btn-light': light}"                        class="btn btn-ssmall">                        {{speed}}x                    </label>                </div>                <p class="text-justify text-center">Double click on canvas to restore viewpoint</p>            </div>        </div>    </div>`,data:function(){return{selectedSpeed:1,backwards:false,sliderDelimiter:sliderDelimiter,phases:simpleLogData.phases,};},mounted(){animator.attachDOM(this.htmlElementIDs.mainCanvasID,this.htmlElementIDs.bgCanvasID,this.htmlElementIDs.timeRangeID,this.htmlElementIDs.timeRangeDisplayID);},computed:{showNormalPhases:function(){return this.normalPhases.length>1||this.hasBreakbarPhases;},normalPhases:function(){return logData.phases.filter(phase=>!phase.breakbarPhase);},hasBreakbarPhases:function(){return logData.phases.filter(phase=>phase.breakbarPhase).length>0;},speeds:function(){return[0.125,0.25,0.5,1.0,2.0,4.0,8.0,16.0];},maxTime:function(){return crData.maxTime;},canvasSize:function(){return{x:crData.sizes[0],y:crData.sizes[1]};},htmlElementIDs:function(){return{mainCanvasID:"main-canvas",bgCanvasID:"bg-canvas",timeRangeID:"timeRange",timeRangeDisplayID:"timeRangeDisplay",};}},methods:{getSliderGradient:function(){var startPercent,endPercent;if(!this.sliderDelimiter||this.sliderDelimiter.min===-1){startPercent=0;endPercent=100;}else{var max=animator.times[animator.times.length-1];startPercent=this.sliderDelimiter.min/max*100;endPercent=this.sliderDelimiter.max/max*100;}
return computeSliderGradient("#888888","#F3F3F3",startPercent,endPercent);},getPhaseData:function(id){return logData.phases[id];},toggleBackwards:function(){this.backwards=animator.toggleBackwards();},toggleAnimate:function(){animator.toggleAnimate();},restartAnimate:function(){animator.restartAnimate();},setSpeed:function(speed){animator.setSpeed(speed);this.selectedSpeed=speed;},updateTime:function(value){animator.updateTime(value);},updatePhaseTime:function(id){var phase=this.getPhaseData(id);var min=phase.start*1000;var max=phase.end*1000;var name=phase.name;this.updateTime(min);this.sliderDelimiter.min=min;this.sliderDelimiter.max=max;this.sliderDelimiter.name=name;},updateInputTime:function(value){animator.updateInputTime(value);}},});}
{Vue.component("combat-replay-mechanics-list-component",{props:['selectedplayerid'],template:`    <div class="d-flex flex-row flex-wrap justify-content-center align-items-center">        <div class="combat-replay-mechanics-list-container d-flex d-flex-row justify-content-center w-100 scrollable-y"            style="max-width:450px">            <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%">                <thead>                    <tr>                        <th style="min-width:80px">Time</th>                        <th style="min-width:120px"                            class="text-left combat-replay-mechanics-list-header position-relative">                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" title="Filter Mechanics">                                Mechanic <span class="caret"></span>                            </a>                            <ul class="dropdown-menu p-2 font-weight-normal">                                <div class="d-flex flex-column justify-content-center align-items-center mb-1"                                    style="border-bottom: 2px solid #bbb;">                                    <li>                                        <button style="width:165px;" type="button" class="btn btn-primary btn-sm"                                            @click="selectAllMechanics()" @click.stop="stopClickEvent">Select all                                            mechanics</button>                                    </li>                                    <li class="mb-1">                                        <button style="width:165px;" type="button" class="btn btn-primary btn-sm"                                            @click="deselectAllMechanics()" @click.stop="stopClickEvent">Deselect all                                            mechanics</button>                                    </li>                                </div>                                <li v-for="(mechanic, index) in mechanicsList" :key="index">                                    <input :id="'crml-mechanic-' + index" type="checkbox" v-model="mechanic.included"                                        @click.stop="stopClickEvent" />                                    <label :for="'crml-mechanic-' + index" @click.stop="stopClickEvent">                                        {{mechanic.shortName}}                                    </label>                                </li>                            </ul>                        </th>                        <th style="min-width:120px"                            class="text-left combat-replay-mechanics-list-header position-relative">                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" title="Filter Actors">                                Actor <span class="caret"></span>                            </a>                            <ul class="dropdown-menu p-2 font-weight-normal">                                <div class="d-flex flex-column justify-content-center align-items-center mb-1"                                    style="border-bottom: 2px solid #bbb;">                                    <li>                                        <button style="width:140px;" type="button" class="btn btn-primary btn-sm"                                            @click="selectAllActors()" @click.stop="stopClickEvent">Select all                                            actors</button>                                    </li>                                    <li class="mb-1">                                        <button style="width:140px;" type="button" class="btn btn-primary btn-sm"                                            @click="deselectAllActors()" @click.stop="stopClickEvent">Deselect all                                            actors</button>                                    </li>                                </div>                                <li v-for="(actor, index) in actorsList" :key="index">                                    <input :id="'crml-actor-' + index" type="checkbox" v-model="actor.included"                                        @click.stop="stopClickEvent" />                                    <label :for="'crml-actor-' + index" @click.stop="stopClickEvent">                                        {{actor.name}}                                    </label>                                </li>                            </ul>                        </th>                    </tr>                </thead>                <tbody>                    <tr v-for="event in filteredMechanicEvents" class="combat-replay-mechanics-list-row"                        :class="{active: event.actor.id === selectedplayerid}" @click="selectMechanic(event)">                        <td>{{(event.time / 1000).toFixed(2)}}s</td>                        <td class="text-left" :title="event.mechanic.name">{{event.mechanic.shortName}}</td>                        <td class="text-left">{{event.actor.name}}</td>                    </tr>                </tbody>            </table>        </div>    </div>`,data:function(){var mechanicEvents=[];var phase=logData.phases[0];var phaseTargets=phase.targets;for(var mechI=0;mechI<graphData.mechanics.length;mechI++){var graphMechData=graphData.mechanics[mechI];var logMechData=logData.mechanicMap[mechI];var mechData={name:logMechData.name,shortName:logMechData.shortName};var pointsArray=graphMechData.points[0];var icd=logMechData.icd;if(!logMechData.enemyMech){for(var playerI=0;playerI<pointsArray.length;playerI++){var lastTime=-1000000;var points=pointsArray[playerI];var player=logData.players[playerI];for(var i=0;i<points.length;i++){var time=points[i]*1000;if(icd===0||(time-lastTime>icd)){mechanicEvents.push({time:time,actor:{name:player.name,enemy:false,id:player.uniqueID},mechanic:mechData,});}
lastTime=time;}}}else{for(var targetI=0;targetI<pointsArray.length;targetI++){var points=pointsArray[targetI];var tarId=phaseTargets[targetI];if(tarId>=0){var target=logData.targets[tarId];for(var i=0;i<points.length;i++){var time=points[i];mechanicEvents.push({time:time*1000,actor:{name:target.name,enemy:true,id:-1},mechanic:mechData,});}}else{for(var i=0;i<points.length;i++){var time=points[i][0];mechanicEvents.push({time:time*1000,actor:{name:points[i][1],enemy:true,id:-1},mechanic:mechData,});}}}}}
mechanicEvents.sort(function(a,b){return a.time-b.time;});var actors={};var mechanics={};for(var i=0;i<mechanicEvents.length;i++){var event=mechanicEvents[i];var mechName=event.mechanic.name;var actorName=event.actor.name;if(!mechanics[mechName]){mechanics[mechName]=Object.assign({},event.mechanic,{included:true});}
if(!actors[actorName]){actors[actorName]=Object.assign({},event.actor,{included:true});}}
var actorsList=Object.values(actors);actorsList.sort(function(a,b){if(a.enemy!==b.enemy){return a.enemy?-1:1;}
return a.name.localeCompare(b.name);});var mechanicsList=Object.values(mechanics);mechanicsList.sort(function(a,b){return a.shortName.localeCompare(b.shortName);});return{mechanicEvents:mechanicEvents,actors:actors,actorsList:actorsList,mechanics:mechanics,mechanicsList:mechanicsList,};},methods:{selectMechanic:function(mechanic){animator.updateTime(mechanic.time);},stopClickEvent:function(event){event.stopPropagation();},selectAllMechanics:function(){for(var i=0;i<this.mechanicsList.length;i++){this.mechanicsList[i].included=true;}},selectAllActors:function(){for(var i=0;i<this.actorsList.length;i++){this.actorsList[i].included=true;}},deselectAllMechanics:function(){for(var i=0;i<this.mechanicsList.length;i++){this.mechanicsList[i].included=false;}},deselectAllActors:function(){for(var i=0;i<this.actorsList.length;i++){this.actorsList[i].included=false;}},},computed:{filteredMechanicEvents:function(){return this.mechanicEvents.filter(function(event){var actor=this.actors[event.actor.name];var mechanic=this.mechanics[event.mechanic.name];if(actor&&!actor.included){return false;}
if(mechanic&&!mechanic.included){return false;}
return true;}.bind(this))},},});}};const noUpdateTime=-1;const updateText=-2;const deadIcon=new Image();deadIcon.onload=function(){animateCanvas(noUpdateTime);};const downIcon=new Image();downIcon.onload=function(){animateCanvas(noUpdateTime);};const dcIcon=new Image();dcIcon.onload=function(){animateCanvas(noUpdateTime);};const facingIcon=new Image();facingIcon.onload=function(){animateCanvas(noUpdateTime);};function ToRadians(degrees){return degrees*(Math.PI/180);}
const resolutionMultiplier=2.0;const maxOverheadAnimationFrame=50;let overheadAnimationFrame=maxOverheadAnimationFrame/2;let overheadAnimationIncrement=1;var animator=null;var reactiveAnimationData={time:0,selectedActorID:null,animated:false};var sliderDelimiter={min:-1,max:-1,name:logData.phases[0].name}
class Animator{constructor(options){var _this=this;this.reactiveDataStatus=reactiveAnimationData;this.prevTime=0;this.times=[];this.inchToPixel=10;this.pollingRate=150;this.speed=1;this.backwards=false;this.rangeControl=[{enabled:false,radius:180},{enabled:false,radius:360},{enabled:false,radius:720}];this.displaySettings={highlightSelectedGroup:true,displayAllMinions:false,displaySelectedMinions:true,displayMechanics:true,displaySkillMechanics:true,skillMechanicsMask:DefaultSkillDecorations,displayTrashMobs:true,useActorHitboxWidth:false,};this.coneControl={enabled:false,openingAngle:90,radius:360,};this.targetData=new Map();this.playerData=new Map();this.trashMobData=new Map();this.friendlyMobData=new Map();this.overheadActorData=[];this.mechanicActorData=[];this.skillMechanicActorData=[];this.actorOrientationData=new Map();this.backgroundActorData=[];this.backgroundImages=[];this.selectedActor=null;this.needBGUpdate=false;this.prevBGImage=null;this.animation=null;this.dragStart=null;this.dragged=false;this.scale=1.0;if(options){if(options.inchToPixel)this.inchToPixel=options.inchToPixel;if(options.pollingRate)this.pollingRate=options.pollingRate;if(options.maps){for(var i=0;i<options.maps.length;i++){var mapData=options.maps[i];var image=new Image();image.onload=function(){_this.needBGUpdate=true;animateCanvas(noUpdateTime);};image.src=mapData.link;this.backgroundImages.push({image:image,start:mapData.start,end:mapData.end});}}
if(options.actors)this._initActors(options.actors);downIcon.src="https://wiki.guildwars2.com/images/c/c6/Downed_enemy.png";dcIcon.src="https://wiki.guildwars2.com/images/f/f5/Talk_end_option_tango.png";deadIcon.src="https://wiki.guildwars2.com/images/4/4a/Ally_death_%28interface%29.png";facingIcon.src="https://i.imgur.com/tZTmTRn.png";}}
attachDOM(mainCanvasID,bgCanvasID,timeRangeID,timeRangeDisplayID){this.timeSlider=document.getElementById(timeRangeID);this.timeSliderDisplay=document.getElementById(timeRangeDisplayID);this.mainCanvas=document.getElementById(mainCanvasID);this.mainCanvas.style.width=this.mainCanvas.width+"px";this.mainCanvas.style.height=this.mainCanvas.height+"px";this.mainCanvas.width*=resolutionMultiplier;this.mainCanvas.height*=resolutionMultiplier;this.mainContext=this.mainCanvas.getContext('2d');this.mainContext.imageSmoothingEnabled=true;this.bgCanvas=document.getElementById(bgCanvasID);this.bgCanvas.style.width=this.bgCanvas.width+"px";this.bgCanvas.style.height=this.bgCanvas.height+"px";this.bgCanvas.width*=resolutionMultiplier;this.bgCanvas.height*=resolutionMultiplier;this.bgContext=this.bgCanvas.getContext('2d');this.bgContext.imageSmoothingEnabled=true;this.lastX=this.mainCanvas.width/2;this.lastY=this.mainCanvas.height/2;this._trackTransforms(this.mainContext);this._trackTransforms(this.bgContext);this.mainContext.scale(resolutionMultiplier,resolutionMultiplier);this.bgContext.scale(resolutionMultiplier,resolutionMultiplier);this._initMouseEvents();this._initTouchEvents();}
_initActors(actors){this.playerData.clear();this.targetData.clear();this.trashMobData.clear();this.friendlyMobData.clear();this.actorOrientationData.clear();this.overheadActorData=[];this.mechanicActorData=[];for(let i=0;i<actors.length;i++){const actor=actors[i];if(!actor.isMechanicOrSkill){switch(actor.type){case "Player":this.playerData.set(actor.id,new SquadIconDrawable(actor.start,actor.end,actor.img,22,actor.group,actor.positions,actor.angles,actor.dead,actor.down,actor.dc,actor.breakbarActive,this.inchToPixel*actor.hitboxWidth));if(this.times.length===0){for(let j=0;j<actor.positions.length/2;j++){this.times.push(j*this.pollingRate);}}
break;case "Target":case "TargetPlayer":this.targetData.set(actor.id,new NonSquadIconDrawable(actor.start,actor.end,actor.img,30,actor.positions,actor.angles,actor.dead,actor.down,actor.dc,actor.breakbarActive,-1,this.inchToPixel*actor.hitboxWidth));break;case "Mob":this.trashMobData.set(actor.id,new NonSquadIconDrawable(actor.start,actor.end,actor.img,25,actor.positions,actor.angles,actor.dead,actor.down,actor.dc,actor.breakbarActive,actor.masterID,this.inchToPixel*actor.hitboxWidth));break;case "Friendly":this.friendlyMobData.set(actor.id,new NonSquadIconDrawable(actor.start,actor.end,actor.img,20,actor.positions,actor.angles,actor.dead,actor.down,actor.dc,actor.breakbarActive,actor.masterID,this.inchToPixel*actor.hitboxWidth));break;case "ActorOrientation":this.actorOrientationData.set(actor.connectedTo.masterId,new FacingMechanicDrawable(actor.start,actor.end,actor.connectedTo,actor.rotationConnectedTo));break;case "MovingPlatform":this.backgroundActorData.push(new MovingPlatformDrawable(actor.start,actor.end,actor.image,this.inchToPixel*actor.width,this.inchToPixel*actor.height,actor.positions));break;case "IconOverheadDecoration":this.overheadActorData.push(new IconOverheadMechanicDrawable(actor.start,actor.end,actor.connectedTo,actor.rotationConnectedTo,actor.image,actor.pixelSize,this.inchToPixel*actor.worldSize,actor.opacity));break;default:throw "Unknown decoration type";}}else{let decoration=null;switch(actor.type){case "Circle":decoration=new CircleMechanicDrawable(actor.start,actor.end,actor.fill,actor.growingEnd,actor.color,this.inchToPixel*actor.radius,actor.connectedTo,actor.rotationConnectedTo,this.inchToPixel*actor.minRadius);break;case "Rectangle":decoration=new RectangleMechanicDrawable(actor.start,actor.end,actor.fill,actor.growingEnd,actor.color,this.inchToPixel*actor.width,this.inchToPixel*actor.height,actor.connectedTo,actor.rotationConnectedTo);break;case "Doughnut":decoration=new DoughnutMechanicDrawable(actor.start,actor.end,actor.fill,actor.growingEnd,actor.color,this.inchToPixel*actor.innerRadius,this.inchToPixel*actor.outerRadius,actor.connectedTo,actor.rotationConnectedTo);break;case "Pie":decoration=new PieMechanicDrawable(actor.start,actor.end,actor.fill,actor.growingEnd,actor.color,actor.openingAngle,this.inchToPixel*actor.radius,actor.connectedTo,actor.rotationConnectedTo);break;case "Line":decoration=new LineMechanicDrawable(actor.start,actor.end,actor.growingEnd,actor.color,actor.connectedFrom,actor.connectedTo);break;case "IconDecoration":decoration=new IconMechanicDrawable(actor.start,actor.end,actor.connectedTo,actor.rotationConnectedTo,actor.image,actor.pixelSize,this.inchToPixel*actor.worldSize,actor.opacity);break;default:throw "Unknown decoration type";}
if(decoration){if(actor.owner){decoration.usingSkillMode(actor.owner,actor.category);this.skillMechanicActorData.push(decoration);}else{this.mechanicActorData.push(decoration);}}}}}
updateTime(value){this.reactiveDataStatus.time=parseInt(value);if(this.animation===null){animateCanvas(noUpdateTime);}}
updateTextInput(){this.timeSliderDisplay.value=(this.reactiveDataStatus.time/1000.0).toFixed(3);}
updateInputTime(value){try{const cleanedString=value.replace(",",".");const parsedTime=parseFloat(cleanedString);if(isNaN(parsedTime)||!isFinite(parsedTime)){return;}
const ms=Math.round(parsedTime*1000.0);this.reactiveDataStatus.time=Math.min(Math.max(ms,0),this.times[this.times.length-1]);animateCanvas(updateText);}catch(error){console.error(error);}}
toggleAnimate(){if(!this.startAnimate(true)){this.stopAnimate(true);}}
startAnimate(updateReactiveStatus){if(this.animation===null&&this.times.length>0){if(this.reactiveDataStatus.time>=this.times[this.times.length-1]){this.reactiveDataStatus.time=0;}
this.prevTime=new Date().getTime();this.animation=requestAnimationFrame(animateCanvas);if(updateReactiveStatus){this.reactiveDataStatus.animated=true;}
return true;}
return false;}
stopAnimate(updateReactiveStatus){if(this.animation!==null){window.cancelAnimationFrame(this.animation);this.animation=null;if(updateReactiveStatus){this.reactiveDataStatus.animated=false;}
return true;}
return false;}
restartAnimate(){this.reactiveDataStatus.time=0;if(this.animation===null){animateCanvas(noUpdateTime);}}
selectActor(actorId){let actor=this.getActorData(actorId);if(!actor){return;}
if(this.selectedActor==actor){this.selectedActor=null;this.reactiveDataStatus.selectedActorID=null;}else{this.selectedActor=actor;this.reactiveDataStatus.selectedActorID=actorId;}
if(this.animation===null){animateCanvas(noUpdateTime);}}
getActorData(actorId){return animator.targetData.get(actorId)||animator.playerData.get(actorId)||animator.friendlyMobData.get(actorId)||animator.trashMobData.get(actorId);}
toggleHighlightSelectedGroup(){this.displaySettings.highlightSelectedGroup=!this.displaySettings.highlightSelectedGroup;animateCanvas(noUpdateTime);}
toggleDisplayAllMinions(){this.displaySettings.displayAllMinions=!this.displaySettings.displayAllMinions;animateCanvas(noUpdateTime);}
toggleDisplaySelectedMinions(){this.displaySettings.displaySelectedMinions=!this.displaySettings.displaySelectedMinions;animateCanvas(noUpdateTime);}
toggleUseActorHitboxWidth(){this.displaySettings.useActorHitboxWidth=!this.displaySettings.useActorHitboxWidth;animateCanvas(noUpdateTime);}
toggleTrashMobs(){this.displaySettings.displayTrashMobs=!this.displaySettings.displayTrashMobs;animateCanvas(noUpdateTime);}
toggleMechanics(){this.displaySettings.displayMechanics=!this.displaySettings.displayMechanics;animateCanvas(noUpdateTime);}
toggleSkills(){this.displaySettings.displaySkillMechanics=!this.displaySettings.displaySkillMechanics;animateCanvas(noUpdateTime);}
toggleSkillCategoryMask(mask){if((this.displaySettings.skillMechanicsMask&mask)>0){this.displaySettings.skillMechanicsMask&=~mask;}else{this.displaySettings.skillMechanicsMask|=mask;}
animateCanvas(noUpdateTime);}
toggleConeDisplay(){this.coneControl.enabled=!this.coneControl.enabled;animateCanvas(noUpdateTime);}
setConeRadius(value){this.coneControl.radius=value;animateCanvas(noUpdateTime);}
setConeAngle(value){this.coneControl.openingAngle=value;animateCanvas(noUpdateTime);}
_initMouseEvents(){var _this=this;var canvas=this.mainCanvas;var ctx=this.mainContext;var bgCtx=this.bgContext;canvas.addEventListener('dblclick',function(evt){_this.lastX=canvas.width/2;_this.lastY=canvas.height/2;_this.dragStart=null;_this.dragged=false;ctx.setTransform(1,0,0,1,0,0);ctx.scale(resolutionMultiplier,resolutionMultiplier);bgCtx.setTransform(1,0,0,1,0,0);bgCtx.scale(resolutionMultiplier,resolutionMultiplier);_this.needBGUpdate=true;if(_this.animation===null){animateCanvas(noUpdateTime);}},false);canvas.addEventListener('mousedown',function(evt){_this.lastX=evt.offsetX||(evt.pageX-canvas.offsetLeft);_this.lastY=evt.offsetY||(evt.pageY-canvas.offsetTop);_this.dragStart=ctx.transformedPoint(_this.lastX,_this.lastY);_this.dragged=false;},false);canvas.addEventListener('mousemove',function(evt){_this.lastX=evt.offsetX||(evt.pageX-canvas.offsetLeft);_this.lastY=evt.offsetY||(evt.pageY-canvas.offsetTop);_this.dragged=true;if(_this.dragStart){var pt=ctx.transformedPoint(_this.lastX,_this.lastY);ctx.translate(pt.x-_this.dragStart.x,pt.y-_this.dragStart.y);bgCtx.translate(pt.x-_this.dragStart.x,pt.y-_this.dragStart.y);_this.needBGUpdate=true;if(_this.animation===null){animateCanvas(noUpdateTime);}}},false);document.body.addEventListener('mouseup',function(evt){_this.dragStart=null;},false);var zoom=function(evt){var delta=evt.wheelDelta?evt.wheelDelta/40:evt.detail?-evt.detail:0;if(delta){var pt=ctx.transformedPoint(_this.lastX,_this.lastY);ctx.translate(pt.x,pt.y);bgCtx.translate(pt.x,pt.y);var factor=Math.pow(1.1,delta);ctx.scale(factor,factor);ctx.translate(-pt.x,-pt.y);bgCtx.scale(factor,factor);bgCtx.translate(-pt.x,-pt.y);_this.needBGUpdate=true;if(_this.animation===null){animateCanvas(noUpdateTime);}}
return evt.preventDefault()&&false;};canvas.addEventListener('DOMMouseScroll',zoom,false);canvas.addEventListener('mousewheel',zoom,false);}
_initTouchEvents(){}
setSpeed(value){this.speed=value;}
getSpeed(){if(this.backwards){return-this.speed;}
return this.speed;}
toggleBackwards(){this.backwards=!this.backwards;return this.backwards;}
toggleRange(index){this.rangeControl[index].enabled=!this.rangeControl[index].enabled;animateCanvas(noUpdateTime);}
setRangeRadius(index,value){this.rangeControl[index].radius=value;animateCanvas(noUpdateTime);}
_trackTransforms(ctx){var svg=document.createElementNS("http://www.w3.org/2000/svg",'svg');var xform=svg.createSVGMatrix();ctx.getTransform=function(){return xform;};var savedTransforms=[];var save=ctx.save;ctx.save=function(){savedTransforms.push(xform.translate(0,0));return save.call(ctx);};var restore=ctx.restore;ctx.restore=function(){xform=savedTransforms.pop();return restore.call(ctx);};var scale=ctx.scale;var _this=this;ctx.scale=function(sx,sy){xform=xform.scaleNonUniform(sx,sy);var xAxis=Math.sqrt(xform.a*xform.a+xform.b*xform.b);var yAxis=Math.sqrt(xform.c*xform.c+xform.d*xform.d);_this.scale=Math.max(xAxis,yAxis)/resolutionMultiplier;return scale.call(ctx,sx,sy);};var rotate=ctx.rotate;ctx.rotate=function(radians){xform=xform.rotate(radians*180/Math.PI);return rotate.call(ctx,radians);};var translate=ctx.translate;ctx.translate=function(dx,dy){xform=xform.translate(dx,dy);return translate.call(ctx,dx,dy);};var transform=ctx.transform;ctx.transform=function(a,b,c,d,e,f){var m2=svg.createSVGMatrix();m2.a=a;m2.b=b;m2.c=c;m2.d=d;m2.e=e;m2.f=f;xform=xform.multiply(m2);return transform.call(ctx,a,b,c,d,e,f);};var setTransform=ctx.setTransform;ctx.setTransform=function(a,b,c,d,e,f){xform.a=a;xform.b=b;xform.c=c;xform.d=d;xform.e=e;xform.f=f;return setTransform.call(ctx,a,b,c,d,e,f);};var pt=svg.createSVGPoint();ctx.transformedPoint=function(x,y){pt.x=x*resolutionMultiplier;pt.y=y*resolutionMultiplier;return pt.matrixTransform(xform.inverse());};}
_getBackgroundImage(){var time=this.reactiveDataStatus.time;for(var i=0;i<this.backgroundImages.length;i++){var imageData=this.backgroundImages[i];if(imageData.start<=time&&imageData.end>=time){return imageData.image;}}
return null;}
_drawBGCanvas(){var imgToDraw=this._getBackgroundImage();if((imgToDraw!==null&&imgToDraw!==this.prevBGImage)||this.needBGUpdate){this.needBGUpdate=false;this.prevBGImage=imgToDraw;var ctx=this.bgContext;var canvas=this.bgCanvas;var p1=ctx.transformedPoint(0,0);var p2=ctx.transformedPoint(canvas.width,canvas.height);ctx.clearRect(p1.x,p1.y,p2.x-p1.x,p2.y-p1.y);ctx.save();ctx.setTransform(1,0,0,1,0,0);ctx.clearRect(0,0,canvas.width,canvas.height);ctx.restore();ctx.drawImage(imgToDraw,0,0,canvas.width/resolutionMultiplier,canvas.height/resolutionMultiplier);ctx.save();ctx.setTransform(1,0,0,1,0,0);ctx.lineWidth=3*resolutionMultiplier;ctx.strokeStyle="#CC2200";var pos=resolutionMultiplier*70;var width=resolutionMultiplier*50;var height=resolutionMultiplier*6;ctx.beginPath();ctx.moveTo(pos,pos);ctx.lineTo(pos+width,pos);ctx.stroke();ctx.lineWidth=2*resolutionMultiplier;ctx.beginPath();ctx.moveTo(pos-resolutionMultiplier,pos+height);ctx.lineTo(pos-resolutionMultiplier,pos-height);ctx.stroke();ctx.beginPath();ctx.moveTo(pos+width+resolutionMultiplier,pos+height);ctx.lineTo(pos+width+resolutionMultiplier,pos-height);ctx.stroke();var fontSize=13*resolutionMultiplier;ctx.font="bold "+fontSize+"px Comic Sans MS";ctx.fillStyle="#CC2200";ctx.textAlign="center";ctx.fillText((50/(this.inchToPixel*this.scale)).toFixed(1)+" units",resolutionMultiplier*95,resolutionMultiplier*60);ctx.restore();}}
_drawActorOrientation(key){if(this.actorOrientationData.has(key)){this.actorOrientationData.get(key).draw();}}
_drawMainCanvas(){var _this=this;var ctx=this.mainContext;var canvas=this.mainCanvas;var p1=ctx.transformedPoint(0,0);var p2=ctx.transformedPoint(canvas.width,canvas.height);ctx.clearRect(p1.x,p1.y,p2.x-p1.x,p2.y-p1.y);ctx.save();ctx.setTransform(1,0,0,1,0,0);ctx.clearRect(0,0,canvas.width,canvas.height);ctx.restore();animator.backgroundActorData.sort((x,y)=>y.getHeight()-x.getHeight());for(let i=0;i<animator.backgroundActorData.length;i++){animator.backgroundActorData[i].draw();}
if(this.displaySettings.displayMechanics){for(let i=0;i<this.mechanicActorData.length;i++){this.mechanicActorData[i].draw();}}
if(this.displaySettings.displaySkillMechanics){for(let i=0;i<this.skillMechanicActorData.length;i++){this.skillMechanicActorData[i].draw();}}
this.friendlyMobData.forEach(function(value,key,map){if(!value.isSelected()){value.draw();_this._drawActorOrientation(key);}});if(!this.displaySettings.useActorHitboxWidth){this.playerData.forEach(function(value,key,map){if(!value.isSelected()){value.draw();_this._drawActorOrientation(key);}});}
if(this.displaySettings.displayTrashMobs){this.trashMobData.forEach(function(value,key,map){if(!value.isSelected()){value.draw();_this._drawActorOrientation(key);}});}
this.targetData.forEach(function(value,key,map){if(!value.isSelected()){value.draw();_this._drawActorOrientation(key);}});if(this.displaySettings.useActorHitboxWidth){this.playerData.forEach(function(value,key,map){if(!value.isSelected()){value.draw();_this._drawActorOrientation(key);}});}
if(this.selectedActor!==null){this.selectedActor.draw();this._drawActorOrientation(this.reactiveDataStatus.selectedActorID);}
if(this.displaySettings.displayMechanics){for(let i=0;i<this.overheadActorData.length;i++){this.overheadActorData[i].draw();}}}
draw(){if(!this.mainCanvas){return;}
this._drawBGCanvas();this._drawMainCanvas();if(overheadAnimationFrame===maxOverheadAnimationFrame||overheadAnimationFrame===0){overheadAnimationIncrement*=-1;}
overheadAnimationFrame+=overheadAnimationIncrement;}}
function animateCanvas(noRequest){if(animator==null){return;}
let lastTime=animator.times[animator.times.length-1];if(noRequest>noUpdateTime&&animator.animation!==null){let curTime=new Date().getTime();let timeOffset=curTime-animator.prevTime;animator.prevTime=curTime;animator.reactiveDataStatus.time=Math.round(Math.max(Math.min(animator.reactiveDataStatus.time+animator.getSpeed()*timeOffset,lastTime),0));}
if((animator.reactiveDataStatus.time===lastTime&&!animator.backwards)||(animator.reactiveDataStatus.time===0&&animator.backwards)){animator.stopAnimate(true);}
animator.timeSlider.value=animator.reactiveDataStatus.time.toString();if(noRequest>updateText){animator.updateTextInput();}
animator.draw();if(noRequest>noUpdateTime&&animator.animation!==null){animator.animation=requestAnimationFrame(animateCanvas);}}
"use strict";class IconDrawable{constructor(pos,angles,start,end,imgSrc,pixelSize,dead,down,dc,breakbarActive,hitboxWidth){this.pos=pos;this.angles=angles;this.start=start;this.end=end;this.img=new Image();this.img.src=imgSrc;this.img.onload=function(){animateCanvas(noUpdateTime);};this.pixelSize=pixelSize;this.group=null;this.dead=typeof dead!=="undefined"?dead:null;this.down=typeof down!=="undefined"?down:null;this.dc=typeof dc!=="undefined"?dc:null;this.breakbarActive=typeof breakbarActive!=="undefined"?breakbarActive:null;this.hitboxWidth=hitboxWidth;}
isSelected(){return animator.selectedActor===this;}
inSelectedGroup(){return false;}
died(){if(this.dead===null||this.dead.length===0){return false;}
var time=animator.reactiveDataStatus.time;for(let i=0;i<this.dead.length;i+=2){if(this.dead[i]<=time&&this.dead[i+1]>=time){return true;}}
return false;}
downed(){if(this.down===null||this.down.length===0){return false;}
var time=animator.reactiveDataStatus.time;for(let i=0;i<this.down.length;i+=2){if(this.down[i]<=time&&this.down[i+1]>=time){return true;}}
return false;}
disconnected(){if(this.dc===null||this.dc.length===0){return false;}
var time=animator.reactiveDataStatus.time;for(let i=0;i<this.dc.length;i+=2){if(this.dc[i]<=time&&this.dc[i+1]>=time){return true;}}
return false;}
isBreakbarActive(){if(this.breakbarActive===null||this.breakbarActive.length===0){return false;}
var time=animator.reactiveDataStatus.time;for(let i=0;i<this.breakbarActive.length;i+=2){if(this.breakbarActive[i]<=time&&this.breakbarActive[i+1]>=time){return true;}}
return false;}
getIcon(){if(this.died()){return deadIcon;}
if(this.downed()){return downIcon;}
if(this.disconnected()){return dcIcon;}
return this.img;}
getInterpolatedRotation(startIndex,currentIndex){const offsetedIndex=currentIndex-startIndex;const initialAngle=this.angles[offsetedIndex];const timeValue=animator.times[currentIndex];var angle=0;var time=animator.reactiveDataStatus.time;if(time-timeValue>0&&offsetedIndex<this.angles.length-1){const nextTimeValue=animator.times[currentIndex+1];let nextAngle=this.angles[offsetedIndex+1];if(nextAngle-initialAngle<-180){nextAngle+=360.0;}else if(nextAngle-initialAngle>180){nextAngle-=360.0;}
angle=initialAngle+(time-timeValue)/(nextTimeValue-timeValue)*(nextAngle-initialAngle);}else{angle=initialAngle;}
return angle;}
getInterpolatedPosition(startIndex,currentIndex){const offsetedIndex=currentIndex-startIndex;const positionX=this.pos[2*offsetedIndex];const positionY=this.pos[2*offsetedIndex+1];const timeValue=animator.times[currentIndex];var pt={x:0,y:0};var time=animator.reactiveDataStatus.time;if(time-timeValue>0&&offsetedIndex<0.5*this.pos.length-1){const nextTimeValue=animator.times[currentIndex+1];const nextPositionX=this.pos[2*offsetedIndex+2];const nextPositionY=this.pos[2*offsetedIndex+3];pt.x=positionX+(time-timeValue)/(nextTimeValue-timeValue)*(nextPositionX-positionX);pt.y=positionY+(time-timeValue)/(nextTimeValue-timeValue)*(nextPositionY-positionY);}else{pt.x=positionX;pt.y=positionY;}
pt.x=Math.round(10*pt.x*animator.scale)/(10*animator.scale);pt.y=Math.round(10*pt.y*animator.scale)/(10*animator.scale);return pt;}
canDraw(){return true;}
getRotation(){if(this.angles===null||this.angles.length===0||this.disconnected()){return null;}
var time=animator.reactiveDataStatus.time;if(this.start!==-1&&(this.start>time||this.end<time)){return null;}
if(this.angles.length===1){return this.angles[0];}
const lastTime=animator.times[animator.times.length-1];const startIndex=Math.ceil((animator.times.length-1)*Math.max(this.start,0)/lastTime);const currentIndex=Math.floor((animator.times.length-1)*time/lastTime);return this.getInterpolatedRotation(startIndex,Math.max(currentIndex,startIndex));}
getPosition(){if(this.pos===null||this.pos.length===0||this.disconnected()){return null;}
var time=animator.reactiveDataStatus.time;if(this.start!==-1&&(this.start>time||this.end<time)){return null;}
if(this.pos.length===2){return{x:this.pos[0],y:this.pos[1]};}
const lastTime=animator.times[animator.times.length-1];const startIndex=Math.ceil((animator.times.length-1)*Math.max(this.start,0)/lastTime);const currentIndex=Math.floor((animator.times.length-1)*time/lastTime);return this.getInterpolatedPosition(startIndex,Math.max(currentIndex,startIndex));}
getSize(){if(animator.displaySettings.useActorHitboxWidth&&this.hitboxWidth>0){return this.hitboxWidth;}else{return this.pixelSize/animator.scale;}}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();if(pos===null){return;}
var ctx=animator.mainContext;const fullSize=this.getSize();const halfSize=fullSize/2;var isSelected=this.isSelected();var inSelectedGroup=this.inSelectedGroup();if(animator.displaySettings.highlightSelectedGroup&&!isSelected&&inSelectedGroup){ctx.beginPath();ctx.lineWidth=(2/animator.scale).toString();ctx.strokeStyle='blue';ctx.rect(pos.x-halfSize,pos.y-halfSize,fullSize,fullSize);ctx.stroke();}else if(isSelected){ctx.beginPath();ctx.lineWidth=(4/animator.scale).toString();ctx.strokeStyle='green';ctx.rect(pos.x-halfSize,pos.y-halfSize,fullSize,fullSize);ctx.stroke();animator.rangeControl.forEach(function(element){if(!element.enabled){return;}
ctx.beginPath();ctx.lineWidth=(2/animator.scale).toString();ctx.strokeStyle='green';ctx.arc(pos.x,pos.y,animator.inchToPixel*element.radius,0,2*Math.PI);ctx.stroke();});}
ctx.drawImage(this.getIcon(),pos.x-halfSize,pos.y-halfSize,fullSize,fullSize);}}
class SquadIconDrawable extends IconDrawable{constructor(start,end,imgSrc,pixelSize,group,pos,angles,dead,down,dc,breakbarActive,hitboxWidth){super(pos,angles,start,end,imgSrc,pixelSize,dead,down,dc,breakbarActive,hitboxWidth);this.group=group;}
inSelectedGroup(){return animator.selectedActor!==null&&animator.selectedActor.group===this.group;}}
class NonSquadIconDrawable extends IconDrawable{constructor(start,end,imgSrc,pixelSize,pos,angles,dead,down,dc,breakbarActive,masterID,hitboxWidth){super(pos,angles,start,end,imgSrc,pixelSize,dead,down,dc,breakbarActive,hitboxWidth);this.masterID=typeof masterID==="undefined"?-1:masterID;this.master=null;}
canDraw(){if(this.master===null){this.master=animator.getActorData(this.masterID);}
if(this.master&&!animator.displaySettings.displayAllMinions){return this.master.isSelected()&&animator.displaySettings.displaySelectedMinions;}
return true;}}
"use strict";function interpolatedPositionFetcher(connection,master){var index=-1;var totalPoints=connection.positions.length/3;var time=animator.reactiveDataStatus.time;for(var i=0;i<totalPoints;i++){var posTime=connection.positions[3*i+2];if(time<posTime){break;}
index=i;}
if(index===-1){return{x:connection.positions[0],y:connection.positions[1]};}else if(index===totalPoints-1){return{x:connection.positions[3*index],y:connection.positions[3*index+1]};}else{var cur={x:connection.positions[3*index],y:connection.positions[3*index+1]};var curTime=connection.positions[3*index+2];var next={x:connection.positions[3*(index+1)],y:connection.positions[3*(index+1)+1]};var nextTime=connection.positions[3*(index+1)+2];var pt={x:0,y:0};pt.x=cur.x+(time-curTime)/(nextTime-curTime)*(next.x-cur.x);pt.y=cur.y+(time-curTime)/(nextTime-curTime)*(next.y-cur.y);return pt;}}
function staticPositionFetcher(connection,master){return{x:connection.position[0],y:connection.position[1]};}
function noOffsetFetcher(connection){return{x:0,y:0};}
function staticOffsetFetcher(connection){return{x:animator.inchToPixel*connection.offset[0],y:animator.inchToPixel*connection.offset[1]};}
function masterPositionFetcher(connection,master){if(!master){return null;}
return master.getPosition();}
function noAngleFetcher(connection,master,start,end){return 0;}
function staticAngleFetcher(connection,master,start,end){var time=animator.reactiveDataStatus.time;var velocity=Math.min((time-start)/(end-start),1.0);return connection.angles[0]+velocity*connection.angles[1];}
function masterRotationFetcher(connection,master,start,end){if(!master){return null;}
return master.getRotation();}
const RotationOffsetMode={addToMaster:0,absoluteOrientation:1,rotateAfterTranslationOffset:2,};class MechanicDrawable{constructor(start,end,connectedTo,rotationConnectedTo){this.start=start;this.end=end;this.positionFetcher=null;this.connectedTo=connectedTo;if(connectedTo.interpolationMethod>=0){this.positionFetcher=interpolatedPositionFetcher;}else if(connectedTo.position){this.positionFetcher=staticPositionFetcher;}else if(connectedTo.masterId>=0){this.positionFetcher=masterPositionFetcher;}
this.offsetFetcher=noOffsetFetcher;if(connectedTo.offset){this.offsetFetcher=staticOffsetFetcher;}
this.rotationFetcher=noAngleFetcher;this.rotationConnectedTo=rotationConnectedTo;this.rotationOffset=0;this.rotationOffsetMode=RotationOffsetMode.addToMaster;if(rotationConnectedTo){if(rotationConnectedTo.angles){this.rotationFetcher=staticAngleFetcher;}else if(rotationConnectedTo.masterId){this.rotationFetcher=masterRotationFetcher;this.rotationOffset=rotationConnectedTo.rotationOffset;this.rotationOffsetMode=rotationConnectedTo.rotationOffsetMode;}}
this.master=null;this.rotationMaster=null;this.ownerID=null;this.owner=null;this.category=0;}
usingSkillMode(ownerID,category){this.ownerID=ownerID;this.category=category;return this;}
draw(){console.error("Draw should be overriden");}
getOffset(){var time=animator.reactiveDataStatus.time;if(this.start!==-1&&(this.start>time||this.end<time)){return null;}
return this.offsetFetcher(this.connectedTo);}
getRotation(){var time=animator.reactiveDataStatus.time;if(this.start!==-1&&(this.start>time||this.end<time)){return null;}
return this.rotationFetcher(this.rotationConnectedTo,this.rotationMaster,this.start,this.end);}
getPosition(){var time=animator.reactiveDataStatus.time;if(this.start!==-1&&(this.start>time||this.end<time)){return null;}
return this.positionFetcher(this.connectedTo,this.master);}
moveContext(ctx,pos,rot){const angle=ToRadians(rot);const offsetAngle=ToRadians(this.rotationOffset);const offset=this.getOffset();const offsetAfterRotation=this.connectedTo.offsetAfterRotation;ctx.translate(pos.x,pos.y);if(!offsetAfterRotation){ctx.translate(offset.x,offset.y);}
ctx.rotate(angle);if(offsetAngle!==0&&this.rotationOffsetMode===RotationOffsetMode.addToMaster){ctx.rotate(offsetAngle);}
if(offsetAfterRotation){ctx.translate(offset.x,offset.y);}
if(offsetAngle!==0&&this.rotationOffsetMode===RotationOffsetMode.rotateAfterTranslationOffset){ctx.rotate(offsetAngle);}
if(offsetAngle!==0&&this.rotationOffsetMode===RotationOffsetMode.absoluteOrientation){ctx.rotate(-angle);ctx.rotate(offsetAngle);}}
canDraw(){if(this.connectedTo===null){return false;}
if(this.positionFetcher===masterPositionFetcher){if(this.master===null){let masterId=this.connectedTo.masterId;this.master=animator.getActorData(masterId);}
if(!this.master||(!this.master.canDraw()&&!this.ownerID)){return false;}}
if(this.rotationFetcher===masterRotationFetcher){if(this.rotationMaster===null){let masterId=this.rotationConnectedTo.masterId;this.rotationMaster=animator.getActorData(masterId);}
if(!this.rotationMaster||(!this.rotationMaster.canDraw()&&!this.ownerID)){return false;}}
if(this.ownerID!==null){if(this.owner===null){this.owner=animator.getActorData(this.ownerID);}
if(!this.owner){return false;}
let renderMask=animator.displaySettings.skillMechanicsMask;let drawOnSelect=(renderMask&SkillDecorationCategory["Show On Select"])>0;renderMask&=~SkillDecorationCategory["Show On Select"];if((this.category&renderMask)>0){return true;}else if(drawOnSelect&&(this.owner.isSelected()||(this.owner.master&&this.owner.master.isSelected()))){return true;}
return false;}
return true;}}
class FacingMechanicDrawable extends MechanicDrawable{constructor(start,end,connectedTo,rotationConnectedTo){super(start,end,connectedTo,rotationConnectedTo);}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();const rot=this.getRotation();if(pos===null||rot===null){return;}
var ctx=animator.mainContext;ctx.save();this.moveContext(ctx,pos,rot);const facingFullSize=5*this.master.getSize()/3;const facingHalfSize=facingFullSize/2;if(this.master!==null&&animator.coneControl.enabled&&this.master.isSelected()){ctx.save();var coneOpening=ToRadians(animator.coneControl.openingAngle);ctx.rotate(0.5*coneOpening);var coneRadius=animator.inchToPixel*animator.coneControl.radius;ctx.beginPath();ctx.arc(0,0,coneRadius,-coneOpening,0,false);ctx.arc(0,0,0,0,coneOpening,true);ctx.closePath();ctx.fillStyle="rgba(0, 255, 200, 0.3)";ctx.fill();ctx.restore();}
ctx.drawImage(facingIcon,-facingHalfSize,-facingHalfSize,facingFullSize,facingFullSize);ctx.restore();}}
class FormMechanicDrawable extends MechanicDrawable{constructor(start,end,fill,growingEnd,color,connectedTo,rotationConnectedTo){super(start,end,connectedTo,rotationConnectedTo);this.fill=fill;this.growingEnd=growingEnd;this.color=color;}
getPercent(){if(this.growingEnd===0){return 1.0;}
var time=animator.reactiveDataStatus.time;var value=Math.min((time-this.start)/(Math.abs(this.growingEnd)-this.start),1.0);if(this.growingEnd<0){value=1-value;}
return value;}}
class CircleMechanicDrawable extends FormMechanicDrawable{constructor(start,end,fill,growingEnd,color,radius,connectedTo,rotationConnectedTo,minRadius){super(start,end,fill,growingEnd,color,connectedTo,rotationConnectedTo);this.radius=radius;this.minRadius=minRadius;}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();const rot=this.getRotation();if(pos===null||rot===null){return;}
var ctx=animator.mainContext;ctx.save();this.moveContext(ctx,pos,rot);ctx.beginPath();ctx.arc(0,0,this.getPercent()*(this.radius-this.minRadius)+this.minRadius,0,2*Math.PI);if(this.fill){ctx.fillStyle=this.color;ctx.fill();}else{ctx.lineWidth=(2/animator.scale).toString();ctx.strokeStyle=this.color;ctx.stroke();}
ctx.restore();}}
class DoughnutMechanicDrawable extends FormMechanicDrawable{constructor(start,end,fill,growingEnd,color,innerRadius,outerRadius,connectedTo,rotationConnectedTo){super(start,end,fill,growingEnd,color,connectedTo,rotationConnectedTo);this.outerRadius=outerRadius;this.innerRadius=innerRadius;}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();const rot=this.getRotation();if(pos===null||rot===null){return;}
const percent=this.getPercent();var ctx=animator.mainContext;ctx.save();this.moveContext(ctx,pos,rot);ctx.beginPath();if(this.growingEnd<0){ctx.arc(0,0,this.outerRadius,2*Math.PI,0,false);ctx.arc(0,0,this.innerRadius+percent*(this.outerRadius-this.innerRadius),0,2*Math.PI,true);}else{ctx.arc(0,0,this.innerRadius+percent*(this.outerRadius-this.innerRadius),2*Math.PI,0,false);ctx.arc(0,0,this.innerRadius,0,2*Math.PI,true);}
ctx.closePath();if(this.fill){ctx.fillStyle=this.color;ctx.fill();}else{ctx.lineWidth=(2/animator.scale).toString();ctx.strokeStyle=this.color;ctx.stroke();}
ctx.restore();}}
class RectangleMechanicDrawable extends FormMechanicDrawable{constructor(start,end,fill,growingEnd,color,width,height,connectedTo,rotationConnectedTo){super(start,end,fill,growingEnd,color,connectedTo,rotationConnectedTo);this.height=height;this.width=width;}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();const rot=this.getRotation();if(pos===null||rot===null){return;}
const percent=this.getPercent();var ctx=animator.mainContext;ctx.save();this.moveContext(ctx,pos,rot);ctx.beginPath();ctx.rect(-0.5*percent*this.width,-0.5*percent*this.height,percent*this.width,percent*this.height);if(this.fill){ctx.fillStyle=this.color;ctx.fill();}else{ctx.lineWidth=(2/animator.scale).toString();ctx.strokeStyle=this.color;ctx.stroke();}
ctx.restore();}}
class PieMechanicDrawable extends FormMechanicDrawable{constructor(start,end,fill,growingEnd,color,openingAngle,radius,connectedTo,rotationConnectedTo){super(start,end,fill,growingEnd,color,connectedTo,rotationConnectedTo);this.openingAngleRadians=ToRadians(openingAngle);this.halfOpeningAngle=0.5*openingAngle;this.radius=radius;}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();const rot=this.getRotation();if(pos===null||rot===null){return;}
var ctx=animator.mainContext;const percent=this.getPercent();ctx.save();this.moveContext(ctx,pos,rot+this.halfOpeningAngle);ctx.beginPath();ctx.arc(0,0,percent*this.radius,-this.openingAngleRadians,0,false);ctx.arc(0,0,0,0,this.openingAngleRadians,true);ctx.closePath();if(this.fill){ctx.fillStyle=this.color;ctx.fill();}else{ctx.lineWidth=(2/animator.scale).toString();ctx.strokeStyle=this.color;ctx.stroke();}
ctx.restore();}}
class LineMechanicDrawable extends FormMechanicDrawable{constructor(start,end,growingEnd,color,connectedFrom,connectedTo){super(start,end,false,growingEnd,color,connectedTo,null);this.connectedFrom=connectedFrom;this.targetPositionFetcher=null;if(connectedFrom.interpolationMethod>=0){this.targetPositionFetcher=interpolatedPositionFetcher;}else if(connectedFrom.position instanceof Array){this.targetPositionFetcher=staticPositionFetcher;}else{this.targetPositionFetcher=masterPositionFetcher;}
this.targetOffsetFetcher=noOffsetFetcher;if(connectedFrom.offset){this.targetOffsetFetcher=staticOffsetFetcher;}
this.endMaster=null;}
getTargetPosition(){var time=animator.reactiveDataStatus.time;if(this.start!==-1&&(this.start>time||this.end<time)){return null;}
var pos=this.targetPositionFetcher(this.connectedFrom,this.endMaster);if(!pos){return null;}
var offset=this.targetOffsetFetcher(this.connectedFrom);pos.x+=offset.x;pos.y+=offset.y;return pos;}
canDraw(){if(this.connectedFrom===null){return false;}
if(this.targetPositionFetcher===masterPositionFetcher){if(this.endMaster===null){let masterId=this.connectedFrom.masterId;this.endMaster=animator.getActorData(masterId);}
if(!this.endMaster||!this.endMaster.canDraw()){return false;}}
return super.canDraw();}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();const target=this.getTargetPosition();if(pos===null||target===null){return;}
const percent=this.getPercent();var ctx=animator.mainContext;ctx.save();if(this.growingEnd<0){this.moveContext(ctx,target,0);ctx.beginPath();ctx.moveTo(0,0);ctx.lineTo((1-percent)*(pos.x-target.x),percent*(pos.y-target.y));}else{this.moveContext(ctx,pos,0);ctx.beginPath();ctx.moveTo(0,0);ctx.lineTo(percent*(target.x-pos.x),percent*(target.y-pos.y));}
ctx.lineWidth=(2/animator.scale).toString();ctx.strokeStyle=this.color;ctx.stroke();ctx.restore();}}
class BackgroundDrawable{constructor(start,end){this.start=start;this.end=end;}
draw(){}
getHeight(){return 0;}
getPosition(){return null;}}
class MovingPlatformDrawable extends BackgroundDrawable{constructor(start,end,image,width,height,positions){super(start,end);this.image=new Image();this.image.src=image;this.image.onload=function(){animateCanvas(noUpdateTime);};this.width=width;this.height=height;this.positions=positions;if(this.positions.length>1){this.currentIndex=0;this.currentStart=Number.NEGATIVE_INFINITY;this.currentEnd=positions[0][5];}}
draw(){const pos=this.getInterpolatedPosition();if(pos===null){return;}
let ctx=animator.mainContext;const rads=pos.angle;ctx.save();ctx.translate(pos.x,pos.y);ctx.rotate(rads%(2*Math.PI));ctx.globalAlpha=pos.opacity;ctx.drawImage(this.image,-0.5*this.width,-0.5*this.height,this.width,this.height);ctx.restore();}
getHeight(){let position=this.getInterpolatedPosition();if(position===null){return Number.NEGATIVE_INFINITY;}
return position.z;}
getInterpolatedPosition(){let time=animator.reactiveDataStatus.time;if(time<this.start||time>this.end){return null;}
if(this.positions.length===0){return null;}
if(this.positions.length===1){return{x:this.positions[0][0],y:this.positions[0][1],z:this.positions[0][2],angle:this.positions[0][3],opacity:this.positions[0][4],};}
let i;let changed=false;if(this.currentStart<=time&&time<this.currentEnd){i=this.currentIndex;}else{for(i=0;i<this.positions.length;i++){let positionTime=this.positions[i][5];if(positionTime>time){break;}}
changed=true;}
if(changed){this.currentIndex=i;if(i===0){this.currentStart=Number.NEGATIVE_INFINITY;this.currentEnd=this.positions[0][5];}else{this.currentStart=this.positions[i-1][5];if(i===this.positions.length){this.currentEnd=Number.POSITIVE_INFINITY;}else{this.currentEnd=this.positions[i][5];}}}
if(i===0){return null;}
if(i===this.positions.length){return{x:this.positions[i-1][0],y:this.positions[i-1][1],z:this.positions[i-1][2],angle:this.positions[i-1][3],opacity:this.positions[i-1][4],};}
let progress=(time-this.positions[i-1][5])/(this.positions[i][5]-this.positions[i-1][5]);return{x:(this.positions[i-1][0]*(1-progress)+this.positions[i][0]*progress),y:(this.positions[i-1][1]*(1-progress)+this.positions[i][1]*progress),z:(this.positions[i-1][2]*(1-progress)+this.positions[i][2]*progress),angle:(this.positions[i-1][3]*(1-progress)+this.positions[i][3]*progress),opacity:(this.positions[i-1][4]*(1-progress)+this.positions[i][4]*progress),};}}
class IconMechanicDrawable extends MechanicDrawable{constructor(start,end,connectedTo,rotationConnectedTo,image,pixelSize,worldSize,opacity){super(start,end,connectedTo,rotationConnectedTo);this.image=new Image();this.image.src=image;this.image.onload=()=>animateCanvas(noUpdateTime);this.pixelSize=pixelSize;this.worldSize=worldSize;this.opacity=opacity;}
getSize(){if(animator.displaySettings.useActorHitboxWidth&&this.worldSize>0){return this.worldSize;}else{return this.pixelSize/animator.scale;}}
getSecondaryOffset(){return null;}
draw(){if(!this.canDraw()){return;}
const pos=this.getPosition();const rot=this.getRotation();if(pos===null||rot===null){return;}
const secondaryOffset=this.getSecondaryOffset();const size=this.getSize();const ctx=animator.mainContext;ctx.save();this.moveContext(ctx,pos,rot);ctx.globalAlpha=this.opacity;if(secondaryOffset){ctx.translate(secondaryOffset.x,secondaryOffset.y);}
ctx.rotate(-ToRadians(rot+this.rotationOffset));ctx.drawImage(this.image,-size/2,-size/2,size,size);ctx.restore();}}
class IconOverheadMechanicDrawable extends IconMechanicDrawable{constructor(start,end,connectedTo,rotationConnectedTo,image,pixelSize,worldSize,opacity){super(start,end,connectedTo,rotationConnectedTo,image,pixelSize,worldSize,opacity);}
getSize(){if(animator.displaySettings.useActorHitboxWidth&&this.worldSize>0){return this.worldSize;}else{return this.pixelSize/animator.scale;}}
getSecondaryOffset(){if(!this.master){console.error('Invalid IconOverhead decoration');return null;}
const masterSize=this.master.getSize();const scale=animator.displaySettings.useActorHitboxWidth?1/animator.inchToPixel:animator.scale;let offset={x:0,y:0,};offset.y-=masterSize/4+this.getSize()/2+3*overheadAnimationFrame/maxOverheadAnimationFrame/scale;return offset;}}